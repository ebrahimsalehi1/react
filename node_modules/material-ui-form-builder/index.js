"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _lodash = _interopRequireDefault(require("lodash"));

var _reactLayoutComponents = _interopRequireWildcard(require("react-layout-components"));

var _Button = _interopRequireDefault(require("@material-ui/core/Button"));

var _FormControlLabel = _interopRequireDefault(require("@material-ui/core/FormControlLabel"));

var _FormGroup = _interopRequireDefault(require("@material-ui/core/FormGroup"));

var _FormControl = _interopRequireDefault(require("@material-ui/core/FormControl"));

var _Checkbox = _interopRequireDefault(require("@material-ui/core/Checkbox"));

var _IconButton = _interopRequireDefault(require("@material-ui/core/IconButton"));

var _Mood = _interopRequireDefault(require("@material-ui/icons/Mood"));

var _emojiPickerReact = _interopRequireDefault(require("emoji-picker-react"));

var _emojiJs = _interopRequireDefault(require("emoji-js"));

var _TextField = _interopRequireDefault(require("./components/TextField"));

var _ImageUpload = _interopRequireDefault(require("./components/ImageUpload"));

var _Select = _interopRequireDefault(require("./components/Select"));

var _AsyncSelect = _interopRequireDefault(require("./components/AsyncSelect"));

var _ChipInput = _interopRequireDefault(require("./components/ChipInput"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { keys.push.apply(keys, Object.getOwnPropertySymbols(object)); } if (enumerableOnly) keys = keys.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Form =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Form, _React$Component);

  function Form(props) {
    var _this;

    _classCallCheck(this, Form);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Form).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "style", {
      width: '100%'
    });

    _defineProperty(_assertThisInitialized(_this), "DEFAULT_IMG", _this.props.defaultImage || 'http://via.placeholder.com/50x50');

    _defineProperty(_assertThisInitialized(_this), "handleEmojiText", function (input) {
      if (_lodash.default.isString(input)) {
        var emoji = new _emojiJs.default();
        return emoji.replace_colons(input);
      } else return input;
    });

    _defineProperty(_assertThisInitialized(_this), "handleChange", function (field, value) {
      var fields = _this.props.fields;
      var wholeField = fields.find(function (_ref) {
        var name = _ref.name,
            key = _ref.key;
        return name === field || key === field;
      });
      var transformedValue = value;

      if (wholeField && wholeField.emoji === true) {
        if (wholeField.type === 'text' || wholeField.type === 'multiLineText') {
          transformedValue = _this.handleEmojiText(value);
        }
      }

      if (_this.state.timeout) {
        clearTimeout(_this.state.timeout);

        _this.setState({
          timeout: null
        }, function () {
          return _this.setChanges(field, transformedValue);
        });
      } else {
        _this.setChanges(field, transformedValue);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "getPickedEmoji", function (field, emojiData) {
      var pickedEmoji = ":".concat(emojiData.name, ":");
      var values = _this.state.values;

      if (pickedEmoji) {
        var newValue = values[field] ? "".concat(values[field]).concat(pickedEmoji) : pickedEmoji;

        _this.handleChange(field, newValue);
      } else {
        console.log('ERROR: Invalid emoji code');
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleEmojiPicker", function () {
      _this.setState({
        emojiPickerOpen: !_this.state.emojiPickerOpen
      });
    });

    _defineProperty(_assertThisInitialized(_this), "setChanges", function (field, value) {
      if (_this.props.handleChange) {
        _this.props.handleChange(field, value);
      }

      var values = _objectSpread({}, _this.props.values, {}, _this.state.values, _defineProperty({}, field, value));

      _this.setState({
        values: values
      }, function () {
        if (!_this.props.delayTime || !_this.props.onDelayedChange) {
          return false;
        }

        var time = 0;

        if (_lodash.default.includes(_this.props.delayTriggers, field)) {
          time = _this.props.delayTime;
        }

        var timeout = setTimeout(function () {
          _this.props.onDelayedChange(values);
        }, time);

        _this.setState({
          timeout: timeout
        });
      });

      if (_this.props.onChange) {
        _this.props.onChange(values);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "getProperty", function (key, defaultValue, formDefault) {
      var componentDefault = _lodash.default.get(_this.props.values, key);

      return _lodash.default.get(_this.state.values, key, componentDefault || defaultValue || formDefault);
    });

    _defineProperty(_assertThisInitialized(_this), "getName", function (name) {
      return _lodash.default.replace(name, /\./g, ' ');
    });

    _defineProperty(_assertThisInitialized(_this), "getField", function (field) {
      var errors = _this.props.errors;
      var key = field.key || field.name || 'key';
      var type = field.type || 'text';
      var defaultValue = field.default || null;
      var name = field.name || 'field';
      var disabled = field.disabled || false;
      var emoji = field.emoji || false;
      var dialogActive = field.dialogActive || false;
      var dialogContent = field.dialogContent || null;
      var dialogTitle = field.dialogTitle || null;

      switch (type) {
        case 'text':
        case 'password':
        case 'number':
          return _react.default.createElement(_TextField.default, {
            field: field,
            errors: _this.props.errors,
            value: _this.getProperty(key, defaultValue, ''),
            onChange: function onChange(event) {
              return _this.handleChange(key, event.target.value);
            }
          });

        case 'multiLineText':
          {
            return _react.default.createElement("div", null, _react.default.createElement("div", {
              style: {
                display: 'flex',
                alignItems: 'flex-end'
              }
            }, _react.default.createElement(_TextField.default, {
              field: field,
              errors: _this.props.errors,
              value: _this.getProperty(key, defaultValue, ''),
              onChange: function onChange(event) {
                return _this.handleChange(key, event.target.value);
              },
              multiline: true,
              rows: field.rows || 1,
              rowsMax: field.rowsMax || 3
            }), emoji ? _react.default.createElement("div", null, _react.default.createElement(_IconButton.default, {
              onClick: _this.handleEmojiPicker
            }, _react.default.createElement(_Mood.default, null))) : null), emoji && _this.state.emojiPickerOpen ? _react.default.createElement(_emojiPickerReact.default, {
              onEmojiClick: function onEmojiClick(emoji, emojiData) {
                return _this.getPickedEmoji(key, emojiData);
              }
            }) : null);
          }

        case 'select':
          return _react.default.createElement(_Select.default, {
            field: field,
            errors: _this.props.errors,
            selectedValue: _this.getProperty(key, defaultValue, field.multiple ? [] : ''),
            onChange: function onChange(value) {
              return _this.handleChange(key, value);
            },
            dialogActive: dialogActive,
            dialogContent: dialogContent,
            dialogTitle: dialogTitle
          });

        case 'asyncSelect':
          return _react.default.createElement(_AsyncSelect.default, {
            field: field,
            errors: _this.props.errors,
            onChange: function onChange(value) {
              return _this.handleChange(key, value);
            },
            selectedValue: _this.getProperty(key, defaultValue, field.multiple ? [] : '')
          });

        case 'checkbox':
          {
            return _react.default.createElement(_FormControl.default, {
              component: "fieldset"
            }, _react.default.createElement(_FormGroup.default, {
              row: true
            }, _react.default.createElement(_FormControlLabel.default, {
              control: _react.default.createElement(_Checkbox.default, {
                checked: _this.getProperty(key, defaultValue, false),
                value: "".concat(_this.getProperty(key, defaultValue, false)),
                onClick: function onClick(event) {
                  _this.handleChange(key, event.target.checked);
                },
                disabled: disabled
              }),
              label: _this.getName(name)
            })));
          }

        case 'chip':
          {
            var value = _this.getProperty(key, defaultValue, []);

            return _react.default.createElement(_ChipInput.default, {
              field: field,
              value: value,
              onChange: function onChange(value) {
                return _this.handleChange(key, value);
              },
              errors: errors
            });
          }

        case 'image':
        case 'image2':
          {
            var defaultImg = defaultValue || _this.DEFAULT_IMG;
            return _react.default.createElement(_ImageUpload.default, {
              field: field,
              srcValue: _this.getProperty(key, defaultImg, '') + '?' + new Date().getTime(),
              defaultImg: _this.DEFAULT_IMG,
              handleChange: _this.handleChange
            });
          }
      }
    });

    _defineProperty(_assertThisInitialized(_this), "getFields", function () {
      return _this.props.fields.map(function (field, index) {
        return _react.default.createElement("div", {
          key: "form-field-container-".concat(index),
          style: _objectSpread({
            margin: '10px 0'
          }, _this.props.inputContainerStyle)
        }, _this.getField(field));
      });
    });

    _this.state = {
      values: _this.props.values,
      emojiPickerOpen: false,
      timeout: null,
      index: 0
    };
    return _this;
  }

  _createClass(Form, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var FieldContainer = _reactLayoutComponents.VBox;

      if (this.props.orientation === 'horizontal') {
        FieldContainer = _reactLayoutComponents.default;
      }

      return _react.default.createElement(_reactLayoutComponents.VBox, {
        style: this.style
      }, _react.default.createElement(FieldContainer, {
        style: _objectSpread({
          backgroundColor: '#fefefe',
          padding: 10,
          overflowY: 'scroll'
        }, this.props.fieldContainerStyle),
        flex: 1,
        wrap: this.props.wrap
      }, this.getFields()), _react.default.createElement(_reactLayoutComponents.default, {
        style: _objectSpread({
          justifyContent: 'center'
        }, this.props.actionContainerStyle)
      }, this.props.saveForm && _react.default.createElement(_Button.default, {
        variant: "contained",
        onClick: function onClick() {
          return _this2.props.saveForm(_this2.state.values);
        },
        style: {
          display: 'block',
          margin: '0 auto',
          width: '30%'
        }
      }, 'Save')));
    }
  }]);

  return Form;
}(_react.default.Component);

exports.default = Form;