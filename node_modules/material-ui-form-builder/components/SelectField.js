"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _lodash = _interopRequireDefault(require("lodash"));

var _propTypes = require("prop-types");

var _Select = _interopRequireDefault(require("@material-ui/core/Select"));

var _FormControl = _interopRequireDefault(require("@material-ui/core/FormControl"));

var _ListItemText = _interopRequireDefault(require("@material-ui/core/ListItemText"));

var _Checkbox = _interopRequireDefault(require("@material-ui/core/Checkbox"));

var _MenuItem = _interopRequireDefault(require("@material-ui/core/MenuItem"));

var _InputLabel = _interopRequireDefault(require("@material-ui/core/InputLabel"));

var _FormHelperText = _interopRequireDefault(require("@material-ui/core/FormHelperText"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var getName = function getName(name) {
  return _lodash.default.replace(name, /\./g, ' ');
};

var getRenderValue = function getRenderValue(selected, items, multiple) {
  if (!multiple) return items.find(function (item) {
    return item.value === selected;
  }).title;
  return items.reduce(function (result, item) {
    if (selected.includes(item.value)) {
      result.push(item.title);
    }

    return result;
  }, []).join(', ');
};

var CustomSelect = function CustomSelect(_ref) {
  var field = _ref.field,
      selectedValues = _ref.selectedValues,
      errors = _ref.errors,
      onChange = _ref.onChange,
      others = _objectWithoutProperties(_ref, ["field", "selectedValues", "errors", "onChange"]);

  var key = field.key || field.name || 'key';
  var inputKey = "form-".concat(key);
  var name = field.name || 'field';
  var disabled = field.disabled || false;
  var multiple = field.multiple || false;
  var helperText = field.helperText || '';
  var empty = field.empty || false;

  var errorText = _lodash.default.get(errors, key, false);

  var items = field.items || [];
  return _react.default.createElement(_FormControl.default, {
    style: {
      width: '100%'
    },
    error: !!errorText
  }, _react.default.createElement(_InputLabel.default, {
    htmlFor: "".concat(getName(name))
  }, getName(name)), _react.default.createElement(_Select.default, _extends({
    key: inputKey,
    fullWidth: true,
    multiple: multiple,
    label: getName(name),
    value: selectedValues,
    onChange: onChange,
    renderValue: function renderValue(selected) {
      return getRenderValue(selected, items, multiple);
    },
    disabled: disabled
  }, others), empty && !multiple && _react.default.createElement(_MenuItem.default, {
    key: 'None',
    value: ""
  }, _react.default.createElement(_Checkbox.default, {
    checked: multiple ? selectedValues.indexOf('') > -1 : selectedValues === ''
  }), _react.default.createElement(_ListItemText.default, {
    primary: 'None'
  })), items.map(function (item) {
    return _react.default.createElement(_MenuItem.default, {
      key: item.title,
      value: item.value
    }, _react.default.createElement(_Checkbox.default, {
      checked: multiple ? selectedValues.indexOf(item.value) > -1 : selectedValues === item.value
    }), _react.default.createElement(_ListItemText.default, {
      primary: item.title
    }));
  })), _react.default.createElement(_FormHelperText.default, null, errorText ? errorText : helperText));
};

CustomSelect.defaultProps = {
  errors: {},
  multiline: false
};
CustomSelect.propTypes = {
  field: (0, _propTypes.shape)({
    name: _propTypes.string,
    type: _propTypes.string,
    key: _propTypes.string
  }).isRequired,
  selectedValues: (0, _propTypes.oneOfType)([_propTypes.array, (0, _propTypes.oneOfType)([_propTypes.string, _propTypes.number])]).isRequired,
  onChange: _propTypes.func.isRequired,
  errors: (0, _propTypes.shape)({})
};
var _default = CustomSelect;
exports.default = _default;