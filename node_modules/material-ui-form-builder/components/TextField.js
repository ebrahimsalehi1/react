"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _lodash = _interopRequireDefault(require("lodash"));

var _propTypes = require("prop-types");

var _TextField = _interopRequireDefault(require("@material-ui/core/TextField"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var getName = function getName(name) {
  return _lodash.default.replace(name, /\./g, ' ');
};

var CustomTextField = function CustomTextField(_ref) {
  var field = _ref.field,
      value = _ref.value,
      errors = _ref.errors,
      onChange = _ref.onChange,
      multiline = _ref.multiline,
      others = _objectWithoutProperties(_ref, ["field", "value", "errors", "onChange", "multiline"]);

  var key = field.key || field.name || 'key';
  var inputKey = "form-".concat(key);
  var name = field.name || 'field';
  var disabled = field.disabled || false;
  var helpertext = field.helpertext || '';
  var type = field.type || 'text';

  var errorText = _lodash.default.get(errors, key, false);

  return _react.default.createElement(_TextField.default, _extends({
    key: inputKey,
    type: type,
    placeholder: getName(name),
    helperText: errorText ? errorText : helpertext,
    label: getName(name),
    error: !!errorText,
    name: name,
    value: value,
    onChange: onChange,
    disabled: disabled,
    multiline: multiline,
    fullWidth: true
  }, others, {
    InputProps: {
      style: multiline ? {
        minHeight: '36px'
      } : {
        height: '36px'
      }
    }
  }));
};

CustomTextField.defaultProps = {
  errors: {},
  multiline: false
};
CustomTextField.propTypes = {
  onChange: _propTypes.func.isRequired,
  field: (0, _propTypes.shape)({
    name: _propTypes.string,
    type: (0, _propTypes.oneOf)(['text', 'select', 'multiLineText', 'number', 'password']),
    key: _propTypes.string,
    disabled: _propTypes.bool
  }).isRequired,
  value: (0, _propTypes.oneOfType)([_propTypes.string, _propTypes.number, _propTypes.array]),
  errors: (0, _propTypes.shape)({}),
  multiline: _propTypes.bool
};
var _default = CustomTextField;
exports.default = _default;