{"ast":null,"code":"var _jsxFileName = \"/home/alireza/Documents/react/src/App.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport SortableTree, { addNodeUnderParent, removeNodeAtPath, changeNodeAtPath, getNodeAtPath, toggleExpandedForAll, defaultSearchMethod, map as mapTree } from \"react-sortable-tree\";\nimport treeData from \"./treeData\";\nimport \"./stylestree.css\";\nimport \"react-sortable-tree/style.css\";\nconst maxDepth = 5;\n\nconst alertNodeInfo = ({\n  node,\n  path,\n  treeIndex\n}) => {\n  const objectString = Object.keys(node).map(k => k === \"children\" ? \"children: Array\" : `${k}: '${node[k]}'`).join(\",\\n   \");\n  global.alert(\"Info passed to the button generator:\\n\\n\" + `node: {\\n   ${objectString}\\n},\\n` + `path: [${path.join(\", \")}],\\n` + `treeIndex: ${treeIndex}`);\n};\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      searchString: \"\",\n      searchFocusIndex: -1,\n      searchFoundCount: 0,\n      treeData\n    };\n\n    this.handleTreeOnChange = treeData => {\n      this.setState({\n        treeData\n      });\n      console.log(this.state.treeData);\n    };\n\n    this.handleSearchOnChange = e => {\n      this.setState({\n        searchString: e.target.value\n      });\n    };\n\n    this.selectPrevMatch = () => {\n      const _this$state = this.state,\n            searchFocusIndex = _this$state.searchFocusIndex,\n            searchFoundCount = _this$state.searchFoundCount;\n      this.setState({\n        searchFocusIndex: searchFocusIndex !== null ? (searchFoundCount + searchFocusIndex - 1) % searchFoundCount : searchFoundCount - 1\n      });\n    };\n\n    this.selectNextMatch = () => {\n      const _this$state2 = this.state,\n            searchFocusIndex = _this$state2.searchFocusIndex,\n            searchFoundCount = _this$state2.searchFoundCount;\n      this.setState({\n        searchFocusIndex: searchFocusIndex !== null ? (searchFocusIndex + 1) % searchFoundCount : 0\n      });\n    };\n\n    this.toggleNodeExpansion = expanded => {\n      this.setState(prevState => ({\n        treeData: toggleExpandedForAll({\n          treeData: prevState.treeData,\n          expanded\n        })\n      }));\n    };\n\n    this.fillNodeData = simulationParameters => {\n      try {\n        var node = mapTree({\n          treeData: this.state.treeData,\n          getNodeKey: ({\n            node: TreeNode,\n            treeIndex: number\n          }) => {\n            return number;\n          },\n          callback: param => {\n            param.node.subtitle = \"test\";\n            console.log(param);\n            return param;\n          },\n          ignoreCollapsed: false\n        });\n      } catch (e) {}\n\n      console.log(node);\n      return node;\n    };\n  }\n\n  render() {\n    const _this$state3 = this.state,\n          treeData = _this$state3.treeData,\n          searchString = _this$state3.searchString,\n          searchFocusIndex = _this$state3.searchFocusIndex,\n          searchFoundCount = _this$state3.searchFoundCount;\n    return React.createElement(\"div\", {\n      className: \"wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"bar-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.toggleNodeExpansion.bind(this, true),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Expand all\"), React.createElement(\"button\", {\n      className: \"collapse\",\n      onClick: this.toggleNodeExpansion.bind(this, false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Collapse all\"), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Search: \"), React.createElement(\"input\", {\n      onChange: this.handleSearchOnChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"previous\",\n      onClick: this.selectPrevMatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Previous\"), React.createElement(\"button\", {\n      className: \"next\",\n      onClick: this.selectNextMatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"Next\"), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, searchFocusIndex, \" / \", searchFoundCount)), React.createElement(\"div\", {\n      className: \"tree-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(SortableTree, {\n      treeData: treeData,\n      onChange: this.handleTreeOnChange,\n      onMoveNode: ({\n        node,\n        treeIndex,\n        path\n      }) => global.console.debug(\"node:\", node, \"treeIndex:\", treeIndex, \"path:\", path),\n      maxDepth: maxDepth,\n      searchQuery: searchString,\n      searchFocusOffset: searchFocusIndex,\n      canDrag: ({\n        node\n      }) => !node.noDragging,\n      canDrop: ({\n        nextParent\n      }) => !nextParent || !nextParent.noChildren,\n      searchFinishCallback: matches => this.setState({\n        searchFoundCount: matches.length,\n        searchFocusIndex: matches.length > 0 ? searchFocusIndex % matches.length : 0\n      }),\n      isVirtualized: true,\n      generateNodeProps: rowInfo => ({\n        buttons: [React.createElement(\"button\", {\n          className: \"btn btn-outline-success\",\n          style: {\n            verticalAlign: \"middle\"\n          },\n          onClick: () => alertNodeInfo(rowInfo),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        }, \"\\u2139\")]\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/alireza/Documents/react/src/App.js"],"names":["React","ReactDOM","SortableTree","addNodeUnderParent","removeNodeAtPath","changeNodeAtPath","getNodeAtPath","toggleExpandedForAll","defaultSearchMethod","map","mapTree","treeData","maxDepth","alertNodeInfo","node","path","treeIndex","objectString","Object","keys","k","join","global","alert","App","Component","state","searchString","searchFocusIndex","searchFoundCount","handleTreeOnChange","setState","console","log","handleSearchOnChange","e","target","value","selectPrevMatch","selectNextMatch","toggleNodeExpansion","expanded","prevState","fillNodeData","simulationParameters","getNodeKey","TreeNode","number","callback","param","subtitle","ignoreCollapsed","render","bind","debug","noDragging","nextParent","noChildren","matches","length","rowInfo","buttons","verticalAlign"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport SortableTree, {  addNodeUnderParent, removeNodeAtPath, changeNodeAtPath, getNodeAtPath, toggleExpandedForAll, defaultSearchMethod, map as mapTree  } from \"react-sortable-tree\";\n\nimport treeData from \"./treeData\";\n\nimport \"./stylestree.css\";\nimport \"react-sortable-tree/style.css\";\n\nconst maxDepth = 5;\n\nconst alertNodeInfo = ({ node, path, treeIndex }) => {\n  const objectString = Object.keys(node)\n    .map(k => (k === \"children\" ? \"children: Array\" : `${k}: '${node[k]}'`))\n    .join(\",\\n   \");\n\n  global.alert(\n    \"Info passed to the button generator:\\n\\n\" +\n      `node: {\\n   ${objectString}\\n},\\n` +\n      `path: [${path.join(\", \")}],\\n` +\n      `treeIndex: ${treeIndex}`\n  );\n};\n\nclass App extends React.Component {\n  state = {\n    searchString: \"\",\n    searchFocusIndex: -1,\n    searchFoundCount: 0,\n    treeData\n  };\n\n  handleTreeOnChange = treeData => {\n    this.setState({ treeData });\n    console.log(this.state.treeData)\n  };\n\n  handleSearchOnChange = e => {\n    this.setState({\n      searchString: e.target.value\n    });\n  };\n\n  selectPrevMatch = () => {\n    const { searchFocusIndex, searchFoundCount } = this.state;\n\n    this.setState({\n      searchFocusIndex:\n        searchFocusIndex !== null\n          ? (searchFoundCount + searchFocusIndex - 1) % searchFoundCount\n          : searchFoundCount - 1\n    });\n  };\n\n  selectNextMatch = () => {\n    const { searchFocusIndex, searchFoundCount } = this.state;\n\n    this.setState({\n      searchFocusIndex:\n        searchFocusIndex !== null\n          ? (searchFocusIndex + 1) % searchFoundCount\n          : 0\n    });\n  };\n\n  toggleNodeExpansion = expanded => {\n    this.setState(prevState => ({\n      treeData: toggleExpandedForAll({ treeData: prevState.treeData, expanded })\n    }));\n  };\n\n  fillNodeData = (simulationParameters) => {\n    try {\n        var node = mapTree({\n            treeData: this.state.treeData,\n            getNodeKey: ({node: TreeNode, treeIndex: number}) => {\n                return number;\n            },\n            callback: (param) => {param.node.subtitle=\"test\"; console.log(param); return param},\n            ignoreCollapsed: false\n        });\n    }\n    catch (e) {\n    }\n    console.log(node);\n    return node;\n}\n\n  render() {\n    const {\n      treeData,\n      searchString,\n      searchFocusIndex,\n      searchFoundCount\n    } = this.state;\n\n    return (\n      <div className=\"wrapper\">\n        <div className=\"bar-wrapper\">\n          <button onClick={this.toggleNodeExpansion.bind(this, true)}>\n            Expand all\n          </button>\n          <button\n            className=\"collapse\"\n            onClick={this.toggleNodeExpansion.bind(this, false)}\n          >\n            Collapse all\n          </button>\n          <label>Search: </label>\n          <input onChange={this.handleSearchOnChange} />\n          <button className=\"previous\" onClick={this.selectPrevMatch}>\n            Previous\n          </button>\n          <button className=\"next\" onClick={this.selectNextMatch}>\n            Next\n          </button>\n          <label>\n            {searchFocusIndex} / {searchFoundCount}\n          </label>\n        </div>\n        <div className=\"tree-wrapper\">\n          <SortableTree\n            treeData={treeData}\n            onChange={this.handleTreeOnChange}\n            onMoveNode={({ node, treeIndex, path }) =>\n              global.console.debug(\n                \"node:\",\n                node,\n                \"treeIndex:\",\n                treeIndex,\n                \"path:\",\n                path\n              )\n            }\n            maxDepth={maxDepth}\n            searchQuery={searchString}\n            searchFocusOffset={searchFocusIndex}\n            canDrag={({ node }) => !node.noDragging}\n            canDrop={({ nextParent }) => !nextParent || !nextParent.noChildren}\n            searchFinishCallback={matches =>\n              this.setState({\n                searchFoundCount: matches.length,\n                searchFocusIndex:\n                  matches.length > 0 ? searchFocusIndex % matches.length : 0\n              })\n            }            \n            isVirtualized={true}\n            generateNodeProps={rowInfo => ({\n              buttons: [\n                <button\n                  className=\"btn btn-outline-success\"\n                  style={{\n                    verticalAlign: \"middle\"\n                  }}\n                  onClick={() => alertNodeInfo(rowInfo)}\n                >\n                  ℹ\n                </button>\n              ]\n            })}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}