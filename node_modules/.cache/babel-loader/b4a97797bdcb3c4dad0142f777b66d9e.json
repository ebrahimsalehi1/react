{"ast":null,"code":"import _slicedToArray from \"/home/alireza/Documents/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/alireza/Documents/react/src/App.js\";\nimport ReactVirtualizedTable from './Components/IrisaComponents/MyGrid';\nimport React, { memo, Component, useState, useEffect, useRef } from 'react';\nimport SortableTree from 'react-sortable-tree';\nimport 'react-sortable-tree/style.css'; // This only needs to be imported once in your app\n\nimport axios from 'axios';\nimport InfiniteSample from './Components/IrisaComponents/InfiniteSample';\nimport Sample from './Components/IrisaComponents/Sample1';\nimport { SelectValidator } from 'react-material-ui-form-validator';\nimport IrisaDateTime from './Components/IrisaComponents/IrisaDateTime';\nimport Moment from 'moment-jalaali'; //import IbxDatePicker2 from './Components/IrisaComponents/Mydate/IbxDatePicker2'\n\nclass Tree extends Component {\n  constructor(props) {\n    super(props);\n\n    this.makeRandomData = () => {\n      const dataBase = [];\n    };\n\n    this.state = {\n      treeData: //[{\"title\":\"ACM\",\"children\":[{\"title\":\"سیستم اقدامات-فرآیند شناسایی و تحلیل اقدام\",\"children\":[]},{\"title\":\"سیستم اقدامات-فرایند ارزیابی\",\"children\":[]},{\"title\":\"فرآیند شناسایی تغییرات\",\"children\":[]},{\"title\":\"فرآیند مدیریت تغییرات پروژه های بهبود\",\"children\":[]},{\"title\":\"فرآیند پایش و اجرای پروژه\",\"children\":[]},{\"title\":\"فرآیند برنامه ریزی و تکمیل اطلاعات پروژه\",\"children\":[]},{\"title\":\"سیستم اقدامات-فرایند پایش و اجرای QF\",\"children\":[]},{\"title\":\"سیستم اقدامات-فرآیند پاداش پروژه\",\"children\":[]},{\"title\":\"فرآیند صورتجلسه\",\"children\":[]},{\"title\":\"سیستم اقدامات-فرآیند تائید پروژه ویژه\",\"children\":[]}]},{\"title\":\"HSE\",\"children\":[{\"title\":\"Acm_Process\",\"children\":[]},{\"title\":\"درخواست تحویل دارو\",\"children\":[]},{\"title\":\"فرایند اورژانس\",\"children\":[]},{\"title\":\"فرایند کميسيون پزشکي\",\"children\":[]},{\"title\":\"HSE_ReferralExam_PROC\",\"children\":[]},{\"title\":\"اندازه گيری جنبه هاي زيست محيطي(حادثه ای)\",\"children\":[]},{\"title\":\"درخواست اندازه گیری عوامل زیان آور شغلی\",\"children\":[]},{\"title\":\"فرایند مدیریت ریسک\",\"children\":[]},{\"title\":\"اندازه گیری عوامل زیان آور شغلی\",\"children\":[]},{\"title\":\"ارزیابی توسط چک لیست ها\",\"children\":[]},{\"title\":\"ارزیابی جنبه های زیست محیطی(عادی و غیر عادی،حادثه ای)\",\"children\":[]},{\"title\":\"فرایند سم پاشی\",\"children\":[]}]},{\"title\":\"LAB\",\"children\":[{\"title\":\"LAB_DonNoneRoutinsSamples_PROC\",\"children\":[]},{\"title\":\"فرآیند آزمون نمونه روانکارها\",\"children\":[]}]}]\n      [//{title:\"A\",children:[{title:\"B\",children:[{title:\"C\",children:[{title:\"D\",children:[]},{title:\"E\",children:[]}]},{title:\"F\",children:[]}]},{title:\"G\",children:[{title:\"H\",children:[]},{title:\"I\",children:[]}]}]}\n      {\n        title: \"A\",\n        id: 1,\n        children: [{\n          title: \"B\",\n          children: [{\n            title: \"C\"\n          }],\n          id: 2\n        }]\n      }]\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: {\n        height: 400\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(SortableTree, {\n      treeData: this.state.treeData,\n      onChange: treeData => this.setState({\n        treeData\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction App(props) {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        dataRows = _useState2[0],\n        setDataRows = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        firstRendered = _useState4[0],\n        setFirstRendered = _useState4[1];\n\n  const num = useRef(0);\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        val = _useState6[0],\n        setVal = _useState6[1]; // useEffect(()=>{\n  // if(firstRendered){\n  //   axios.get('http://localhost:8081/').\n  //   then(res=>{\n  //     if(res.status===200){\n  //       setDataRows(res.data);\n  //       console.log('data',dataRows)\n  //     }\n  //     else{\n  //       alert('error in fetching the data')\n  //     }\n  //   })\n  //setFirstRendered(!firstRendered)\n  // }\n  // console.log('useEffect');\n  // if(firstRendered){\n  // console.log('start of ....');\n  // setFirstRendered(false);\n  // return ()=>{\n  //   setFirstRendered(false);\n  // }\n  // }\n  // })\n  // let x=''\n  // onChange={e=>setVal(e.target.value)}\n  // setTimeout(()=>{setVal(pval=>pval+1 )},5000);\n\n\n  const _useState7 = useState(0),\n        _useState8 = _slicedToArray(_useState7, 2),\n        a = _useState8[0],\n        setA = _useState8[1];\n\n  useEffect(() => {\n    setA(1); // return ()=>{\n    //   setA(1)\n    // }\n  }, []);\n  const persianMonths = [{\n    title: \"January\",\n    id: 1\n  }, {\n    title: \"February\",\n    id: 2\n  }, {\n    title: \"March\",\n    id: 3\n  }, {\n    title: \"April\",\n    id: 4\n  }, {\n    title: \"May\",\n    id: 5\n  }, {\n    title: \"June\",\n    id: 6\n  }, {\n    title: \"July\",\n    id: 7\n  }, {\n    title: \"August\",\n    id: 8\n  }, {\n    title: \"September\",\n    id: 9\n  }, {\n    title: \"October\",\n    id: 10\n  }, {\n    title: \"November\",\n    id: 11\n  }, {\n    title: \"December\",\n    id: 12\n  }];\n  console.log('component is running ...');\n  const locale = \"fa\";\n  const calc = `${Moment(new Date()).toDate()}`;\n\n  function convertPersianDigitsToDigit(valueToConvert) {\n    return String(valueToConvert).replace(/۰/g, \"0\").replace(/۱/g, \"1\").replace(/۲/g, \"2\").replace(/۳/g, \"3\").replace(/۴/g, \"4\").replace(/۵/g, \"5\").replace(/۶/g, \"6\").replace(/۷/g, \"7\").replace(/۸/g, \"8\").replace(/۹/g, \"9\").replace(/a/g, \"A\");\n  }\n\n  const res = convertPersianDigitsToDigit('aaaaa۳۳۳۳aaaa۷۷۷۷۷۷aaaaaa');\n  const e = {\n    year: 1398,\n    month: 11,\n    day: 30\n  };\n  const enteredValue = Moment(`${e.year}/${(Number(e.month) < 10 ? '0' : '') + e.month}/${(Number(e.day) < 10 ? '0' : '') + e.day}`, 'jYYYY/jMM/jDD');\n  const currentDate = new Date(Number(enteredValue.local(\"en\").format('YYYY')), Number(enteredValue.local(\"en\").format('MM')) - 1, Number(enteredValue.local(\"en\").format('DD'))); //new Date(enteredValue.format('YYYY'), enteredValue.format('MM'), enteredValue.format('DD'));\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, \"number : \", ++num.current), React.createElement(Tree, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }));\n}\n\nexport default memo(App);","map":{"version":3,"sources":["/home/alireza/Documents/react/src/App.js"],"names":["ReactVirtualizedTable","React","memo","Component","useState","useEffect","useRef","SortableTree","axios","InfiniteSample","Sample","SelectValidator","IrisaDateTime","Moment","Tree","constructor","props","makeRandomData","dataBase","state","treeData","title","id","children","render","height","setState","App","dataRows","setDataRows","firstRendered","setFirstRendered","num","val","setVal","a","setA","persianMonths","console","log","locale","calc","Date","toDate","convertPersianDigitsToDigit","valueToConvert","String","replace","res","e","year","month","day","enteredValue","Number","currentDate","local","format","current"],"mappings":"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","sourcesContent":["import ReactVirtualizedTable from './Components/IrisaComponents/MyGrid';\n\nimport React, { memo,Component,useState,useEffect,useRef } from 'react';\nimport SortableTree from 'react-sortable-tree';\nimport 'react-sortable-tree/style.css'; // This only needs to be imported once in your app\nimport axios from 'axios';\nimport InfiniteSample from './Components/IrisaComponents/InfiniteSample';\nimport Sample from './Components/IrisaComponents/Sample1';\nimport { SelectValidator } from 'react-material-ui-form-validator';\nimport IrisaDateTime from './Components/IrisaComponents/IrisaDateTime';\nimport Moment from 'moment-jalaali';\n//import IbxDatePicker2 from './Components/IrisaComponents/Mydate/IbxDatePicker2'\n\nclass Tree extends Component {\n  constructor(props) {\n    super(props);\n \n    this.state = {\n      treeData: \n      //[{\"title\":\"ACM\",\"children\":[{\"title\":\"سیستم اقدامات-فرآیند شناسایی و تحلیل اقدام\",\"children\":[]},{\"title\":\"سیستم اقدامات-فرایند ارزیابی\",\"children\":[]},{\"title\":\"فرآیند شناسایی تغییرات\",\"children\":[]},{\"title\":\"فرآیند مدیریت تغییرات پروژه های بهبود\",\"children\":[]},{\"title\":\"فرآیند پایش و اجرای پروژه\",\"children\":[]},{\"title\":\"فرآیند برنامه ریزی و تکمیل اطلاعات پروژه\",\"children\":[]},{\"title\":\"سیستم اقدامات-فرایند پایش و اجرای QF\",\"children\":[]},{\"title\":\"سیستم اقدامات-فرآیند پاداش پروژه\",\"children\":[]},{\"title\":\"فرآیند صورتجلسه\",\"children\":[]},{\"title\":\"سیستم اقدامات-فرآیند تائید پروژه ویژه\",\"children\":[]}]},{\"title\":\"HSE\",\"children\":[{\"title\":\"Acm_Process\",\"children\":[]},{\"title\":\"درخواست تحویل دارو\",\"children\":[]},{\"title\":\"فرایند اورژانس\",\"children\":[]},{\"title\":\"فرایند کميسيون پزشکي\",\"children\":[]},{\"title\":\"HSE_ReferralExam_PROC\",\"children\":[]},{\"title\":\"اندازه گيری جنبه هاي زيست محيطي(حادثه ای)\",\"children\":[]},{\"title\":\"درخواست اندازه گیری عوامل زیان آور شغلی\",\"children\":[]},{\"title\":\"فرایند مدیریت ریسک\",\"children\":[]},{\"title\":\"اندازه گیری عوامل زیان آور شغلی\",\"children\":[]},{\"title\":\"ارزیابی توسط چک لیست ها\",\"children\":[]},{\"title\":\"ارزیابی جنبه های زیست محیطی(عادی و غیر عادی،حادثه ای)\",\"children\":[]},{\"title\":\"فرایند سم پاشی\",\"children\":[]}]},{\"title\":\"LAB\",\"children\":[{\"title\":\"LAB_DonNoneRoutinsSamples_PROC\",\"children\":[]},{\"title\":\"فرآیند آزمون نمونه روانکارها\",\"children\":[]}]}]\n       [\n         //{title:\"A\",children:[{title:\"B\",children:[{title:\"C\",children:[{title:\"D\",children:[]},{title:\"E\",children:[]}]},{title:\"F\",children:[]}]},{title:\"G\",children:[{title:\"H\",children:[]},{title:\"I\",children:[]}]}]}\n         {title:\"A\",id:1,children:[{title:\"B\",children:[{title:\"C\"}],id:2}]}\n       ]\n    };\n  }\n\n  makeRandomData = ()=>{\n    const dataBase=[] \n  }\n \n  render() {\n    return (\n      <div style={{ height: 400 }}>\n        <SortableTree\n          treeData={this.state.treeData}\n          onChange={treeData => this.setState({ treeData })}\n        />\n      </div>\n    );\n  }\n}\n\nfunction App(props){\n\n  const [dataRows,setDataRows] = useState([]);\n  const [firstRendered,setFirstRendered] = useState(true);\n  const num = useRef(0);\n  const [val,setVal] = useState(0)\n\n  // useEffect(()=>{\n    // if(firstRendered){\n    //   axios.get('http://localhost:8081/').\n    //   then(res=>{\n    //     if(res.status===200){\n    //       setDataRows(res.data);\n    //       console.log('data',dataRows)\n    //     }\n    //     else{\n    //       alert('error in fetching the data')\n    //     }\n    //   })\n\n      //setFirstRendered(!firstRendered)\n    // }\n    // console.log('useEffect');\n    // if(firstRendered){\n      // console.log('start of ....');\n      // setFirstRendered(false);\n\n      // return ()=>{\n      //   setFirstRendered(false);\n      // }\n    // }\n  // })\n  // let x=''\n  // onChange={e=>setVal(e.target.value)}\n\n  // setTimeout(()=>{setVal(pval=>pval+1 )},5000);\n\n  const [a,setA] = useState(0);\n  useEffect(()=>{\n    setA(1)\n    // return ()=>{\n    //   setA(1)\n    // }\n  },[]);\n\n  const persianMonths = [\n    {title:\"January\",id:1},\n    {title:\"February\",id:2},\n    {title:\"March\",id:3},\n    {title:\"April\",id:4},\n    {title:\"May\",id:5},\n    {title:\"June\",id:6},\n    {title:\"July\",id:7},\n    {title:\"August\",id:8},\n    {title:\"September\",id:9},\n    {title:\"October\",id:10},\n    {title:\"November\",id:11},\n    {title:\"December\",id:12}\n]\n  console.log('component is running ...');\n  const locale=\"fa\"\n  const calc = `${Moment(new Date()).toDate()}`\n  function convertPersianDigitsToDigit(valueToConvert){\n    return String(valueToConvert)\n        .replace(/۰/g,\"0\")\n        .replace(/۱/g,\"1\")\n        .replace(/۲/g,\"2\")\n        .replace(/۳/g,\"3\")\n        .replace(/۴/g,\"4\")\n        .replace(/۵/g,\"5\")\n        .replace(/۶/g,\"6\")\n        .replace(/۷/g,\"7\")\n        .replace(/۸/g,\"8\")\n        .replace(/۹/g,\"9\")\n        .replace(/a/g,\"A\")\n  }\n  const res=convertPersianDigitsToDigit('aaaaa۳۳۳۳aaaa۷۷۷۷۷۷aaaaaa')\n  const e = {year:1398,month:11,day:30}\n\n  const enteredValue = Moment(`${e.year}/${(Number(e.month)<10 ? '0':'')+e.month}/${(Number(e.day)<10 ? '0':'')+e.day}`,'jYYYY/jMM/jDD')\n  const currentDate = new Date(Number(enteredValue.local(\"en\").format('YYYY')), Number(enteredValue.local(\"en\").format('MM'))-1, Number(enteredValue.local(\"en\").format('DD')));\n  //new Date(enteredValue.format('YYYY'), enteredValue.format('MM'), enteredValue.format('DD'));\n  \n    return (\n        <div>\n          <label>number : {++num.current}</label>\n\n          {/* <button>{`${String(currentDate)}`}</button>\n          <IbxDatePicker2\n          locale={\"fa\"}\n          value={a}\n          handleDateChange={setA}\n          /> */}\n\n          {/* <input type='text' value={val}  /> */}\n            {/* <ReactVirtualizedTable \n            rows={dataRows}\n            columns={\n              [\n                {\n                  width: 200,\n                  flexGrow: 1.0,\n                  label: 'id',\n                  dataKey: 'id',\n                },\n                {\n                  width: 120,\n                  label: 'first name',\n                  dataKey: 'firstName',\n                  numeric: true,\n                },\n                {\n                  width: 120,\n                  label: 'last name',\n                  dataKey: 'lastName',\n                  numeric: true,\n                },\n                {\n                  width: 120,\n                  label: 'salary',\n                  dataKey: 'salary',\n                  numeric: true,\n                },\n              ]\n            }\n            /> */}\n\n            <Tree />\n\n            {/* <InfiniteSample /> */}\n{/* \n            <Sample /> */}\n            {/* <IrisaDateTime /> */}\n        </div>\n    )\n}\n\nexport default memo(App)\n"]},"metadata":{},"sourceType":"module"}