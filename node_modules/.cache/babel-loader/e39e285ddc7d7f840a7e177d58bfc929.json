{"ast":null,"code":"import _slicedToArray from \"/home/alireza/Documents/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/home/alireza/Documents/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/alireza/Documents/react/src/Components/IrisaComponents/TextField/IrisaTextField.js\";\nimport React, { useState, useEffect } from 'react';\nimport { TextField, withStyles } from '@material-ui/core';\nimport { createStyles } from '@material-ui/core/styles';\nimport validation from '../Utils/Validation';\nimport NumberFormat from 'react-number-format';\nimport PropTypes from 'prop-types';\nimport MaskedInput from 'react-text-mask';\nimport { useStyles } from './style';\nimport InputAdornment from \"@material-ui/core/es/InputAdornment\";\nIrisaTextField.defaultProps = {\n  validationType: [],\n  mask: null,\n  format: null,\n  type: 'general',\n  variant: 'outlined' //rules: null,\n  //onChange: null,\n  //onBlur: null,\n\n};\n\nfunction IrisaTextField(props) {\n  //const {rules,classes,fullWidth,onCustomValidation,onChange,onBlur} = props\n  const classes = props.classes,\n        useLov = props.useLov,\n        label = props.label,\n        name = props.name,\n        disabled = props.disabled,\n        required = props.required,\n        validationType = props.validationType,\n        validationTypeParam = props.validationTypeParam,\n        adornment = props.adornment,\n        icon = props.icon,\n        select = props.select,\n        InputProps = props.InputProps,\n        SelectProps = props.SelectProps,\n        fullWidth = props.fullWidth,\n        rows = props.rows,\n        value = props.value,\n        multiline = props.multiline,\n        variant = props.variant,\n        className = props.className,\n        other = _objectWithoutProperties(props, [\"classes\", \"useLov\", \"label\", \"name\", \"disabled\", \"required\", \"validationType\", \"validationTypeParam\", \"adornment\", \"icon\", \"select\", \"InputProps\", \"SelectProps\", \"fullWidth\", \"rows\", \"value\", \"multiline\", \"variant\", \"className\"]);\n\n  const rules = props.rules,\n        mask = props.mask,\n        inputRef = props.inputRef,\n        placeholderChar = props.placeholderChar,\n        onCustomValidation = props.onCustomValidation,\n        format = props.format,\n        prefix = props.prefix,\n        type = props.type,\n        testId = props.testId,\n        onChange = props.onChange,\n        onBlur = props.onBlur;\n  let grules = rules;\n\n  if (grules === undefined && validationType !== undefined) {\n    grules = {\n      trigger: 'blur',\n      validationType: validationType,\n      validationParams: validationTypeParam,\n      onCustomValidation: true\n    };\n  }\n\n  let resultValidation = undefined;\n\n  if (grules !== undefined) {\n    resultValidation = validation(props.value, grules.validationType, grules.validationParams);\n  }\n\n  const _useState = useState(grules === undefined ? true : resultValidation.isValid),\n        _useState2 = _slicedToArray(_useState, 2),\n        allValidation = _useState2[0],\n        setAllValidation = _useState2[1];\n\n  function onChangeHandler(event) {\n    if (grules.trigger === 'change' && onChange !== undefined) onChange(event);\n    if (grules.trigger === 'blur' && onBlur !== undefined) onBlur(event);\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n\n    if (grules !== undefined) {\n      resultValidation = validation(value, grules.validationType, grules.validationParams);\n      setAllValidation(resultValidation.isValid && grules.onCustomValidation);\n    } //console.log('on changed',resultValidation)\n\n  }\n\n  useEffect(() => {\n    console.log('refresh occured ....');\n  }, allValidation);\n  return React.createElement(React.Fragment, null, type === 'general' && React.createElement(TextField, Object.assign({\n    variant: variant //className={classes.textField}\n    ,\n    className: fullWidth ? classes.marginFullwidth : classes.margin2,\n    fullWidth: fullWidth,\n    name: name,\n    value: value,\n    rows: rows,\n    label: label !== undefined ? label : ' ' //set required text , if field is require\n    ,\n    multiline: multiline ? true : false,\n    select: select //className={fullWidth ? classes.marginFullwidth : classes.margin2}\n    ,\n    onChange: grules !== undefined && grules.trigger === 'change' ? onChangeHandler : null,\n    onBlur: grules !== undefined && grules.trigger === 'blur' ? onChangeHandler : null,\n    error: !allValidation,\n    helperText: !allValidation && resultValidation.messages,\n    inputProps: {\n      'data-testid': testId\n    },\n    InputProps: adornment ? {\n      endAdornment: React.createElement(InputAdornment, {\n        position: \"end\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, icon)\n    } : select && InputProps ? {\n      endAdornment: InputProps\n    } : null //required={validationType && validationType.includes(\"required\")}\n\n  }, other, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  })), type === 'mask' && React.createElement(MaskedInput, {\n    variant: variant,\n    className: fullWidth ? classes.marginFullwidth : classes.margin2,\n    fullWidth: fullWidth,\n    name: name,\n    value: value,\n    ref: inputRef,\n    mask: mask,\n    placeholderChar: placeholderChar,\n    showMask: true,\n    onChange: grules !== undefined && grules.trigger === 'change' ? onChangeHandler : null,\n    onBlur: grules !== undefined && grules.trigger === 'blur' ? onChangeHandler : null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }), type === 'number' && React.createElement(NumberFormat, {\n    variant: variant,\n    className: fullWidth ? classes.marginFullwidth : classes.margin2,\n    fullWidth: fullWidth,\n    name: name,\n    value: value,\n    getInputRef: inputRef,\n    format: format,\n    thousandSeparator: true,\n    prefix: prefix,\n    onValueChange: values => {\n      console.log(values.target);\n    } //onChange={rules!==undefined && rules.trigger==='change' ?  onChangeHandler:null }\n    //onBlur={rules!==undefined && rules.trigger==='blur' ? onChangeHandler:null}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }));\n}\n\nIrisaTextField.propTypes = {\n  testId: PropTypes.string,\n  rules: PropTypes.object,\n  onChange: PropTypes.func,\n  onBlur: PropTypes.func,\n  type: PropTypes.oneOf(['general', 'mask', 'number']),\n  classes: PropTypes.object.isRequired,\n  validationType: PropTypes.oneOf(['afterDate', 'alpha', 'alphaFa', 'alphanumeric', 'alphanumericFa', 'email', 'equals', 'lowercase', 'matches', 'mobilePhone', 'number', 'numberFloat', 'numberInt', 'required', 'uppercase']),\n  validationTypeParam: PropTypes.array,\n  label: PropTypes.string,\n  name: PropTypes.string,\n  adornment: PropTypes.bool,\n  icon: PropTypes.object,\n  value: PropTypes.string,\n  ///onChange: PropTypes.func,\n  fullWidth: PropTypes.bool,\n  rows: PropTypes.string,\n  multiline: PropTypes.bool,\n  useLov: PropTypes.bool\n};\nexport default withStyles(useStyles)(IrisaTextField);","map":{"version":3,"sources":["/home/alireza/Documents/react/src/Components/IrisaComponents/TextField/IrisaTextField.js"],"names":["React","useState","useEffect","TextField","withStyles","createStyles","validation","NumberFormat","PropTypes","MaskedInput","useStyles","InputAdornment","IrisaTextField","defaultProps","validationType","mask","format","type","variant","props","classes","useLov","label","name","disabled","required","validationTypeParam","adornment","icon","select","InputProps","SelectProps","fullWidth","rows","value","multiline","className","other","rules","inputRef","placeholderChar","onCustomValidation","prefix","testId","onChange","onBlur","grules","undefined","trigger","validationParams","resultValidation","isValid","allValidation","setAllValidation","onChangeHandler","event","target","console","log","marginFullwidth","margin2","messages","endAdornment","values","propTypes","string","object","func","oneOf","isRequired","array","bool"],"mappings":"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","sourcesContent":["\nimport React,{useState,useEffect} from 'react'\nimport {TextField,withStyles} from '@material-ui/core'\nimport {createStyles} from '@material-ui/core/styles'\nimport validation from '../Utils/Validation'\nimport NumberFormat from 'react-number-format'\nimport PropTypes from 'prop-types'\nimport MaskedInput from 'react-text-mask'\nimport {useStyles} from './style'\nimport InputAdornment from \"@material-ui/core/es/InputAdornment\";\n\nIrisaTextField.defaultProps = {\n    validationType: [],\n    mask: null,\n    format:null,\n    type:'general',\n    variant:'outlined'\n    //rules: null,\n    //onChange: null,\n    //onBlur: null,\n}\n\nfunction IrisaTextField(props){\n\n    //const {rules,classes,fullWidth,onCustomValidation,onChange,onBlur} = props\n\n    const {\n        classes, useLov, label, name, disabled, required,\n        validationType, validationTypeParam, adornment, icon,\n        select, InputProps, SelectProps,\n        fullWidth, rows, value, multiline, variant,\n        className,\n        ...other\n    } = props;\n\n    const { rules, mask, inputRef, placeholderChar, onCustomValidation,\n        format,prefix,type,testId,\n        onChange, onBlur } =props\n\n    let grules = rules\n    if(grules===undefined && validationType!==undefined )  {\n        grules ={\n            trigger: 'blur' ,\n            validationType:validationType,\n            validationParams:validationTypeParam,\n            onCustomValidation:true\n        }\n    }\n\n    let resultValidation = undefined\n    if(grules!==undefined){\n        resultValidation = validation(props.value,grules.validationType,grules.validationParams)\n    }\n\n    const [allValidation,setAllValidation] = useState(grules===undefined ? true:resultValidation.isValid)\n\n    function onChangeHandler(event){\n        if(grules.trigger==='change' && onChange!==undefined )\n            onChange(event);\n\n        if(grules.trigger==='blur' && onBlur!==undefined )\n            onBlur(event);\n\n        const {name,value} =event.target\n        if(grules!==undefined){\n            resultValidation = validation(value,grules.validationType,grules.validationParams)\n            setAllValidation(resultValidation.isValid && grules.onCustomValidation)\n        }\n\n        //console.log('on changed',resultValidation)\n    }\n\n    useEffect(()=>{\n        console.log('refresh occured ....')\n    },allValidation)\n\n    return (<>\n            { type==='general' &&\n            <TextField\n                variant={variant}\n                //className={classes.textField}\n                className={fullWidth ? classes.marginFullwidth : classes.margin2}\n                fullWidth={fullWidth}\n                name={name}\n                value={value}\n                rows={rows}\n                label={label !== undefined ? label : ' '} //set required text , if field is require\n                multiline={multiline ? true : false}\n                select={select}\n\n                //className={fullWidth ? classes.marginFullwidth : classes.margin2}\n                onChange={grules!==undefined && grules.trigger==='change' ?  onChangeHandler:null }\n                onBlur={grules!==undefined && grules.trigger==='blur' ? onChangeHandler:null}\n                error={!allValidation}\n                helperText={!allValidation && resultValidation.messages}\n                inputProps ={{'data-testid':testId}}\n\n                InputProps={adornment ? {\n                    endAdornment: (\n                        <InputAdornment position=\"end\">\n                            {icon}\n                        </InputAdornment>\n                    )\n                } : (select && InputProps ? {\n                    endAdornment: (InputProps)\n                } : null)}\n                //required={validationType && validationType.includes(\"required\")}\n                {...other}\n\n            />\n            }\n            {\n                type==='mask' &&\n                <MaskedInput\n                    variant={variant}\n                    className={fullWidth ? classes.marginFullwidth : classes.margin2}\n                    fullWidth={fullWidth}\n                    name={name}\n                    value={value}\n                    ref={inputRef}\n                    mask={mask}\n                    placeholderChar={placeholderChar}\n                    showMask\n                    onChange={grules!==undefined && grules.trigger==='change' ?  onChangeHandler:null }\n                    onBlur={grules!==undefined && grules.trigger==='blur' ? onChangeHandler:null}\n                />\n            }\n            {\n                type==='number' &&\n                <NumberFormat\n                    variant={variant}\n                    className={fullWidth ? classes.marginFullwidth : classes.margin2}\n                    fullWidth={fullWidth}\n                    name={name}\n                    value={value}\n                    getInputRef={inputRef}\n                    format={format}\n                    thousandSeparator\n                    prefix={prefix}\n                    onValueChange={values => {\n                        console.log(values.target)\n                    }}\n                    //onChange={rules!==undefined && rules.trigger==='change' ?  onChangeHandler:null }\n                    //onBlur={rules!==undefined && rules.trigger==='blur' ? onChangeHandler:null}\n                />\n            }\n        </>\n    )\n}\n\n\nIrisaTextField.propTypes = {\n    testId:PropTypes.string,\n\n    rules: PropTypes.object,\n    onChange: PropTypes.func,\n    onBlur: PropTypes.func,\n    type: PropTypes.oneOf(['general','mask','number']),\n\n    classes: PropTypes.object.isRequired,\n    validationType: PropTypes.oneOf(['afterDate', 'alpha', 'alphaFa',\n        'alphanumeric', 'alphanumericFa', 'email', 'equals', 'lowercase',\n        'matches', 'mobilePhone', 'number', 'numberFloat', 'numberInt', 'required', 'uppercase']),\n    validationTypeParam: PropTypes.array,\n    label: PropTypes.string,\n    name: PropTypes.string,\n    adornment: PropTypes.bool,\n    icon: PropTypes.object,\n    value: PropTypes.string,\n    ///onChange: PropTypes.func,\n    fullWidth: PropTypes.bool,\n    rows: PropTypes.string,\n    multiline: PropTypes.bool,\n    useLov: PropTypes.bool\n}\n\nexport default withStyles(useStyles)(IrisaTextField)"]},"metadata":{},"sourceType":"module"}