{"ast":null,"code":"var _jsxFileName = \"/home/alireza/Documents/react/src/treeData.js\";\nimport React from \"react\";\nconst maxDepth = 5;\n\nconst renderDepthTitle = ({\n  path\n}) => `Depth: ${path.length}`;\n\nconst treeData = [{\n  title: \"`title`\",\n  subtitle: \"`subtitle`\",\n  expanded: true,\n  children: [{\n    title: \"Child Node\",\n    subtitle: \"Defined in `children` array belonging to parent\"\n  }, {\n    title: \"Nested structure is rendered virtually\",\n    subtitle: React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, \"The tree uses\\xA0\", React.createElement(\"a\", {\n      href: \"https://github.com/bvaughn/react-virtualized\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, \"react-virtualized\"), \"\\xA0and the relationship lines are more of a visual trick.\")\n  }]\n}, {\n  expanded: true,\n  title: \"Any node can be the parent or child of any other node\",\n  children: [{\n    expanded: true,\n    title: \"Chicken\",\n    children: [{\n      title: \"Egg\"\n    }]\n  }]\n}, {\n  title: \"Button(s) can be added to the node\",\n  subtitle: \"Node info is passed when generating so you can use it in your onClick handler\"\n}, {\n  title: \"Show node children by setting `expanded`\",\n  subtitle: ({\n    node\n  }) => `expanded: ${node.expanded ? \"true\" : \"false\"}`,\n  children: [{\n    title: \"Bruce\",\n    subtitle: ({\n      node\n    }) => `expanded: ${node.expanded ? \"true\" : \"false\"}`,\n    children: [{\n      title: \"Bruce Jr.\"\n    }, {\n      title: \"Brucette\"\n    }]\n  }]\n}, {\n  title: \"Advanced\",\n  subtitle: \"Settings, behavior, etc.\",\n  children: [{\n    title: React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        backgroundColor: \"gray\",\n        display: \"inline-block\",\n        borderRadius: 10,\n        color: \"#FFF\",\n        padding: \"0 5px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"Any Component\"), \"\\xA0can be used for `title`\")\n  }, {\n    expanded: true,\n    title: \"Limit nesting with `maxDepth`\",\n    subtitle: `It's set to ${maxDepth} for this example`,\n    children: [{\n      expanded: true,\n      title: renderDepthTitle,\n      children: [{\n        expanded: true,\n        title: renderDepthTitle,\n        children: [{\n          title: renderDepthTitle\n        }, {\n          title: ({\n            path\n          }) => path.length >= maxDepth ? \"This cannot be dragged deeper\" : \"This can be dragged deeper\"\n        }]\n      }]\n    }]\n  }, {\n    title: \"Disable dragging on a per-node basis with the `canDrag` prop\",\n    subtitle: \"Or set it to false to disable all dragging.\",\n    noDragging: true\n  }, {\n    title: \"You cannot give this children\",\n    subtitle: \"Dropping is prevented via the `canDrop` API using `nextParent`\",\n    noChildren: true\n  }, {\n    title: \"When node contents are really long, it will cause a horizontal scrollbar\" + \" to appear. Deeply nested elements will also trigger the scrollbar.\"\n  }]\n}];\nexport default treeData;","map":{"version":3,"sources":["/home/alireza/Documents/react/src/treeData.js"],"names":["React","maxDepth","renderDepthTitle","path","length","treeData","title","subtitle","expanded","children","node","backgroundColor","display","borderRadius","color","padding","noDragging","noChildren"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nconst maxDepth = 5;\n\nconst renderDepthTitle = ({ path }) => `Depth: ${path.length}`;\n\nconst treeData = [\n  {\n    title: \"`title`\",\n    subtitle: \"`subtitle`\",\n    expanded: true,\n    children: [\n      {\n        title: \"Child Node\",\n        subtitle: \"Defined in `children` array belonging to parent\"\n      },\n      {\n        title: \"Nested structure is rendered virtually\",\n        subtitle: (\n          <span>\n            The tree uses&nbsp;\n            <a href=\"https://github.com/bvaughn/react-virtualized\">\n              react-virtualized\n            </a>\n            &nbsp;and the relationship lines are more of a visual trick.\n          </span>\n        )\n      }\n    ]\n  },\n  {\n    expanded: true,\n    title: \"Any node can be the parent or child of any other node\",\n    children: [\n      {\n        expanded: true,\n        title: \"Chicken\",\n        children: [{ title: \"Egg\" }]\n      }\n    ]\n  },\n  {\n    title: \"Button(s) can be added to the node\",\n    subtitle:\n      \"Node info is passed when generating so you can use it in your onClick handler\"\n  },\n  {\n    title: \"Show node children by setting `expanded`\",\n    subtitle: ({ node }) => `expanded: ${node.expanded ? \"true\" : \"false\"}`,\n    children: [\n      {\n        title: \"Bruce\",\n        subtitle: ({ node }) => `expanded: ${node.expanded ? \"true\" : \"false\"}`,\n        children: [{ title: \"Bruce Jr.\" }, { title: \"Brucette\" }]\n      }\n    ]\n  },\n  {\n    title: \"Advanced\",\n    subtitle: \"Settings, behavior, etc.\",\n    children: [\n      {\n        title: (\n          <div>\n            <div\n              style={{\n                backgroundColor: \"gray\",\n                display: \"inline-block\",\n                borderRadius: 10,\n                color: \"#FFF\",\n                padding: \"0 5px\"\n              }}\n            >\n              Any Component\n            </div>\n            &nbsp;can be used for `title`\n          </div>\n        )\n      },\n      {\n        expanded: true,\n        title: \"Limit nesting with `maxDepth`\",\n        subtitle: `It's set to ${maxDepth} for this example`,\n        children: [\n          {\n            expanded: true,\n            title: renderDepthTitle,\n            children: [\n              {\n                expanded: true,\n                title: renderDepthTitle,\n                children: [\n                  { title: renderDepthTitle },\n                  {\n                    title: ({ path }) =>\n                      path.length >= maxDepth\n                        ? \"This cannot be dragged deeper\"\n                        : \"This can be dragged deeper\"\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      },\n      {\n        title: \"Disable dragging on a per-node basis with the `canDrag` prop\",\n        subtitle: \"Or set it to false to disable all dragging.\",\n        noDragging: true\n      },\n      {\n        title: \"You cannot give this children\",\n        subtitle:\n          \"Dropping is prevented via the `canDrop` API using `nextParent`\",\n        noChildren: true\n      },\n      {\n        title:\n          \"When node contents are really long, it will cause a horizontal scrollbar\" +\n          \" to appear. Deeply nested elements will also trigger the scrollbar.\"\n      }\n    ]\n  }\n];\n\nexport default treeData;\n"]},"metadata":{},"sourceType":"module"}