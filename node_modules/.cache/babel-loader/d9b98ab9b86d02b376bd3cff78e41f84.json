{"ast":null,"code":"import _objectWithoutProperties from \"/home/alireza/Documents/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"/home/alireza/Documents/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/alireza/Documents/react/src/Components/IrisaComponents/Mydate/IbxTextField.js\";\nimport React, { Component } from 'react';\nimport { TextField, withStyles } from '@material-ui/core';\nimport { styles } from '../../assets/jss/style';\nimport moment from \"jalali-moment\";\nimport * as PropTypes from 'prop-types';\nimport validator from \"validator\";\nimport InputAdornment from \"@material-ui/core/InputAdornment/InputAdornment\";\n\nclass IbxTextField extends Component {\n  constructor(props) {\n    super(props);\n\n    this.validity = async (value, validationType, validationTypeParam) => {\n      const errorCallback = this.props.errorCallback;\n      await this.setState({\n        valid: true\n      });\n\n      for (let i = 0; i < validationType.length; i++) {\n        let isValid = true;\n        let msg = \"\";\n\n        switch (validationType[i]) {\n          case \"afterDate\":\n            {\n              let targetDate = validationTypeParam ? parseInt(validationTypeParam[i]) : new Date().getTime();\n              let displayDate = moment(new Date(targetDate)).locale('fa').format('YYYY/MM/DD HH:mm:ss');\n              isValid = (!isNaN(value) ? parseInt(value) : value) >= targetDate;\n              msg = \"زمان حداقل: \" + displayDate;\n              break;\n            }\n\n          case \"alpha\":\n            {\n              isValid = await validator.isAlpha(value, 'en-US');\n              msg = \"کاراکترهای مجاز: حروف لاتین\";\n              break;\n            }\n\n          case \"alphaFa\":\n            {\n              let regEx = /^[آابپتثجچحخدذرزژسشصضطظعغفقکگلمنوهیي]+[آابپتثجچحخدذرزژسشصضطظعغفقکگلمنوهیي ]*$/;\n              isValid = await validator.matches(validator.rtrim(value), regEx);\n              msg = \"کاراکترهای مجاز: حروف فارسی و فاصله\";\n              break;\n            }\n\n          case \"alphanumeric\":\n            {\n              isValid = await validator.isAlphanumeric(value, 'en-US');\n              msg = \"کاراکترهای مجاز: حروف لاتین و عدد\";\n              break;\n            }\n\n          case \"alphanumericFa\":\n            {\n              let regEx = /^[٠١٢٣٤٥٦٧٨٩0-9آابپتثجچحخدذرزژسشصضطظعغفقکگلمنوهیي]+[٠١٢٣٤٥٦٧٨٩0-9آابپتثجچحخدذرزژسشصضطظعغفقکگلمنوهیي ]*$/;\n              isValid = await validator.matches(validator.rtrim(value), regEx);\n              msg = \"کاراکترهای مجاز: حروف فارسی، فاصله و عدد\";\n              break;\n            }\n\n          case \"equals\":\n            {\n              if (validationTypeParam && validationTypeParam[i]) {\n                isValid = await validator.equals(value, validationTypeParam[i]);\n                msg = \"مقادیر مساوی نمی باشند\";\n              }\n\n              break;\n            }\n\n          case \"email\":\n            {\n              isValid = await validator.isEmail(value);\n              msg = \"ایمیل معتبر نمی باشد\";\n              break;\n            }\n\n          case \"lowercase\":\n            {\n              isValid = await validator.isLowercase(value);\n              msg = \"کاراکترهای مجاز: حروف لاتین کوچک\";\n              break;\n            }\n\n          case \"matches\":\n            {\n              if (validationTypeParam && validationTypeParam[i]) {\n                isValid = await validator.matches(value, validationTypeParam[i]);\n                msg = \"ورودی با عبارت منطقی مطابقت ندارد\";\n              }\n\n              break;\n            }\n\n          case \"mobilePhone\":\n            {\n              isValid = await validator.isMobilePhone(value, 'fa-IR');\n              msg = \"لطفا شماره موبایل وارد نمایید\";\n              break;\n            }\n\n          case \"number\":\n            {\n              isValid = await validator.isNumeric(value);\n              msg = \"لطفا عدد وارد نمایید\";\n              break;\n            }\n\n          case \"numberFloat\":\n            {\n              if (validationTypeParam && validationTypeParam[i]) {\n                isValid = await validator.isFloat(value, validationTypeParam[i]);\n                msg = `لطفا عدد اعشاری وارد نمایید` + `\\n`;\n                msg += validationTypeParam[i].min ? `بزرگ تر یا مساوی: ` + `${validationTypeParam[i].min}` + `\\n` : ``;\n                msg += validationTypeParam[i].max ? `کوچک تر یا مساوی: ` + `${validationTypeParam[i].max}` + `\\n` : ``;\n                msg += validationTypeParam[i].gt ? `بزرگ تر از: ` + `${validationTypeParam[i].gt}` + `\\n` : ``;\n                msg += validationTypeParam[i].lt ? `کوچک تر از: ` + `${validationTypeParam[i].lt}` + `\\n` : ``;\n              } else {\n                isValid = await validator.isFloat(value);\n                msg = `لطفا عدد اعشاری وارد نمایید` + `\\n`;\n              }\n\n              break;\n            }\n\n          case \"numberInt\":\n            {\n              if (validationTypeParam && validationTypeParam[i]) {\n                isValid = await validator.isInt(value, validationTypeParam[i]);\n                msg = `لطفا عدد صحیح وارد نمایید` + `\\n`;\n                msg += validationTypeParam[i].min ? `بزرگ تر یا مساوی: ` + `${validationTypeParam[i].min}` + `\\n` : ``;\n                msg += validationTypeParam[i].max ? `کوچک تر یا مساوی: ` + `${validationTypeParam[i].max}` + `\\n` : ``;\n                msg += validationTypeParam[i].gt ? `بزرگ تر از: ` + `${validationTypeParam[i].gt}` + `\\n` : ``;\n                msg += validationTypeParam[i].lt ? `کوچک تر از: ` + `${validationTypeParam[i].lt}` + `\\n` : ``;\n              } else {\n                isValid = await validator.isInt(value);\n                msg = `لطفا عدد صحیح وارد نمایید` + `\\n`;\n              }\n\n              break;\n            }\n\n          case \"required\":\n            {\n              isValid = await !validator.isEmpty(value);\n              msg = \"مقدار فیلد اجباری می باشد\";\n              break;\n            }\n\n          case \"uppercase\":\n            {\n              isValid = await validator.isUppercase(value);\n              msg = \"کاراکترهای مجاز: حروف لاتین بزرگ\";\n              break;\n            }\n        } //switch end\n\n\n        await this.setErrorMsg(validationType[i], value, isValid, msg);\n        let valid = [];\n        valid[this.props.name] = this.state.valid;\n\n        if (validationType[i] != \"required\" && value != \"\" && !isValid) {\n          await this.setState({\n            valid: false\n          }, () => {\n            valid[this.props.name] = this.state.valid;\n            if (errorCallback) errorCallback(valid);\n          });\n        } else if (validationType[i] == \"required\" && value == \"\") {\n          await this.setState({\n            valid: false\n          }, () => {\n            valid[this.props.name] = this.state.valid;\n            if (errorCallback) errorCallback(valid);\n          });\n        } else {\n          if (errorCallback) errorCallback(valid);\n        }\n      } //for end\n\n\n      await this.printErrorsMsgs(this.state.errors, validationType).toString();\n    };\n\n    this.printErrorsMsgs = async (errors, validationType) => {\n      let str = '';\n      validationType.filter(validation => {\n        if (errors[validation].msg && errors[validation].msg.length > 0) {\n          str += errors[validation].msg + `\\n`;\n        }\n      });\n      await this.setState({\n        helperText: str\n      });\n    };\n\n    this.state = {\n      errors: {},\n      helperText: \"\",\n      value: \"\",\n      valid: !(props.validationType && props.validationType.includes(\"required\") && !props.disabled)\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.useLov === true && typeof nextProps.value !== 'undefined' && nextProps.value !== '' && nextProps.value !== null && prevState.value !== nextProps.value) return {\n      valid: true\n    };\n    return null;\n  }\n\n  componentDidMount() {\n    this.setState({\n      value: this.props.value,\n      // hiding helper text in loading data\n      valid: !(this.props.validationType && this.props.validationType.includes(\"required\") && !this.props.value && !this.props.disabled)\n    });\n  }\n\n  async setErrorMsg(validationType, value, isValid, msg) {\n    await this.setState({\n      errors: _objectSpread({}, this.state.errors, {\n        [validationType]: {\n          msg: value && !isValid || validationType == \"required\" && !isValid ? msg : \"\"\n        }\n      })\n    });\n  }\n\n  render() {\n    const _this$props = this.props,\n          classes = _this$props.classes,\n          useLov = _this$props.useLov,\n          label = _this$props.label,\n          name = _this$props.name,\n          disabled = _this$props.disabled,\n          validationType = _this$props.validationType,\n          validationTypeParam = _this$props.validationTypeParam,\n          adornment = _this$props.adornment,\n          icon = _this$props.icon,\n          select = _this$props.select,\n          InputProps = _this$props.InputProps,\n          SelectProps = _this$props.SelectProps,\n          fullWidth = _this$props.fullWidth,\n          rows = _this$props.rows,\n          value = _this$props.value,\n          multiline = _this$props.multiline,\n          manualError = _this$props.manualError,\n          other = _objectWithoutProperties(_this$props, [\"classes\", \"useLov\", \"label\", \"name\", \"disabled\", \"validationType\", \"validationTypeParam\", \"adornment\", \"icon\", \"select\", \"InputProps\", \"SelectProps\", \"fullWidth\", \"rows\", \"value\", \"multiline\", \"manualError\"]);\n\n    const _this$state = this.state,\n          helperText = _this$state.helperText,\n          valid = _this$state.valid;\n    return React.createElement(TextField //select mode; begin\n    , Object.assign({\n      select: select,\n      SelectProps: SelectProps //select mode; end\n      ,\n      disabled: useLov ? true : disabled,\n      error: manualError || !valid,\n      helperText: !valid ? React.createElement(\"span\", {\n        id: `${name}-helper-text`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, helperText) : undefined,\n      onBlur: e => {\n        if (validationType) {\n          this.validity(e.target ? e.target.value : e, validationType ? validationType : false, validationTypeParam ? validationTypeParam : false);\n        }\n      },\n      InputProps: adornment ? {\n        endAdornment: React.createElement(InputAdornment, {\n          position: \"end\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 257\n          },\n          __self: this\n        }, icon)\n      } : select && InputProps ? {\n        endAdornment: InputProps\n      } : null,\n      required: validationType && validationType.includes(\"required\")\n    }, other, {\n      name: name,\n      className: fullWidth ? classes.marginFullwidth : classes.margin2,\n      fullWidth: fullWidth,\n      rows: rows,\n      label: label !== undefined ? label : ' ' //set required text , if field is require\n      ,\n      value: value == null ? '' : value,\n      onChange: this.props.onChange,\n      multiline: multiline ? true : false,\n      variant: \"outlined\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }));\n  }\n\n}\n\nIbxTextField.defaultProps = {\n  validationType: []\n};\nIbxTextField.propTypes = {\n  classes: PropTypes.object,\n  validationType: PropTypes.arrayOf(PropTypes.oneOf(['afterDate', 'alpha', 'alphaFa', 'alphanumeric', 'alphanumericFa', 'email', 'equals', 'lowercase', 'matches', 'mobilePhone', 'number', 'numberFloat', 'numberInt', 'required', 'uppercase'])),\n  validationTypeParam: PropTypes.array,\n  label: PropTypes.string,\n  name: PropTypes.string,\n  adornment: PropTypes.bool,\n  icon: PropTypes.object,\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  fullWidth: PropTypes.bool,\n  rows: PropTypes.string,\n  multiline: PropTypes.bool,\n  useLov: PropTypes.bool,\n  manualError: PropTypes.bool\n};\nexport default withStyles(styles)(IbxTextField);","map":{"version":3,"sources":["/home/alireza/Documents/react/src/Components/IrisaComponents/Mydate/IbxTextField.js"],"names":["React","Component","TextField","withStyles","styles","moment","PropTypes","validator","InputAdornment","IbxTextField","constructor","props","validity","value","validationType","validationTypeParam","errorCallback","setState","valid","i","length","isValid","msg","targetDate","parseInt","Date","getTime","displayDate","locale","format","isNaN","isAlpha","regEx","matches","rtrim","isAlphanumeric","equals","isEmail","isLowercase","isMobilePhone","isNumeric","isFloat","min","max","gt","lt","isInt","isEmpty","isUppercase","setErrorMsg","name","state","printErrorsMsgs","errors","toString","str","filter","validation","helperText","includes","disabled","getDerivedStateFromProps","nextProps","prevState","useLov","componentDidMount","render","classes","label","adornment","icon","select","InputProps","SelectProps","fullWidth","rows","multiline","manualError","other","undefined","e","target","endAdornment","marginFullwidth","margin2","onChange","defaultProps","propTypes","object","arrayOf","oneOf","array","string","bool","func"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,SAAR,EAAmBC,UAAnB,QAAoC,mBAApC;AACA,SAAQC,MAAR,QAAqB,wBAArB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAO,KAAKC,SAAZ,MAA2B,YAA3B;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,cAAP,MAA2B,iDAA3B;;AAEA,MAAMC,YAAN,SAA2BR,SAA3B,CAAqC;AACjCS,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SA8BnBC,QA9BmB,GA8BR,OAAOC,KAAP,EAAcC,cAAd,EAA8BC,mBAA9B,KAAsD;AAAA,YACtDC,aADsD,GACrC,KAAKL,KADgC,CACtDK,aADsD;AAG7D,YAAM,KAAKC,QAAL,CAAc;AAACC,QAAAA,KAAK,EAAE;AAAR,OAAd,CAAN;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,cAAc,CAACM,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;AAC5C,YAAIE,OAAO,GAAG,IAAd;AACA,YAAIC,GAAG,GAAG,EAAV;;AAEA,gBAAQR,cAAc,CAACK,CAAD,CAAtB;AACI,eAAK,WAAL;AAAkB;AACd,kBAAII,UAAU,GAAGR,mBAAmB,GAAGS,QAAQ,CAACT,mBAAmB,CAACI,CAAD,CAApB,CAAX,GAAsC,IAAIM,IAAJ,GAAWC,OAAX,EAA1E;AACA,kBAAIC,WAAW,GAAGtB,MAAM,CAAC,IAAIoB,IAAJ,CAASF,UAAT,CAAD,CAAN,CAA6BK,MAA7B,CAAoC,IAApC,EAA0CC,MAA1C,CAAiD,qBAAjD,CAAlB;AAEAR,cAAAA,OAAO,GAAG,CAAC,CAACS,KAAK,CAACjB,KAAD,CAAN,GAAgBW,QAAQ,CAACX,KAAD,CAAxB,GAAkCA,KAAnC,KAA6CU,UAAvD;AACAD,cAAAA,GAAG,GAAG,iBAAiBK,WAAvB;AACA;AACH;;AAED,eAAK,OAAL;AAAc;AACVN,cAAAA,OAAO,GAAG,MAAMd,SAAS,CAACwB,OAAV,CAAkBlB,KAAlB,EAAyB,OAAzB,CAAhB;AACAS,cAAAA,GAAG,GAAG,6BAAN;AACA;AACH;;AAED,eAAK,SAAL;AAAgB;AACZ,kBAAIU,KAAK,GAAG,+EAAZ;AACAX,cAAAA,OAAO,GAAG,MAAMd,SAAS,CAAC0B,OAAV,CAAkB1B,SAAS,CAAC2B,KAAV,CAAgBrB,KAAhB,CAAlB,EAA0CmB,KAA1C,CAAhB;AACAV,cAAAA,GAAG,GAAG,qCAAN;AACA;AACH;;AAED,eAAK,cAAL;AAAqB;AACjBD,cAAAA,OAAO,GAAG,MAAMd,SAAS,CAAC4B,cAAV,CAAyBtB,KAAzB,EAAgC,OAAhC,CAAhB;AACAS,cAAAA,GAAG,GAAG,mCAAN;AACA;AACH;;AAED,eAAK,gBAAL;AAAuB;AACnB,kBAAIU,KAAK,GAAG,yGAAZ;AACAX,cAAAA,OAAO,GAAG,MAAMd,SAAS,CAAC0B,OAAV,CAAkB1B,SAAS,CAAC2B,KAAV,CAAgBrB,KAAhB,CAAlB,EAA0CmB,KAA1C,CAAhB;AACAV,cAAAA,GAAG,GAAG,0CAAN;AACA;AACH;;AAED,eAAK,QAAL;AAAe;AACX,kBAAIP,mBAAmB,IAAIA,mBAAmB,CAACI,CAAD,CAA9C,EAAmD;AAC/CE,gBAAAA,OAAO,GAAG,MAAMd,SAAS,CAAC6B,MAAV,CAAiBvB,KAAjB,EAAwBE,mBAAmB,CAACI,CAAD,CAA3C,CAAhB;AACAG,gBAAAA,GAAG,GAAG,wBAAN;AACH;;AACD;AACH;;AAED,eAAK,OAAL;AAAc;AACVD,cAAAA,OAAO,GAAG,MAAMd,SAAS,CAAC8B,OAAV,CAAkBxB,KAAlB,CAAhB;AACAS,cAAAA,GAAG,GAAG,sBAAN;AACA;AACH;;AAED,eAAK,WAAL;AAAkB;AACdD,cAAAA,OAAO,GAAG,MAAMd,SAAS,CAAC+B,WAAV,CAAsBzB,KAAtB,CAAhB;AACAS,cAAAA,GAAG,GAAG,kCAAN;AACA;AACH;;AAED,eAAK,SAAL;AAAgB;AACZ,kBAAIP,mBAAmB,IAAIA,mBAAmB,CAACI,CAAD,CAA9C,EAAmD;AAC/CE,gBAAAA,OAAO,GAAG,MAAMd,SAAS,CAAC0B,OAAV,CAAkBpB,KAAlB,EAAyBE,mBAAmB,CAACI,CAAD,CAA5C,CAAhB;AACAG,gBAAAA,GAAG,GAAG,mCAAN;AACH;;AAED;AACH;;AAED,eAAK,aAAL;AAAoB;AAChBD,cAAAA,OAAO,GAAG,MAAMd,SAAS,CAACgC,aAAV,CAAwB1B,KAAxB,EAA+B,OAA/B,CAAhB;AACAS,cAAAA,GAAG,GAAG,+BAAN;AACA;AACH;;AAED,eAAK,QAAL;AAAe;AACXD,cAAAA,OAAO,GAAG,MAAMd,SAAS,CAACiC,SAAV,CAAoB3B,KAApB,CAAhB;AACAS,cAAAA,GAAG,GAAG,sBAAN;AACA;AACH;;AAED,eAAK,aAAL;AAAoB;AAChB,kBAAIP,mBAAmB,IAAIA,mBAAmB,CAACI,CAAD,CAA9C,EAAmD;AAC/CE,gBAAAA,OAAO,GAAG,MAAMd,SAAS,CAACkC,OAAV,CAAkB5B,KAAlB,EAAyBE,mBAAmB,CAACI,CAAD,CAA5C,CAAhB;AAEAG,gBAAAA,GAAG,GAAI,6BAAD,GAAiC,IAAvC;AACAA,gBAAAA,GAAG,IAAIP,mBAAmB,CAACI,CAAD,CAAnB,CAAuBuB,GAAvB,GACA,oBAAD,GAAwB,GAAE3B,mBAAmB,CAACI,CAAD,CAAnB,CAAuBuB,GAAI,EAArD,GAA0D,IADzD,GACgE,EADvE;AAEApB,gBAAAA,GAAG,IAAIP,mBAAmB,CAACI,CAAD,CAAnB,CAAuBwB,GAAvB,GACA,oBAAD,GAAwB,GAAE5B,mBAAmB,CAACI,CAAD,CAAnB,CAAuBwB,GAAI,EAArD,GAA0D,IADzD,GACgE,EADvE;AAEArB,gBAAAA,GAAG,IAAIP,mBAAmB,CAACI,CAAD,CAAnB,CAAuByB,EAAvB,GACA,cAAD,GAAkB,GAAE7B,mBAAmB,CAACI,CAAD,CAAnB,CAAuByB,EAAG,EAA9C,GAAmD,IADlD,GACyD,EADhE;AAEAtB,gBAAAA,GAAG,IAAIP,mBAAmB,CAACI,CAAD,CAAnB,CAAuB0B,EAAvB,GACA,cAAD,GAAkB,GAAE9B,mBAAmB,CAACI,CAAD,CAAnB,CAAuB0B,EAAG,EAA9C,GAAmD,IADlD,GACyD,EADhE;AAEH,eAZD,MAYO;AACHxB,gBAAAA,OAAO,GAAG,MAAMd,SAAS,CAACkC,OAAV,CAAkB5B,KAAlB,CAAhB;AACAS,gBAAAA,GAAG,GAAI,6BAAD,GAAiC,IAAvC;AACH;;AAED;AACH;;AAED,eAAK,WAAL;AAAkB;AACd,kBAAIP,mBAAmB,IAAIA,mBAAmB,CAACI,CAAD,CAA9C,EAAmD;AAC/CE,gBAAAA,OAAO,GAAG,MAAMd,SAAS,CAACuC,KAAV,CAAgBjC,KAAhB,EAAuBE,mBAAmB,CAACI,CAAD,CAA1C,CAAhB;AAEAG,gBAAAA,GAAG,GAAI,2BAAD,GAA+B,IAArC;AACAA,gBAAAA,GAAG,IAAIP,mBAAmB,CAACI,CAAD,CAAnB,CAAuBuB,GAAvB,GACA,oBAAD,GAAwB,GAAE3B,mBAAmB,CAACI,CAAD,CAAnB,CAAuBuB,GAAI,EAArD,GAA0D,IADzD,GACgE,EADvE;AAEApB,gBAAAA,GAAG,IAAIP,mBAAmB,CAACI,CAAD,CAAnB,CAAuBwB,GAAvB,GACA,oBAAD,GAAwB,GAAE5B,mBAAmB,CAACI,CAAD,CAAnB,CAAuBwB,GAAI,EAArD,GAA0D,IADzD,GACgE,EADvE;AAEArB,gBAAAA,GAAG,IAAIP,mBAAmB,CAACI,CAAD,CAAnB,CAAuByB,EAAvB,GACA,cAAD,GAAkB,GAAE7B,mBAAmB,CAACI,CAAD,CAAnB,CAAuByB,EAAG,EAA9C,GAAmD,IADlD,GACyD,EADhE;AAEAtB,gBAAAA,GAAG,IAAIP,mBAAmB,CAACI,CAAD,CAAnB,CAAuB0B,EAAvB,GACA,cAAD,GAAkB,GAAE9B,mBAAmB,CAACI,CAAD,CAAnB,CAAuB0B,EAAG,EAA9C,GAAmD,IADlD,GACyD,EADhE;AAEH,eAZD,MAYO;AACHxB,gBAAAA,OAAO,GAAG,MAAMd,SAAS,CAACuC,KAAV,CAAgBjC,KAAhB,CAAhB;AACAS,gBAAAA,GAAG,GAAI,2BAAD,GAA+B,IAArC;AACH;;AAED;AACH;;AAED,eAAK,UAAL;AAAiB;AACbD,cAAAA,OAAO,GAAG,MAAM,CAACd,SAAS,CAACwC,OAAV,CAAkBlC,KAAlB,CAAjB;AACAS,cAAAA,GAAG,GAAG,2BAAN;AACA;AACH;;AAED,eAAK,WAAL;AAAkB;AACdD,cAAAA,OAAO,GAAG,MAAMd,SAAS,CAACyC,WAAV,CAAsBnC,KAAtB,CAAhB;AACAS,cAAAA,GAAG,GAAG,kCAAN;AACA;AACH;AAjIL,SAJ4C,CAsI3C;;;AACD,cAAM,KAAK2B,WAAL,CAAiBnC,cAAc,CAACK,CAAD,CAA/B,EAAoCN,KAApC,EAA2CQ,OAA3C,EAAoDC,GAApD,CAAN;AAEA,YAAIJ,KAAK,GAAG,EAAZ;AACAA,QAAAA,KAAK,CAAC,KAAKP,KAAL,CAAWuC,IAAZ,CAAL,GAAyB,KAAKC,KAAL,CAAWjC,KAApC;;AAEA,YAAIJ,cAAc,CAACK,CAAD,CAAd,IAAqB,UAArB,IAAmCN,KAAK,IAAI,EAA5C,IAAkD,CAACQ,OAAvD,EAAgE;AAC5D,gBAAM,KAAKJ,QAAL,CAAc;AAACC,YAAAA,KAAK,EAAE;AAAR,WAAd,EAA8B,MAAM;AACtCA,YAAAA,KAAK,CAAC,KAAKP,KAAL,CAAWuC,IAAZ,CAAL,GAAyB,KAAKC,KAAL,CAAWjC,KAApC;AACA,gBAAIF,aAAJ,EACIA,aAAa,CAACE,KAAD,CAAb;AACP,WAJK,CAAN;AAMH,SAPD,MAOO,IAAIJ,cAAc,CAACK,CAAD,CAAd,IAAqB,UAArB,IAAmCN,KAAK,IAAI,EAAhD,EAAoD;AACvD,gBAAM,KAAKI,QAAL,CAAc;AAACC,YAAAA,KAAK,EAAE;AAAR,WAAd,EAA8B,MAAM;AACtCA,YAAAA,KAAK,CAAC,KAAKP,KAAL,CAAWuC,IAAZ,CAAL,GAAyB,KAAKC,KAAL,CAAWjC,KAApC;AACA,gBAAIF,aAAJ,EACIA,aAAa,CAACE,KAAD,CAAb;AACP,WAJK,CAAN;AAKH,SANM,MAMA;AACH,cAAIF,aAAJ,EACIA,aAAa,CAACE,KAAD,CAAb;AACP;AACJ,OAjK4D,CAiK5D;;;AAED,YAAM,KAAKkC,eAAL,CAAqB,KAAKD,KAAL,CAAWE,MAAhC,EAAwCvC,cAAxC,EAAwDwC,QAAxD,EAAN;AACH,KAlMkB;;AAAA,SA+MnBF,eA/MmB,GA+MD,OAAOC,MAAP,EAAevC,cAAf,KAAkC;AAChD,UAAIyC,GAAG,GAAG,EAAV;AACAzC,MAAAA,cAAc,CAAC0C,MAAf,CAAsBC,UAAU,IAAI;AAChC,YAAIJ,MAAM,CAACI,UAAD,CAAN,CAAmBnC,GAAnB,IAA0B+B,MAAM,CAACI,UAAD,CAAN,CAAmBnC,GAAnB,CAAuBF,MAAvB,GAAgC,CAA9D,EAAiE;AAC7DmC,UAAAA,GAAG,IAAIF,MAAM,CAACI,UAAD,CAAN,CAAmBnC,GAAnB,GAA0B,IAAjC;AACH;AACJ,OAJD;AAMA,YAAM,KAAKL,QAAL,CAAc;AAACyC,QAAAA,UAAU,EAAEH;AAAb,OAAd,CAAN;AACH,KAxNkB;;AAEf,SAAKJ,KAAL,GAAa;AACTE,MAAAA,MAAM,EAAE,EADC;AAETK,MAAAA,UAAU,EAAE,EAFH;AAGT7C,MAAAA,KAAK,EAAE,EAHE;AAITK,MAAAA,KAAK,EAAG,EAAEP,KAAK,CAACG,cAAN,IAAwBH,KAAK,CAACG,cAAN,CAAqB6C,QAArB,CAA8B,UAA9B,CAAxB,IAAqE,CAAChD,KAAK,CAACiD,QAA9E;AAJC,KAAb;AAMH;;AAED,SAAOC,wBAAP,CAAgCC,SAAhC,EAA2CC,SAA3C,EAAsD;AAClD,QAAID,SAAS,CAACE,MAAV,KAAqB,IAArB,IAA6B,OAAQF,SAAS,CAACjD,KAAlB,KAA6B,WAA1D,IACGiD,SAAS,CAACjD,KAAV,KAAoB,EADvB,IAC6BiD,SAAS,CAACjD,KAAV,KAAoB,IADjD,IACyDkD,SAAS,CAAClD,KAAV,KAAoBiD,SAAS,CAACjD,KAD3F,EAEI,OAAO;AACHK,MAAAA,KAAK,EAAE;AADJ,KAAP;AAKJ,WAAO,IAAP;AACH;;AAED+C,EAAAA,iBAAiB,GAAG;AAChB,SAAKhD,QAAL,CAAc;AACVJ,MAAAA,KAAK,EAAE,KAAKF,KAAL,CAAWE,KADR;AAEV;AACAK,MAAAA,KAAK,EAAG,EAAE,KAAKP,KAAL,CAAWG,cAAX,IAA6B,KAAKH,KAAL,CAAWG,cAAX,CAA0B6C,QAA1B,CAAmC,UAAnC,CAA7B,IACH,CAAC,KAAKhD,KAAL,CAAWE,KADT,IACkB,CAAC,KAAKF,KAAL,CAAWiD,QADhC;AAHE,KAAd;AAMH;;AAwKD,QAAMX,WAAN,CAAkBnC,cAAlB,EAAkCD,KAAlC,EAAyCQ,OAAzC,EAAkDC,GAAlD,EAAuD;AACnD,UAAM,KAAKL,QAAL,CAAc;AAChBoC,MAAAA,MAAM,oBACC,KAAKF,KAAL,CAAWE,MADZ;AAEF,SAACvC,cAAD,GAAkB;AACdQ,UAAAA,GAAG,EAAGT,KAAK,IAAI,CAACQ,OAAX,IAAwBP,cAAc,IAAI,UAAlB,IAAgC,CAACO,OAAzD,GAAoEC,GAApE,GAA0E;AADjE;AAFhB;AADU,KAAd,CAAN;AAQH;;AAaD4C,EAAAA,MAAM,GAAG;AAAA,wBAKD,KAAKvD,KALJ;AAAA,UAEDwD,OAFC,eAEDA,OAFC;AAAA,UAEQH,MAFR,eAEQA,MAFR;AAAA,UAEgBI,KAFhB,eAEgBA,KAFhB;AAAA,UAEuBlB,IAFvB,eAEuBA,IAFvB;AAAA,UAE6BU,QAF7B,eAE6BA,QAF7B;AAAA,UAGD9C,cAHC,eAGDA,cAHC;AAAA,UAGeC,mBAHf,eAGeA,mBAHf;AAAA,UAGoCsD,SAHpC,eAGoCA,SAHpC;AAAA,UAG+CC,IAH/C,eAG+CA,IAH/C;AAAA,UAGqDC,MAHrD,eAGqDA,MAHrD;AAAA,UAG6DC,UAH7D,eAG6DA,UAH7D;AAAA,UAGyEC,WAHzE,eAGyEA,WAHzE;AAAA,UAIDC,SAJC,eAIDA,SAJC;AAAA,UAIUC,IAJV,eAIUA,IAJV;AAAA,UAIgB9D,KAJhB,eAIgBA,KAJhB;AAAA,UAIuB+D,SAJvB,eAIuBA,SAJvB;AAAA,UAIiCC,WAJjC,eAIiCA,WAJjC;AAAA,UAIiDC,KAJjD;;AAAA,wBAMuB,KAAK3B,KAN5B;AAAA,UAMEO,UANF,eAMEA,UANF;AAAA,UAMcxC,KANd,eAMcA,KANd;AAQL,WACI,oBAAC,SAAD,CAEI;AAFJ;AAGI,MAAA,MAAM,EAAEqD,MAHZ;AAII,MAAA,WAAW,EAAEE,WAJjB,CAKI;AALJ;AAOI,MAAA,QAAQ,EAAET,MAAM,GAAG,IAAH,GAAUJ,QAP9B;AAQI,MAAA,KAAK,EAAEiB,WAAW,IAAI,CAAC3D,KAR3B;AASI,MAAA,UAAU,EAAE,CAACA,KAAD,GACR;AAAM,QAAA,EAAE,EAAG,GAAEgC,IAAK,cAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAkCQ,UAAlC,CADQ,GAC+CqB,SAV/D;AAWI,MAAA,MAAM,EAAGC,CAAD,IAAO;AACX,YAAIlE,cAAJ,EAAoB;AAChB,eAAKF,QAAL,CAAcoE,CAAC,CAACC,MAAF,GAAWD,CAAC,CAACC,MAAF,CAASpE,KAApB,GAA4BmE,CAA1C,EACIlE,cAAc,GAAGA,cAAH,GAAoB,KADtC,EAEIC,mBAAmB,GAAGA,mBAAH,GAAyB,KAFhD;AAGH;AACJ,OAjBL;AAkBI,MAAA,UAAU,EAAEsD,SAAS,GAAG;AACpBa,QAAAA,YAAY,EACR,oBAAC,cAAD;AAAgB,UAAA,QAAQ,EAAC,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKZ,IADL;AAFgB,OAAH,GAMhBC,MAAM,IAAIC,UAAV,GAAuB;AACxBU,QAAAA,YAAY,EAAGV;AADS,OAAvB,GAED,IA1BR;AA2BI,MAAA,QAAQ,EAAE1D,cAAc,IAAIA,cAAc,CAAC6C,QAAf,CAAwB,UAAxB;AA3BhC,OA4BQmB,KA5BR;AA6BI,MAAA,IAAI,EAAE5B,IA7BV;AA8BI,MAAA,SAAS,EAAEwB,SAAS,GAAGP,OAAO,CAACgB,eAAX,GAA6BhB,OAAO,CAACiB,OA9B7D;AA+BI,MAAA,SAAS,EAAEV,SA/Bf;AAgCI,MAAA,IAAI,EAAEC,IAhCV;AAiCI,MAAA,KAAK,EAAEP,KAAK,KAAKW,SAAV,GAAsBX,KAAtB,GAA8B,GAjCzC,CAiC8C;AAjC9C;AAkCI,MAAA,KAAK,EAAEvD,KAAK,IAAI,IAAT,GAAgB,EAAhB,GAAqBA,KAlChC;AAmCI,MAAA,QAAQ,EAAE,KAAKF,KAAL,CAAW0E,QAnCzB;AAoCI,MAAA,SAAS,EAAET,SAAS,GAAG,IAAH,GAAU,KApClC;AAqCI,MAAA,OAAO,EAAC,UArCZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADJ;AAyCH;;AA5QgC;;AA+QrCnE,YAAY,CAAC6E,YAAb,GAA4B;AACxBxE,EAAAA,cAAc,EAAE;AADQ,CAA5B;AAIAL,YAAY,CAAC8E,SAAb,GAAyB;AACrBpB,EAAAA,OAAO,EAAE7D,SAAS,CAACkF,MADE;AAErB1E,EAAAA,cAAc,EAAER,SAAS,CAACmF,OAAV,CAAkBnF,SAAS,CAACoF,KAAV,CAAgB,CAAC,WAAD,EAAc,OAAd,EAAuB,SAAvB,EAC9C,cAD8C,EAC9B,gBAD8B,EACZ,OADY,EACH,QADG,EACO,WADP,EAE9C,SAF8C,EAEnC,aAFmC,EAEpB,QAFoB,EAEV,aAFU,EAEK,WAFL,EAEkB,UAFlB,EAE8B,WAF9B,CAAhB,CAAlB,CAFK;AAKrB3E,EAAAA,mBAAmB,EAAET,SAAS,CAACqF,KALV;AAMrBvB,EAAAA,KAAK,EAAE9D,SAAS,CAACsF,MANI;AAOrB1C,EAAAA,IAAI,EAAE5C,SAAS,CAACsF,MAPK;AAQrBvB,EAAAA,SAAS,EAAE/D,SAAS,CAACuF,IARA;AASrBvB,EAAAA,IAAI,EAAEhE,SAAS,CAACkF,MATK;AAUrB3E,EAAAA,KAAK,EAAEP,SAAS,CAACsF,MAVI;AAWrBP,EAAAA,QAAQ,EAAE/E,SAAS,CAACwF,IAXC;AAYrBpB,EAAAA,SAAS,EAAEpE,SAAS,CAACuF,IAZA;AAarBlB,EAAAA,IAAI,EAAErE,SAAS,CAACsF,MAbK;AAcrBhB,EAAAA,SAAS,EAAEtE,SAAS,CAACuF,IAdA;AAerB7B,EAAAA,MAAM,EAAE1D,SAAS,CAACuF,IAfG;AAgBrBhB,EAAAA,WAAW,EAAEvE,SAAS,CAACuF;AAhBF,CAAzB;AAmBA,eAAe1F,UAAU,CAACC,MAAD,CAAV,CAAmBK,YAAnB,CAAf","sourcesContent":["import React, {Component} from 'react';\nimport {TextField, withStyles} from '@material-ui/core';\nimport {styles} from '../../assets/jss/style'\nimport moment from \"jalali-moment\";\nimport * as PropTypes from 'prop-types';\nimport validator from \"validator\";\nimport InputAdornment from \"@material-ui/core/InputAdornment/InputAdornment\";\n\nclass IbxTextField extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            errors: {},\n            helperText: \"\",\n            value: \"\",\n            valid: (!(props.validationType && props.validationType.includes(\"required\") && !props.disabled))\n        };\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        if (nextProps.useLov === true && typeof (nextProps.value) !== 'undefined'\n            && nextProps.value !== '' && nextProps.value !== null && prevState.value !== nextProps.value)\n            return {\n                valid: true\n\n            };\n\n        return null;\n    }\n\n    componentDidMount() {\n        this.setState({\n            value: this.props.value,\n            // hiding helper text in loading data\n            valid: (!(this.props.validationType && this.props.validationType.includes(\"required\")\n                && !this.props.value && !this.props.disabled))\n        });\n    }\n\n    validity = async (value, validationType, validationTypeParam) => {\n        const {errorCallback} = this.props;\n\n        await this.setState({valid: true});\n        for (let i = 0; i < validationType.length; i++) {\n            let isValid = true;\n            let msg = \"\";\n\n            switch (validationType[i]) {\n                case \"afterDate\": {\n                    let targetDate = validationTypeParam ? parseInt(validationTypeParam[i]) : new Date().getTime();\n                    let displayDate = moment(new Date(targetDate)).locale('fa').format('YYYY/MM/DD HH:mm:ss');\n\n                    isValid = (!isNaN(value) ? parseInt(value) : value) >= targetDate;\n                    msg = \"زمان حداقل: \" + displayDate;\n                    break;\n                }\n\n                case \"alpha\": {\n                    isValid = await validator.isAlpha(value, 'en-US');\n                    msg = \"کاراکترهای مجاز: حروف لاتین\";\n                    break;\n                }\n\n                case \"alphaFa\": {\n                    let regEx = /^[آابپتثجچحخدذرزژسشصضطظعغفقکگلمنوهیي]+[آابپتثجچحخدذرزژسشصضطظعغفقکگلمنوهیي ]*$/;\n                    isValid = await validator.matches(validator.rtrim(value), regEx);\n                    msg = \"کاراکترهای مجاز: حروف فارسی و فاصله\";\n                    break;\n                }\n\n                case \"alphanumeric\": {\n                    isValid = await validator.isAlphanumeric(value, 'en-US');\n                    msg = \"کاراکترهای مجاز: حروف لاتین و عدد\";\n                    break;\n                }\n\n                case \"alphanumericFa\": {\n                    let regEx = /^[٠١٢٣٤٥٦٧٨٩0-9آابپتثجچحخدذرزژسشصضطظعغفقکگلمنوهیي]+[٠١٢٣٤٥٦٧٨٩0-9آابپتثجچحخدذرزژسشصضطظعغفقکگلمنوهیي ]*$/;\n                    isValid = await validator.matches(validator.rtrim(value), regEx);\n                    msg = \"کاراکترهای مجاز: حروف فارسی، فاصله و عدد\";\n                    break;\n                }\n\n                case \"equals\": {\n                    if (validationTypeParam && validationTypeParam[i]) {\n                        isValid = await validator.equals(value, validationTypeParam[i]);\n                        msg = \"مقادیر مساوی نمی باشند\";\n                    }\n                    break;\n                }\n\n                case \"email\": {\n                    isValid = await validator.isEmail(value);\n                    msg = \"ایمیل معتبر نمی باشد\";\n                    break;\n                }\n\n                case \"lowercase\": {\n                    isValid = await validator.isLowercase(value);\n                    msg = \"کاراکترهای مجاز: حروف لاتین کوچک\";\n                    break;\n                }\n\n                case \"matches\": {\n                    if (validationTypeParam && validationTypeParam[i]) {\n                        isValid = await validator.matches(value, validationTypeParam[i]);\n                        msg = \"ورودی با عبارت منطقی مطابقت ندارد\";\n                    }\n\n                    break;\n                }\n\n                case \"mobilePhone\": {\n                    isValid = await validator.isMobilePhone(value, 'fa-IR');\n                    msg = \"لطفا شماره موبایل وارد نمایید\";\n                    break;\n                }\n\n                case \"number\": {\n                    isValid = await validator.isNumeric(value);\n                    msg = \"لطفا عدد وارد نمایید\";\n                    break;\n                }\n\n                case \"numberFloat\": {\n                    if (validationTypeParam && validationTypeParam[i]) {\n                        isValid = await validator.isFloat(value, validationTypeParam[i]);\n\n                        msg = `لطفا عدد اعشاری وارد نمایید` + `\\n`;\n                        msg += validationTypeParam[i].min\n                            ? `بزرگ تر یا مساوی: ` + `${validationTypeParam[i].min}` + `\\n` : ``;\n                        msg += validationTypeParam[i].max\n                            ? `کوچک تر یا مساوی: ` + `${validationTypeParam[i].max}` + `\\n` : ``;\n                        msg += validationTypeParam[i].gt\n                            ? `بزرگ تر از: ` + `${validationTypeParam[i].gt}` + `\\n` : ``;\n                        msg += validationTypeParam[i].lt\n                            ? `کوچک تر از: ` + `${validationTypeParam[i].lt}` + `\\n` : ``;\n                    } else {\n                        isValid = await validator.isFloat(value);\n                        msg = `لطفا عدد اعشاری وارد نمایید` + `\\n`;\n                    }\n\n                    break;\n                }\n\n                case \"numberInt\": {\n                    if (validationTypeParam && validationTypeParam[i]) {\n                        isValid = await validator.isInt(value, validationTypeParam[i]);\n\n                        msg = `لطفا عدد صحیح وارد نمایید` + `\\n`;\n                        msg += validationTypeParam[i].min\n                            ? `بزرگ تر یا مساوی: ` + `${validationTypeParam[i].min}` + `\\n` : ``;\n                        msg += validationTypeParam[i].max\n                            ? `کوچک تر یا مساوی: ` + `${validationTypeParam[i].max}` + `\\n` : ``;\n                        msg += validationTypeParam[i].gt\n                            ? `بزرگ تر از: ` + `${validationTypeParam[i].gt}` + `\\n` : ``;\n                        msg += validationTypeParam[i].lt\n                            ? `کوچک تر از: ` + `${validationTypeParam[i].lt}` + `\\n` : ``;\n                    } else {\n                        isValid = await validator.isInt(value);\n                        msg = `لطفا عدد صحیح وارد نمایید` + `\\n`;\n                    }\n\n                    break;\n                }\n\n                case \"required\": {\n                    isValid = await !validator.isEmpty(value);\n                    msg = \"مقدار فیلد اجباری می باشد\";\n                    break;\n                }\n\n                case \"uppercase\": {\n                    isValid = await validator.isUppercase(value);\n                    msg = \"کاراکترهای مجاز: حروف لاتین بزرگ\";\n                    break;\n                }\n            }//switch end\n            await this.setErrorMsg(validationType[i], value, isValid, msg);\n\n            let valid = [];\n            valid[this.props.name] = this.state.valid;\n\n            if (validationType[i] != \"required\" && value != \"\" && !isValid) {\n                await this.setState({valid: false}, () => {\n                    valid[this.props.name] = this.state.valid;\n                    if (errorCallback)\n                        errorCallback(valid)\n                });\n\n            } else if (validationType[i] == \"required\" && value == \"\") {\n                await this.setState({valid: false}, () => {\n                    valid[this.props.name] = this.state.valid;\n                    if (errorCallback)\n                        errorCallback(valid)\n                });\n            } else {\n                if (errorCallback)\n                    errorCallback(valid)\n            }\n        }//for end\n\n        await this.printErrorsMsgs(this.state.errors, validationType).toString();\n    };\n\n    async setErrorMsg(validationType, value, isValid, msg) {\n        await this.setState({\n            errors: {\n                ...this.state.errors,\n                [validationType]: {\n                    msg: (value && !isValid) || (validationType == \"required\" && !isValid) ? msg : \"\"\n                }\n            }\n        });\n    }\n\n    printErrorsMsgs = async (errors, validationType) => {\n        let str = '';\n        validationType.filter(validation => {\n            if (errors[validation].msg && errors[validation].msg.length > 0) {\n                str += errors[validation].msg + `\\n`;\n            }\n        });\n\n        await this.setState({helperText: str});\n    };\n\n    render() {\n        const {\n            classes, useLov, label, name, disabled,\n            validationType, validationTypeParam, adornment, icon, select, InputProps, SelectProps,\n            fullWidth, rows, value, multiline,manualError, ...other\n        } = this.props;\n        const {helperText, valid} = this.state;\n\n        return (\n            <TextField\n\n                //select mode; begin\n                select={select}\n                SelectProps={SelectProps}\n                //select mode; end\n\n                disabled={useLov ? true : disabled}\n                error={manualError || !valid}\n                helperText={!valid ?\n                    <span id={`${name}-helper-text`}>{helperText}</span> : undefined}\n                onBlur={(e) => {\n                    if (validationType) {\n                        this.validity(e.target ? e.target.value : e,\n                            validationType ? validationType : false,\n                            validationTypeParam ? validationTypeParam : false);\n                    }\n                }}\n                InputProps={adornment ? {\n                    endAdornment: (\n                        <InputAdornment position=\"end\">\n                            {icon}\n                        </InputAdornment>\n                    )\n                } : (select && InputProps ? {\n                    endAdornment: (InputProps)\n                } : null)}\n                required={validationType && validationType.includes(\"required\")}\n                {...other}\n                name={name}\n                className={fullWidth ? classes.marginFullwidth : classes.margin2}\n                fullWidth={fullWidth}\n                rows={rows}\n                label={label !== undefined ? label : ' '} //set required text , if field is require\n                value={value == null ? '' : value}\n                onChange={this.props.onChange}\n                multiline={multiline ? true : false}\n                variant=\"outlined\"\n            />\n        )\n    }\n}\n\nIbxTextField.defaultProps = {\n    validationType: []\n};\n\nIbxTextField.propTypes = {\n    classes: PropTypes.object,\n    validationType: PropTypes.arrayOf(PropTypes.oneOf(['afterDate', 'alpha', 'alphaFa',\n        'alphanumeric', 'alphanumericFa', 'email', 'equals', 'lowercase',\n        'matches', 'mobilePhone', 'number', 'numberFloat', 'numberInt', 'required', 'uppercase'])),\n    validationTypeParam: PropTypes.array,\n    label: PropTypes.string,\n    name: PropTypes.string,\n    adornment: PropTypes.bool,\n    icon: PropTypes.object,\n    value: PropTypes.string,\n    onChange: PropTypes.func,\n    fullWidth: PropTypes.bool,\n    rows: PropTypes.string,\n    multiline: PropTypes.bool,\n    useLov: PropTypes.bool,\n    manualError: PropTypes.bool\n};\n\nexport default withStyles(styles)(IbxTextField);    "]},"metadata":{},"sourceType":"module"}