{"ast":null,"code":"import _slicedToArray from \"/home/alireza/Documents/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/alireza/Documents/react/src/Components/IrisaComponents/MyGrid.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Table, TableBody, TableCell, TableHead, TablePagination, TableRow, TableSortLabel, TableFooter, Checkbox } from '@material-ui/core';\n\nfunction MyGrid(props) {\n  const data = props.data,\n        onSelectedID = props.onSelectedID;\n\n  const _useState = useState(5),\n        _useState2 = _slicedToArray(_useState, 2),\n        rowsPerPage = _useState2[0],\n        setRowsPerPage = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        page = _useState4[0],\n        setPage = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        selectedID = _useState6[0],\n        setSelectedID = _useState6[1];\n\n  useEffect(() => {});\n  return React.createElement(Table, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(TableHead, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(TableCell, {\n    align: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"\\u0627\\u06CC\\u0645\\u06CC\\u0644\"), React.createElement(TableCell, {\n    align: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"\\u0646\\u0627\\u0645 \\u062E\\u0627\\u0646\\u0648\\u0627\\u062F\\u06AF\\u06CC\"), React.createElement(TableCell, {\n    align: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \"\\u0646\\u0627\\u0645\"), React.createElement(TableCell, {\n    align: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \"\\u0634\\u0646\\u0627\\u0633\\u0647\"), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \" \"))), React.createElement(TableBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, data !== undefined && data.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => {\n    return React.createElement(TableRow, {\n      key: row.ID,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(TableCell, {\n      align: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, row.email), React.createElement(TableCell, {\n      align: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, row.lastName), React.createElement(TableCell, {\n      align: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, row.firstName), React.createElement(TableCell, {\n      align: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(Checkbox, {\n      name: row.ID,\n      checked: selectedID.includes(row.ID),\n      onChange: e => {\n        const _e$target = e.target,\n              name = _e$target.name,\n              checked = _e$target.checked;\n        setSelectedID(checked ? [...selectedID, name] : selectedID.includes(name) ? selectedID.filter(itm => itm !== name) : console.log('nothing'));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    })));\n  })), React.createElement(TableFooter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(TablePagination, {\n    rowsPerPageOptions: [5, 10, 25],\n    colSpan: 3,\n    count: data.length,\n    rowsPerPage: rowsPerPage,\n    page: page,\n    SelectProps: {\n      native: true\n    },\n    onChangePage: (e, p) => {\n      setPage(p);\n    },\n    onChangeRowsPerPage: e => {\n      setRowsPerPage(parseInt(e.target.value));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }))));\n}\n\nexport default MyGrid;","map":{"version":3,"sources":["/home/alireza/Documents/react/src/Components/IrisaComponents/MyGrid.js"],"names":["React","useState","useEffect","Table","TableBody","TableCell","TableHead","TablePagination","TableRow","TableSortLabel","TableFooter","Checkbox","MyGrid","props","data","onSelectedID","rowsPerPage","setRowsPerPage","page","setPage","selectedID","setSelectedID","undefined","slice","map","row","ID","email","lastName","firstName","includes","e","target","name","checked","filter","itm","console","log","length","native","p","parseInt","value"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from 'react';\nimport {Table,TableBody,TableCell,TableHead,TablePagination,TableRow,TableSortLabel,TableFooter,Checkbox}  from '@material-ui/core';\n\nfunction MyGrid(props){\n\n    const {data,onSelectedID} = props;\n\n    const [rowsPerPage,setRowsPerPage] = useState(5);\n    const [page,setPage] = useState(0);\n    const [selectedID,setSelectedID] = useState([]);\n\n    useEffect(()=>{\n        \n    })\n\n    return (\n        <Table>\n        <TableHead>\n            <TableRow>\n                <TableCell align=\"right\">ایمیل</TableCell>  \n                <TableCell align=\"right\">نام خانوادگی</TableCell>\n                <TableCell align=\"right\">نام</TableCell>\n                <TableCell align=\"right\">شناسه</TableCell>\n                <TableCell> </TableCell>\n            </TableRow>\n        </TableHead>\n        <TableBody>\n        {   data!== undefined &&\n            data.slice(page*rowsPerPage,page*rowsPerPage+rowsPerPage).map(row=>{return (\n            <TableRow key={row.ID}>\n                <TableCell align=\"right\">{row.email}</TableCell>        \n                <TableCell align=\"right\">{row.lastName}</TableCell>        \n                <TableCell align=\"right\">{row.firstName}</TableCell>        \n                <TableCell align=\"right\"><Checkbox name={row.ID} checked={selectedID.includes(row.ID)} onChange={e=>\n                        {                 \n                            const {name,checked} = e.target  \n                            setSelectedID(checked? [...selectedID,name]: selectedID.includes(name)? selectedID.filter(itm=>itm!==name):console.log('nothing'))\n                        }\n                    } /></TableCell>        \n            </TableRow>)})\n        }\n        </TableBody>   \n        <TableFooter>\n            <TableRow>\n                <TablePagination\n                    rowsPerPageOptions={[5, 10, 25]}\n                    colSpan={3}\n                    count={data.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    SelectProps={{\n                        native: true,\n                      }}\n                    onChangePage={(e,p)=>{setPage(p)}}\n                    onChangeRowsPerPage={e=>{setRowsPerPage(parseInt(e.target.value))}}\n                />\n            </TableRow>       \n        </TableFooter> \n    </Table>\n    )\n}\n\nexport default MyGrid\n"]},"metadata":{},"sourceType":"module"}