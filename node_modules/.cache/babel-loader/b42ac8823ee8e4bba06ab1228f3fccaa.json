{"ast":null,"code":"import _slicedToArray from \"/home/alireza/Documents/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/alireza/Documents/react/src/App.js\";\nimport ReactVirtualizedTable from './Components/IrisaComponents/MyGrid';\nimport React, { Component, useState, useEffect, useRef } from 'react';\nimport SortableTree from 'react-sortable-tree';\nimport 'react-sortable-tree/style.css'; // This only needs to be imported once in your app\n\nimport axios from 'axios';\nimport InfiniteSample from './Components/IrisaComponents/InfiniteSample';\nimport Sample from './Components/IrisaComponents/Sample1';\nimport { SelectValidator } from 'react-material-ui-form-validator';\nimport IrisaDateTime from './Components/IrisaComponents/IrisaDateTime';\n\nclass Tree extends Component {\n  constructor(props) {\n    super(props);\n\n    this.makeRandomData = () => {\n      const dataBase = [];\n    };\n\n    this.state = {\n      treeData: [{\n        title: '1',\n        children: [{\n          title: '2',\n          children: [{\n            title: '5'\n          }]\n        }, {\n          title: '3'\n        }, {\n          title: '4'\n        }]\n      }, {\n        title: 'Fish',\n        children: [{\n          title: 'fingerline'\n        }]\n      }]\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: {\n        height: 400\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(SortableTree, {\n      treeData: this.state.treeData,\n      onChange: treeData => this.setState({\n        treeData\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction App(props) {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        dataRows = _useState2[0],\n        setDataRows = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        firstRendered = _useState4[0],\n        setFirstRendered = _useState4[1];\n\n  const num = useRef(0);\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        val = _useState6[0],\n        setVal = _useState6[1]; // useEffect(()=>{\n  // if(firstRendered){\n  //   axios.get('http://localhost:8081/').\n  //   then(res=>{\n  //     if(res.status===200){\n  //       setDataRows(res.data);\n  //       console.log('data',dataRows)\n  //     }\n  //     else{\n  //       alert('error in fetching the data')\n  //     }\n  //   })\n  //setFirstRendered(!firstRendered)\n  // }\n  // console.log('useEffect');\n  // if(firstRendered){\n  // console.log('start of ....');\n  // setFirstRendered(false);\n  // return ()=>{\n  //   setFirstRendered(false);\n  // }\n  // }\n  // })\n  // let x=''\n  // onChange={e=>setVal(e.target.value)}\n  // setTimeout(()=>{setVal(pval=>pval+1 )},5000);\n\n\n  const _useState7 = useState(0),\n        _useState8 = _slicedToArray(_useState7, 2),\n        a = _useState8[0],\n        setA = _useState8[1];\n\n  useEffect(() => {\n    return () => {\n      setA(1);\n    };\n  }, []);\n  console.log('component is running ...');\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"number : \", ++num.current), React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"new component\"));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/alireza/Documents/react/src/App.js"],"names":["ReactVirtualizedTable","React","Component","useState","useEffect","useRef","SortableTree","axios","InfiniteSample","Sample","SelectValidator","IrisaDateTime","Tree","constructor","props","makeRandomData","dataBase","state","treeData","title","children","render","height","setState","App","dataRows","setDataRows","firstRendered","setFirstRendered","num","val","setVal","a","setA","console","log","current"],"mappings":"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","sourcesContent":["import ReactVirtualizedTable from './Components/IrisaComponents/MyGrid';\n\nimport React, { Component,useState,useEffect,useRef } from 'react';\nimport SortableTree from 'react-sortable-tree';\nimport 'react-sortable-tree/style.css'; // This only needs to be imported once in your app\nimport axios from 'axios';\nimport InfiniteSample from './Components/IrisaComponents/InfiniteSample';\nimport Sample from './Components/IrisaComponents/Sample1';\nimport { SelectValidator } from 'react-material-ui-form-validator';\nimport IrisaDateTime from './Components/IrisaComponents/IrisaDateTime';\n\nclass Tree extends Component {\n  constructor(props) {\n    super(props);\n \n    this.state = {\n      treeData: [\n        { title: '1', children: [{ title: '2',children:[{title:'5'}] },{ title: '3' },{ title: '4' }] },\n        { title: 'Fish', children: [{ title: 'fingerline'}] }\n      ],\n    };\n  }\n\n  makeRandomData = ()=>{\n    const dataBase=[] \n  }\n \n  render() {\n    return (\n      <div style={{ height: 400 }}>\n        <SortableTree\n          treeData={this.state.treeData}\n          onChange={treeData => this.setState({ treeData })}\n        />\n      </div>\n    );\n  }\n}\n\nfunction App(props){\n\n  const [dataRows,setDataRows] = useState([]);\n  const [firstRendered,setFirstRendered] = useState(true);\n  const num = useRef(0);\n  const [val,setVal] = useState(0)\n\n  // useEffect(()=>{\n    // if(firstRendered){\n    //   axios.get('http://localhost:8081/').\n    //   then(res=>{\n    //     if(res.status===200){\n    //       setDataRows(res.data);\n    //       console.log('data',dataRows)\n    //     }\n    //     else{\n    //       alert('error in fetching the data')\n    //     }\n    //   })\n\n      //setFirstRendered(!firstRendered)\n    // }\n    // console.log('useEffect');\n    // if(firstRendered){\n      // console.log('start of ....');\n      // setFirstRendered(false);\n\n      // return ()=>{\n      //   setFirstRendered(false);\n      // }\n    // }\n  // })\n  // let x=''\n  // onChange={e=>setVal(e.target.value)}\n\n  // setTimeout(()=>{setVal(pval=>pval+1 )},5000);\n\n  const [a,setA] = useState(0);\n  useEffect(()=>{\n    return ()=>{\n      setA(1)\n\n    }\n  },[]);\n\n  console.log('component is running ...');\n  \n    return (\n        <div>\n          <label>number : {++num.current}</label>\n          <button>new component</button>\n          {/* <input type='text' value={val}  /> */}\n            {/* <ReactVirtualizedTable \n            rows={dataRows}\n            columns={\n              [\n                {\n                  width: 200,\n                  flexGrow: 1.0,\n                  label: 'id',\n                  dataKey: 'id',\n                },\n                {\n                  width: 120,\n                  label: 'first name',\n                  dataKey: 'firstName',\n                  numeric: true,\n                },\n                {\n                  width: 120,\n                  label: 'last name',\n                  dataKey: 'lastName',\n                  numeric: true,\n                },\n                {\n                  width: 120,\n                  label: 'salary',\n                  dataKey: 'salary',\n                  numeric: true,\n                },\n              ]\n            }\n            /> */}\n\n            {/* <Tree /> */}\n\n            {/* <InfiniteSample /> */}\n{/* \n            <Sample /> */}\n            {/* <IrisaDateTime /> */}\n        </div>\n    )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}