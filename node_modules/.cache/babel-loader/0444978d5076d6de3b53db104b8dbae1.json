{"ast":null,"code":"var _jsxFileName = \"/home/alireza/Documents/react/src/Components/IrisaComponents/InfiniteSample.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { InfiniteLoader, List } from 'react-virtualized';\nimport 'react-virtualized/styles.css'; // only needs to be imported once\n\nexport default function InfiniteSample(props) {\n  // This example assumes you have a way to know/load this information\n  const remoteRowCount = 0;\n  const list = [];\n\n  function isRowLoaded({\n    index\n  }) {\n    return !!list[index];\n  }\n\n  function loadMoreRows({\n    startIndex,\n    stopIndex\n  }) {\n    return fetch(`path/to/api?startIndex=${startIndex}&stopIndex=${stopIndex}`).then(response => {// Store response data in list...\n    });\n  }\n\n  function rowRenderer({\n    key,\n    index,\n    style\n  }) {\n    return React.createElement(\"div\", {\n      key: key,\n      style: style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, list[index]);\n  } // Render your list\n\n\n  return React.createElement(InfiniteLoader, {\n    isRowLoaded: isRowLoaded,\n    loadMoreRows: loadMoreRows,\n    rowCount: remoteRowCount,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, ({\n    onRowsRendered,\n    registerChild\n  }) => React.createElement(List, {\n    height: 200,\n    onRowsRendered: onRowsRendered,\n    ref: registerChild,\n    rowCount: remoteRowCount,\n    rowHeight: 20,\n    rowRenderer: rowRenderer,\n    width: 300,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/home/alireza/Documents/react/src/Components/IrisaComponents/InfiniteSample.js"],"names":["React","ReactDOM","InfiniteLoader","List","InfiniteSample","props","remoteRowCount","list","isRowLoaded","index","loadMoreRows","startIndex","stopIndex","fetch","then","response","rowRenderer","key","style","onRowsRendered","registerChild"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,cAAT,EAAyBC,IAAzB,QAAqC,mBAArC;AACA,OAAO,8BAAP,C,CAAuC;;AAEvC,eAAe,SAASC,cAAT,CAAwBC,KAAxB,EAA8B;AAC7C;AACA,QAAMC,cAAc,GAAC,CAArB;AAEA,QAAMC,IAAI,GAAG,EAAb;;AAEA,WAASC,WAAT,CAAsB;AAAEC,IAAAA;AAAF,GAAtB,EAAiC;AAC/B,WAAO,CAAC,CAACF,IAAI,CAACE,KAAD,CAAb;AACD;;AAED,WAASC,YAAT,CAAuB;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,GAAvB,EAAkD;AAChD,WAAOC,KAAK,CAAE,0BAAyBF,UAAW,cAAaC,SAAU,EAA7D,CAAL,CACJE,IADI,CACCC,QAAQ,IAAI,CAChB;AACD,KAHI,CAAP;AAID;;AAED,WAASC,WAAT,CAAsB;AAAEC,IAAAA,GAAF;AAAOR,IAAAA,KAAP;AAAcS,IAAAA;AAAd,GAAtB,EAA4C;AAC1C,WACE;AACE,MAAA,GAAG,EAAED,GADP;AAEE,MAAA,KAAK,EAAEC,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIGX,IAAI,CAACE,KAAD,CAJP,CADF;AAQD,GA1B4C,CA4B7C;;;AACA,SACE,oBAAC,cAAD;AACE,IAAA,WAAW,EAAED,WADf;AAEE,IAAA,YAAY,EAAEE,YAFhB;AAGE,IAAA,QAAQ,EAAEJ,cAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKG,CAAC;AAAEa,IAAAA,cAAF;AAAkBC,IAAAA;AAAlB,GAAD,KACC,oBAAC,IAAD;AACE,IAAA,MAAM,EAAE,GADV;AAEE,IAAA,cAAc,EAAED,cAFlB;AAGE,IAAA,GAAG,EAAEC,aAHP;AAIE,IAAA,QAAQ,EAAEd,cAJZ;AAKE,IAAA,SAAS,EAAE,EALb;AAME,IAAA,WAAW,EAAEU,WANf;AAOE,IAAA,KAAK,EAAE,GAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,CADF;AAqBK","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { InfiniteLoader, List } from 'react-virtualized';\nimport 'react-virtualized/styles.css'; // only needs to be imported once\n\nexport default function InfiniteSample(props){\n// This example assumes you have a way to know/load this information\nconst remoteRowCount=0;\n\nconst list = [];\n\nfunction isRowLoaded ({ index }) {\n  return !!list[index];\n}\n\nfunction loadMoreRows ({ startIndex, stopIndex }) {\n  return fetch(`path/to/api?startIndex=${startIndex}&stopIndex=${stopIndex}`)\n    .then(response => {\n      // Store response data in list...\n    })\n}\n\nfunction rowRenderer ({ key, index, style}) {\n  return (\n    <div\n      key={key}\n      style={style}\n    >\n      {list[index]}\n    </div>\n  )\n}\n\n// Render your list\nreturn(\n  <InfiniteLoader\n    isRowLoaded={isRowLoaded}\n    loadMoreRows={loadMoreRows}\n    rowCount={remoteRowCount}\n  >\n    {({ onRowsRendered, registerChild }) => (\n      <List\n        height={200}\n        onRowsRendered={onRowsRendered}\n        ref={registerChild}\n        rowCount={remoteRowCount}\n        rowHeight={20}\n        rowRenderer={rowRenderer}\n        width={300}\n    \n\n  />\n    )}\n  </InfiniteLoader>)\n\n    }\n\n"]},"metadata":{},"sourceType":"module"}