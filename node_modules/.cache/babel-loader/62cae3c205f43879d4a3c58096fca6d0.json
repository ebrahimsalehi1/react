{"ast":null,"code":"import _slicedToArray from \"/home/alireza/Documents/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/alireza/Documents/react/src/Components/IrisaComponents/TreeLargeData/index.js\";\nimport ReactVirtualizedTable from '../MyGrid';\nimport React, { memo, Component, useState, useEffect, useRef } from 'react';\nimport SortableTree from 'react-sortable-tree';\nimport 'react-sortable-tree/style.css'; // This only needs to be imported once in your app\n\nimport axios from 'axios';\nimport InfiniteSample from '../InfiniteSample';\nimport Sample from '../Sample1';\nimport { SelectValidator } from 'react-material-ui-form-validator';\nimport IrisaDateTime from '../IrisaDateTime';\nimport Moment from 'moment-jalaali'; //import IbxDatePicker2 from './Components/IrisaComponents/Mydate/IbxDatePicker2'\n\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst progress = () => React.createElement(CircularProgress, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17\n  },\n  __self: this\n});\n\nfunction App(props) {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        dataRows = _useState2[0],\n        setDataRows = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        firstRendered = _useState4[0],\n        setFirstRendered = _useState4[1];\n\n  const num = useRef(0);\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        val = _useState6[0],\n        setVal = _useState6[1];\n\n  async function webService1() {\n    progress();\n    axios.get(`http://localhost:8080/getall/${val}`).then(res => {\n      if (res.status === 200) {\n        setDataRows(res.data);\n        console.log('data', res.data);\n      } else {\n        alert('error in fetching the data');\n      }\n    });\n  } // useEffect(()=>{\n  //   if(firstRendered){\n  //     setFirstRendered(!firstRendered)\n  //   }\n  //   //console.log('useEffect');\n  //   if(firstRendered){\n  //     //console.log('start of ....');\n  //     setFirstRendered(false);\n  //     return ()=>{\n  //       setFirstRendered(false);\n  //     }\n  //   }\n  // })\n\n\n  return React.createElement(\"div\", {\n    style: {\n      height: 400\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    type: \"number\",\n    value: val,\n    onChange: e => {\n      setVal(e.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }), React.createElement(Button, {\n    onClick: e => {\n      console.log(val);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Load Data\"), React.createElement(SortableTree, {\n    treeData: dataRows,\n    onChange: treeData => setDataRows(treeData) //onClick={e=>{console.log(e)}}\n    // map={({\n    //   treeData,\n    //   getNodeKey,\n    //   callback,\n    //   ignoreCollapsed = true,\n    // })=>({})}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }));\n}\n\nexport default memo(App);","map":{"version":3,"sources":["/home/alireza/Documents/react/src/Components/IrisaComponents/TreeLargeData/index.js"],"names":["ReactVirtualizedTable","React","memo","Component","useState","useEffect","useRef","SortableTree","axios","InfiniteSample","Sample","SelectValidator","IrisaDateTime","Moment","TextField","Button","CircularProgress","progress","App","props","dataRows","setDataRows","firstRendered","setFirstRendered","num","val","setVal","webService1","get","then","res","status","data","console","log","alert","height","e","target","value","treeData"],"mappings":";;AAAA,OAAOA,qBAAP,MAAkC,WAAlC;AAEA,OAAOC,KAAP,IAAgBC,IAAhB,EAAqBC,SAArB,EAA+BC,QAA/B,EAAwCC,SAAxC,EAAkDC,MAAlD,QAAgE,OAAhE;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAO,+BAAP,C,CAAwC;;AACxC,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,OAAOC,MAAP,MAAmB,YAAnB;AACA,SAASC,eAAT,QAAgC,kCAAhC;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,MAAP,MAAmB,gBAAnB,C,CACA;;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;;AAEA,MAAMC,QAAQ,GAAE,MAAK,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAArB;;AAEA,SAASC,GAAT,CAAaC,KAAb,EAAmB;AAAA,oBAEcf,QAAQ,CAAI,EAAJ,CAFtB;AAAA;AAAA,QAEVgB,QAFU;AAAA,QAEDC,WAFC;;AAAA,qBAIwBjB,QAAQ,CAAC,IAAD,CAJhC;AAAA;AAAA,QAIVkB,aAJU;AAAA,QAIIC,gBAJJ;;AAKjB,QAAMC,GAAG,GAAGlB,MAAM,CAAC,CAAD,CAAlB;;AALiB,qBAMIF,QAAQ,CAAC,CAAD,CANZ;AAAA;AAAA,QAMVqB,GANU;AAAA,QAMNC,MANM;;AAQjB,iBAAeC,WAAf,GAA4B;AAC1BV,IAAAA,QAAQ;AACRT,IAAAA,KAAK,CAACoB,GAAN,CAAW,gCAA+BH,GAAI,EAA9C,EACAI,IADA,CACKC,GAAG,IAAE;AACR,UAAGA,GAAG,CAACC,MAAJ,KAAa,GAAhB,EAAoB;AAClBV,QAAAA,WAAW,CAACS,GAAG,CAACE,IAAL,CAAX;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBJ,GAAG,CAACE,IAAvB;AACD,OAHD,MAII;AACFG,QAAAA,KAAK,CAAC,4BAAD,CAAL;AACD;AACF,KATD;AAUD,GApBgB,CAsBjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAEE,SACI;AAAK,IAAA,KAAK,EAAE;AAACC,MAAAA,MAAM,EAAC;AAAR,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGI,oBAAC,SAAD;AACA,IAAA,IAAI,EAAC,QADL;AAEA,IAAA,KAAK,EAAEX,GAFP;AAGA,IAAA,QAAQ,EAAEY,CAAC,IAAE;AAACX,MAAAA,MAAM,CAACW,CAAC,CAACC,MAAF,CAASC,KAAV,CAAN;AAAuB,KAHrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,EASI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEF,CAAC,IAAE;AAACJ,MAAAA,OAAO,CAACC,GAAR,CAAYT,GAAZ;AAAiB,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBATJ,EAWA,oBAAC,YAAD;AACE,IAAA,QAAQ,EAAEL,QADZ;AAEE,IAAA,QAAQ,EAAEoB,QAAQ,IAAInB,WAAW,CAACmB,QAAD,CAFnC,CAGE;AACA;AACA;AACA;AACA;AACA;AACA;AATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXA,CADJ;AA4BH;;AAED,eAAetC,IAAI,CAACgB,GAAD,CAAnB","sourcesContent":["import ReactVirtualizedTable from '../MyGrid';\n\nimport React, { memo,Component,useState,useEffect,useRef } from 'react';\nimport SortableTree from 'react-sortable-tree';\nimport 'react-sortable-tree/style.css'; // This only needs to be imported once in your app\nimport axios from 'axios';\nimport InfiniteSample from '../InfiniteSample';\nimport Sample from '../Sample1';\nimport { SelectValidator } from 'react-material-ui-form-validator';\nimport IrisaDateTime from '../IrisaDateTime';\nimport Moment from 'moment-jalaali';\n//import IbxDatePicker2 from './Components/IrisaComponents/Mydate/IbxDatePicker2'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\nconst progress= ()=>(<CircularProgress/>)\n\nfunction App(props){\n\n  const [dataRows,setDataRows] = useState(   [] \n  );\n  const [firstRendered,setFirstRendered] = useState(true);\n  const num = useRef(0);\n  const [val,setVal] = useState(0)\n\n  async function webService1(){\n    progress();\n    axios.get(`http://localhost:8080/getall/${val}`).\n    then(res=>{\n      if(res.status===200){\n        setDataRows(res.data);\n        console.log('data',res.data)\n      }\n      else{\n        alert('error in fetching the data')\n      }\n    })\n  }\n\n  // useEffect(()=>{\n  //   if(firstRendered){\n  //     setFirstRendered(!firstRendered)\n  //   }\n  //   //console.log('useEffect');\n  //   if(firstRendered){\n  //     //console.log('start of ....');\n  //     setFirstRendered(false);\n\n  //     return ()=>{\n  //       setFirstRendered(false);\n  //     }\n  //   }\n  // })\n\n    return (\n        <div style={{height:400}}>\n          {/* <label>number : {++num.current}</label> */}\n\n            <TextField \n            type=\"number\"\n            value={val}\n            onChange={e=>{setVal(e.target.value)}}\n            />\n            {/* <input type='TEXT' onKeyDown={e=>{console.log(e.key)}}/> */}\n            <Button onClick={e=>{console.log(val)}}>Load Data</Button>\n\n        <SortableTree\n          treeData={dataRows}\n          onChange={treeData => setDataRows(treeData)}\n          //onClick={e=>{console.log(e)}}\n          // map={({\n          //   treeData,\n          //   getNodeKey,\n          //   callback,\n          //   ignoreCollapsed = true,\n          // })=>({})}\n        />\n\n\n\n        </div>\n    )\n}\n\nexport default memo(App)\n"]},"metadata":{},"sourceType":"module"}