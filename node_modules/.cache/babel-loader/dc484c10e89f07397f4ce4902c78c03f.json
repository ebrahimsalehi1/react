{"ast":null,"code":"var _jsxFileName = \"/home/alireza/Documents/react/src/Components/IrisaComponents/MyInfinitiveList.js\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types'; // import {\n//   ContentBox,\n//   ContentBoxHeader,\n//   ContentBoxParagraph,\n// } from '../demo/ContentBox';\n\nimport Immutable from 'immutable'; //import AutoSizer from '../AutoSizer';\n// import InfiniteLoader from './InfiniteLoader';\n// import List from '../List';\n\nimport styles from '../IrisaComponents/Infi';\nimport { AutoSizer, InfiniteLoader, List } from 'react-virtualized';\nconst STATUS_LOADING = 1;\nconst STATUS_LOADED = 2;\nexport default class InfiniteLoaderExample extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loadedRowCount: 0,\n      loadedRowsMap: {},\n      loadingRowCount: 0\n    };\n    this._timeoutIdMap = {};\n    this._clearData = this._clearData.bind(this);\n    this._isRowLoaded = this._isRowLoaded.bind(this);\n    this._loadMoreRows = this._loadMoreRows.bind(this);\n    this._rowRenderer = this._rowRenderer.bind(this);\n  }\n\n  componentWillUnmount() {\n    Object.keys(this._timeoutIdMap).forEach(timeoutId => {\n      clearTimeout(timeoutId);\n    });\n  }\n\n  render() {\n    const list = this.context.list;\n    const _this$state = this.state,\n          loadedRowCount = _this$state.loadedRowCount,\n          loadingRowCount = _this$state.loadingRowCount;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(InfiniteLoader, {\n      isRowLoaded: this._isRowLoaded,\n      loadMoreRows: this._loadMoreRows,\n      rowCount: list.size,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, ({\n      onRowsRendered,\n      registerChild\n    }) => React.createElement(AutoSizer, {\n      disableHeight: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, ({\n      width\n    }) => React.createElement(List, {\n      ref: registerChild,\n      className: styles.List,\n      height: 200,\n      onRowsRendered: onRowsRendered,\n      rowCount: list.size,\n      rowHeight: 30,\n      rowRenderer: this._rowRenderer,\n      width: width,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }))));\n  }\n\n  _clearData() {\n    this.setState({\n      loadedRowCount: 0,\n      loadedRowsMap: {},\n      loadingRowCount: 0\n    });\n  }\n\n  _isRowLoaded({\n    index\n  }) {\n    const loadedRowsMap = this.state.loadedRowsMap;\n    return !!loadedRowsMap[index]; // STATUS_LOADING or STATUS_LOADED\n  }\n\n  _loadMoreRows({\n    startIndex,\n    stopIndex\n  }) {\n    const _this$state2 = this.state,\n          loadedRowsMap = _this$state2.loadedRowsMap,\n          loadingRowCount = _this$state2.loadingRowCount;\n    const increment = stopIndex - startIndex + 1;\n\n    for (var i = startIndex; i <= stopIndex; i++) {\n      loadedRowsMap[i] = STATUS_LOADING;\n    }\n\n    this.setState({\n      loadingRowCount: loadingRowCount + increment\n    });\n    const timeoutId = setTimeout(() => {\n      const _this$state3 = this.state,\n            loadedRowCount = _this$state3.loadedRowCount,\n            loadingRowCount = _this$state3.loadingRowCount;\n      delete this._timeoutIdMap[timeoutId];\n\n      for (var i = startIndex; i <= stopIndex; i++) {\n        loadedRowsMap[i] = STATUS_LOADED;\n      }\n\n      this.setState({\n        loadingRowCount: loadingRowCount - increment,\n        loadedRowCount: loadedRowCount + increment\n      });\n      promiseResolver();\n    }, 1000 + Math.round(Math.random() * 2000));\n    this._timeoutIdMap[timeoutId] = true;\n    let promiseResolver;\n    return new Promise(resolve => {\n      promiseResolver = resolve;\n    });\n  }\n\n  _rowRenderer({\n    index,\n    key,\n    style\n  }) {\n    const list = this.context.list;\n    const loadedRowsMap = this.state.loadedRowsMap;\n    const row = list.get(index);\n    let content;\n\n    if (loadedRowsMap[index] === STATUS_LOADED) {\n      content = row.name;\n    } else {\n      content = React.createElement(\"div\", {\n        className: styles.placeholder,\n        style: {\n          width: row.size\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: styles.row,\n      key: key,\n      style: style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, content);\n  }\n\n}\nInfiniteLoaderExample.contextTypes = {\n  list: PropTypes.instanceOf(Immutable.List).isRequired\n};","map":{"version":3,"sources":["/home/alireza/Documents/react/src/Components/IrisaComponents/MyInfinitiveList.js"],"names":["React","PropTypes","Immutable","styles","AutoSizer","InfiniteLoader","List","STATUS_LOADING","STATUS_LOADED","InfiniteLoaderExample","PureComponent","constructor","props","state","loadedRowCount","loadedRowsMap","loadingRowCount","_timeoutIdMap","_clearData","bind","_isRowLoaded","_loadMoreRows","_rowRenderer","componentWillUnmount","Object","keys","forEach","timeoutId","clearTimeout","render","list","context","size","onRowsRendered","registerChild","width","setState","index","startIndex","stopIndex","increment","i","setTimeout","promiseResolver","Math","round","random","Promise","resolve","key","style","row","get","content","name","placeholder","contextTypes","instanceOf","isRequired"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\n// import {\n//   ContentBox,\n//   ContentBoxHeader,\n//   ContentBoxParagraph,\n// } from '../demo/ContentBox';\nimport Immutable from 'immutable';\n//import AutoSizer from '../AutoSizer';\n// import InfiniteLoader from './InfiniteLoader';\n// import List from '../List';\nimport styles from '../IrisaComponents/Infi';\nimport { AutoSizer,InfiniteLoader ,List} from 'react-virtualized';\n\nconst STATUS_LOADING = 1;\nconst STATUS_LOADED = 2;\n\nexport default class InfiniteLoaderExample extends React.PureComponent {\n  static contextTypes = {\n    list: PropTypes.instanceOf(Immutable.List).isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loadedRowCount: 0,\n      loadedRowsMap: {},\n      loadingRowCount: 0,\n    };\n\n    this._timeoutIdMap = {};\n\n    this._clearData = this._clearData.bind(this);\n    this._isRowLoaded = this._isRowLoaded.bind(this);\n    this._loadMoreRows = this._loadMoreRows.bind(this);\n    this._rowRenderer = this._rowRenderer.bind(this);\n  }\n\n  componentWillUnmount() {\n    Object.keys(this._timeoutIdMap).forEach(timeoutId => {\n      clearTimeout(timeoutId);\n    });\n  }\n\n  render() {\n    const {list} = this.context;\n    const {loadedRowCount, loadingRowCount} = this.state;\n\n    return (\n      <div>\n\n\n        <InfiniteLoader\n          isRowLoaded={this._isRowLoaded}\n          loadMoreRows={this._loadMoreRows}\n          rowCount={list.size}>\n          {({onRowsRendered, registerChild}) => (\n            <AutoSizer disableHeight>\n              {({width}) => (\n                <List\n                  ref={registerChild}\n                  className={styles.List}\n                  height={200}\n                  onRowsRendered={onRowsRendered}\n                  rowCount={list.size}\n                  rowHeight={30}\n                  rowRenderer={this._rowRenderer}\n                  width={width}\n                />\n              )}\n            </AutoSizer>\n          )}\n        </InfiniteLoader>\n      </div>\n    );\n  }\n\n  _clearData() {\n    this.setState({\n      loadedRowCount: 0,\n      loadedRowsMap: {},\n      loadingRowCount: 0,\n    });\n  }\n\n  _isRowLoaded({index}) {\n    const {loadedRowsMap} = this.state;\n    return !!loadedRowsMap[index]; // STATUS_LOADING or STATUS_LOADED\n  }\n\n  _loadMoreRows({startIndex, stopIndex}) {\n    const {loadedRowsMap, loadingRowCount} = this.state;\n    const increment = stopIndex - startIndex + 1;\n\n    for (var i = startIndex; i <= stopIndex; i++) {\n      loadedRowsMap[i] = STATUS_LOADING;\n    }\n\n    this.setState({\n      loadingRowCount: loadingRowCount + increment,\n    });\n\n    const timeoutId = setTimeout(() => {\n      const {loadedRowCount, loadingRowCount} = this.state;\n\n      delete this._timeoutIdMap[timeoutId];\n\n      for (var i = startIndex; i <= stopIndex; i++) {\n        loadedRowsMap[i] = STATUS_LOADED;\n      }\n\n      this.setState({\n        loadingRowCount: loadingRowCount - increment,\n        loadedRowCount: loadedRowCount + increment,\n      });\n\n      promiseResolver();\n    }, 1000 + Math.round(Math.random() * 2000));\n\n    this._timeoutIdMap[timeoutId] = true;\n\n    let promiseResolver;\n\n    return new Promise(resolve => {\n      promiseResolver = resolve;\n    });\n  }\n\n  _rowRenderer({index, key, style}) {\n    const {list} = this.context;\n    const {loadedRowsMap} = this.state;\n\n    const row = list.get(index);\n    let content;\n\n    if (loadedRowsMap[index] === STATUS_LOADED) {\n      content = row.name;\n    } else {\n      content = (\n        <div className={styles.placeholder} style={{width: row.size}} />\n      );\n    }\n\n    return (\n      <div className={styles.row} key={key} style={style}>\n        {content}\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}