"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = require("prop-types");

var _lodash = _interopRequireDefault(require("lodash"));

var _Button = _interopRequireDefault(require("@material-ui/core/Button"));

var _fineUploaderWrappers = _interopRequireDefault(require("fine-uploader-wrappers"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var imageLabelStyle = {
  fontSize: 14,
  lineHeight: '24px',
  width: '100%',
  display: 'inline-block',
  position: 'relative',
  backgroundColor: 'transparent',
  fontFamily: 'Roboto, sans-serif',
  transition: 'height 200ms cubic-bezier(0.23, 1, 0.32, 1) 0ms',
  cursor: 'text',
  marginTop: 14,
  color: 'rgba(0, 0, 0, 0.3)'
};

var getName = function getName(name) {
  return _lodash.default.replace(name, /\./g, ' ');
};

var ImageComponent = function ImageComponent(_ref) {
  var field = _ref.field,
      handleChange = _ref.handleChange,
      srcValue = _ref.srcValue,
      defaultImg = _ref.defaultImg;
  var name = field.name || 'field';
  var key = field.key || field.name || 'key';
  var endpoint = field.resource;
  var imageStyle = {
    display: 'block',
    marginBottom: 10,
    width: 50,
    height: 50
  };

  if (_lodash.default.get(field, 'position') === 'flex') {
    imageStyle.width = '100%';
    imageStyle.height = 150;
    imageStyle.objectFit = 'cover';
  }

  var uploader = new _fineUploaderWrappers.default({
    options: {
      request: {
        multiple: false,
        inputName: 'file',
        endpoint: endpoint
      },
      callbacks: {
        onComplete: function onComplete(id, name, response) {
          if (response.success) {
            handleChange(key, _lodash.default.get(field, 'prefix') + name);
            return _lodash.default.get(field, 'onSuccess', function () {})(name, true);
          }

          return _lodash.default.get(field, 'onError', function () {})(name, response);
        }
      }
    }
  });
  return _react.default.createElement("div", null, _react.default.createElement("label", {
    style: imageLabelStyle
  }, getName(name)), _react.default.createElement("div", {
    style: {
      cursor: 'pointer',
      width: '100%'
    }
  }, _react.default.createElement("img", {
    src: srcValue,
    onError: function onError(e) {
      e.target.src = defaultImg;
    },
    style: imageStyle
  }), _react.default.createElement(_Button.default, {
    component: "label"
  }, _react.default.createElement("input", {
    type: "file",
    style: {
      display: 'none'
    },
    accept: "image/*",
    onChange: function onChange(onChangeEvent) {
      uploader.methods.addFiles(onChangeEvent.target);
    }
  }), "upload")));
};

ImageComponent.defaultProps = {
  errors: {}
};
ImageComponent.propTypes = {
  handleChange: _propTypes.func.isRequired,
  field: (0, _propTypes.shape)({
    name: _propTypes.string,
    key: _propTypes.string,
    resource: _propTypes.string,
    position: (0, _propTypes.oneOf)(['flex']),
    prefix: _propTypes.string
  }).isRequired,
  srcValue: _propTypes.string.isRequired,
  defaultImg: _propTypes.string.isRequired
};
var _default = ImageComponent;
exports.default = _default;