"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _react = _interopRequireDefault(require("react"));

var _reactRelativePortal = _interopRequireDefault(require("react-relative-portal"));

var _propTypes = require("prop-types");

var _classnames = _interopRequireDefault(require("classnames"));

var _Async = _interopRequireDefault(require("react-select/lib/Async"));

var _styles = require("@material-ui/core/styles");

var _Typography = _interopRequireDefault(require("@material-ui/core/Typography"));

var _TextField = _interopRequireDefault(require("@material-ui/core/TextField"));

var _Paper = _interopRequireDefault(require("@material-ui/core/Paper"));

var _Chip = _interopRequireDefault(require("@material-ui/core/Chip"));

var _MenuItem = _interopRequireDefault(require("@material-ui/core/MenuItem"));

var _Cancel = _interopRequireDefault(require("@material-ui/icons/Cancel"));

var _colorManipulator = require("@material-ui/core/styles/colorManipulator");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var styles = function styles(theme) {
  return {
    root: {
      flexGrow: 1
    },
    input: {
      display: 'flex',
      padding: 0
    },
    valueContainer: {
      display: 'flex',
      flexWrap: 'wrap',
      flex: 1,
      alignItems: 'center',
      overflow: 'hidden'
    },
    chip: {
      margin: "2px 4px 2px 0"
    },
    chipFocused: {
      backgroundColor: (0, _colorManipulator.emphasize)( // theme.palette.type === 'light' ? theme.palette.grey[300] : theme.palette.grey[700],
      // theme.palette.grey[300],
      '#DCDCDC', 0.08)
    },
    noOptionsMessage: {// padding: `${theme.spacing.unit}px ${theme.spacing.unit * 2}px`,
    },
    singleValue: {
      fontSize: 14
    },
    placeholder: {
      position: 'absolute',
      left: 2,
      fontSize: 14
    },
    paper: {
      position: 'absolute',
      zIndex: 1,
      // marginTop: theme.spacing.unit,
      left: 0,
      right: 0,
      maxHeight: '200px',
      overflowY: 'scroll'
    },
    divider: {// height: theme.spacing.unit * 2,
    }
  };
};

function NoOptionsMessage(props) {
  return _react.default.createElement(_Typography.default, _extends({
    color: "textSecondary",
    className: props.selectProps.classes.noOptionsMessage
  }, props.innerProps), props.children);
}

function inputComponent(_ref) {
  var inputRef = _ref.inputRef,
      props = _objectWithoutProperties(_ref, ["inputRef"]);

  return _react.default.createElement("div", _extends({
    ref: inputRef
  }, props));
}

function Control(props) {
  return _react.default.createElement(_TextField.default, _extends({
    fullWidth: true,
    InputProps: {
      inputComponent: inputComponent,
      inputProps: _objectSpread({
        className: props.selectProps.classes.input,
        inputRef: props.innerRef,
        children: props.children
      }, props.innerProps)
    }
  }, props.selectProps.textFieldProps));
}

function Option(props) {
  return _react.default.createElement(_MenuItem.default, _extends({
    buttonRef: props.innerRef,
    selected: props.isFocused,
    component: "div",
    style: {
      fontWeight: props.isSelected ? 500 : 400
    }
  }, props.innerProps), props.children);
}

function Placeholder(props) {
  return _react.default.createElement(_Typography.default, _extends({
    color: "textSecondary",
    className: props.selectProps.classes.placeholder
  }, props.innerProps), props.children);
}

function SingleValue(props) {
  return _react.default.createElement(_Typography.default, _extends({
    className: props.selectProps.classes.singleValue
  }, props.innerProps), props.children);
}

function ValueContainer(props) {
  return _react.default.createElement("div", {
    className: props.selectProps.classes.valueContainer
  }, props.children);
}

function MultiValue(props) {
  return _react.default.createElement(_Chip.default, {
    tabIndex: -1,
    label: props.children,
    className: (0, _classnames.default)(props.selectProps.classes.chip, _defineProperty({}, props.selectProps.classes.chipFocused, props.isFocused)),
    onDelete: props.removeProps.onClick,
    deleteIcon: _react.default.createElement(_Cancel.default, props.removeProps)
  });
}

function Menu(props) {
  return _react.default.createElement(_reactRelativePortal.default, {
    component: "div",
    left: 0,
    top: 0
  }, _react.default.createElement(_Paper.default, _extends({
    square: true,
    className: props.selectProps.classes.paper
  }, props.innerProps, {
    style: {
      width: '400px',
      zIndex: 1400
    }
  }), props.children));
}

var components = {
  Control: Control,
  Menu: Menu,
  MultiValue: MultiValue,
  NoOptionsMessage: NoOptionsMessage,
  Option: Option,
  Placeholder: Placeholder,
  SingleValue: SingleValue,
  ValueContainer: ValueContainer
};

var getName = function getName(name) {
  return _lodash.default.replace(name, /\./g, ' ');
};

function IntegrationReactSelect(_ref2) {
  var field = _ref2.field,
      errors = _ref2.errors,
      selectedValue = _ref2.selectedValue,
      onChange = _ref2.onChange,
      classes = _ref2.classes,
      others = _objectWithoutProperties(_ref2, ["field", "errors", "selectedValue", "onChange", "classes"]);

  var name = field.name || 'field';
  var promiseOptions = field.promiseOptions || null;
  var key = field.key || field.name || 'key';

  var errorText = _lodash.default.get(errors, key, false);

  var items = field.items && field.empty && !field.multiple ? [{
    value: '',
    label: ''
  }].concat(_toConsumableArray(field.items)) : field.items;
  var selectStyles = {
    input: function input(base) {
      return _objectSpread({}, base, {
        // color: theme.palette.text.primary,
        '& input': {
          font: 'inherit'
        }
      });
    }
  };
  return _react.default.createElement("div", {
    className: classes.root
  }, _react.default.createElement(_Async.default, _extends({
    classes: classes,
    styles: selectStyles,
    textFieldProps: {
      label: getName(name),
      InputLabelProps: {
        shrink: true
      }
    },
    loadOptions: promiseOptions,
    value: selectedValue,
    components: components,
    onChange: onChange,
    defaultOptions: items,
    isMulti: field.multiple
  }, others)), errorText && _react.default.createElement("span", {
    style: {
      fontSize: '10px',
      color: 'red',
      fontFamily: '"Roboto", "Helvetica", "Arial", sans-serif'
    }
  }, errorText));
}

IntegrationReactSelect.defaultProps = {
  errors: {}
};
IntegrationReactSelect.propTypes = {
  field: (0, _propTypes.shape)({
    name: _propTypes.string,
    type: _propTypes.string,
    key: _propTypes.string
  }).isRequired,
  selectedValue: (0, _propTypes.oneOfType)([(0, _propTypes.arrayOf)((0, _propTypes.shape)({
    value: (0, _propTypes.oneOfType)([_propTypes.string, _propTypes.number]),
    label: _propTypes.string
  })), (0, _propTypes.shape)({
    value: (0, _propTypes.oneOfType)([_propTypes.string, _propTypes.number]),
    label: _propTypes.string
  })]).isRequired,
  onChange: _propTypes.func.isRequired,
  errors: (0, _propTypes.shape)({})
};

var _default = (0, _styles.withStyles)(styles)(IntegrationReactSelect);

exports.default = _default;