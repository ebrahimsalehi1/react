{"version":3,"file":"node.js","sources":["../src/index.js","../src/__tests__/core.node.js"],"sourcesContent":["// @flow\n\nimport type {\n  Properties,\n  FontFace as FontFaceObject,\n  KeyframesObject,\n} from \"./style-types\";\n\nexport type {FontFaceObject, KeyframesObject};\n\n// Note: $Shape is needed to make polymorphic withStyle refinements work correctly\n// It seems functions satisfy this type without $Shape\n// See: https://github.com/facebook/flow/issues/6784\n//\n//\n//\n//\n//\n//\nexport type StyleObject = $Shape<{\n  ...Properties,\n  [string]: StyleObject, // Unrecognized properties are assumed to be media queries or pseudo selectors w/ nested style object. See: https://github.com/styletron/styletron-standard\n}>;\n\nexport interface StandardEngine {\n  renderStyle(style: StyleObject): string;\n  renderKeyframes(keyframes: KeyframesObject): string;\n  renderFontFace(fontFace: FontFaceObject): string;\n}\n\nexport function driver(style: StyleObject, styletron: StandardEngine): string {\n  const tx = renderDeclarativeRules(style, styletron);\n  return styletron.renderStyle(tx);\n}\n\nexport function getInitialStyle(): StyleObject {\n  return {};\n}\n\nexport function renderDeclarativeRules(\n  style: StyleObject,\n  styletron: StandardEngine,\n) {\n  for (const key in style) {\n    const val = style[key];\n    if (key === \"animationName\" && typeof val !== \"string\") {\n      style.animationName = styletron.renderKeyframes((val: any));\n      continue;\n    }\n    if (key === \"fontFamily\" && typeof val !== \"string\") {\n      if (Array.isArray(val)) {\n        let result = \"\";\n        for (const font of val) {\n          if (typeof font === \"object\") {\n            result += `${styletron.renderFontFace((font: any))},`;\n          } else if (typeof font === \"string\") {\n            result += `${font},`;\n          }\n        }\n        style.fontFamily = result.slice(0, -1);\n        continue;\n      } else {\n        style.fontFamily = styletron.renderFontFace((val: any));\n        continue;\n      }\n    }\n    if (typeof val === \"object\" && val !== null) {\n      renderDeclarativeRules(val, styletron);\n    }\n  }\n  return style;\n}\n","// @flow\nimport test from \"tape\";\nimport {Server} from \"styletron-engine-atomic\";\nimport {driver} from \"../index\";\n\ntest(\"driver\", t => {\n  let cssString;\n  const instance = new Server();\n  const styleObject = {\n    color: \"red\",\n  };\n  driver(styleObject, instance);\n  cssString = \".ae{color:red}\";\n  t.strictEqual(instance.getCss(), cssString, \"injects basic style\");\n  const fontFallback = {\n    fontFamily: [\"Arial\", \"sans-serif\"],\n  };\n  driver(fontFallback, instance);\n  cssString = `${cssString}.af{font-family:Arial,sans-serif}`;\n  t.strictEqual(instance.getCss(), cssString, \"injects font fallbacks - basic\");\n  const fontFace = {\n    src: \"url(some-awesome-font.ttf)\",\n  };\n  const declaredFontFaceFallback = {\n    fontFamily: [fontFace, \"cursive\"],\n  };\n  driver(declaredFontFaceFallback, instance);\n  cssString = `@font-face{font-family:ae;src:url(some-awesome-font.ttf)}${cssString}.ag{font-family:ae,cursive}`;\n  t.strictEqual(\n    instance.getCss(),\n    cssString,\n    \"injects font fallbacks - declared\",\n  );\n  t.end();\n});\n"],"names":["driver","style","styletron","tx","renderDeclarativeRules","renderStyle","key","val","animationName","renderKeyframes","Array","isArray","result","font","renderFontFace","fontFamily","slice","test","t","cssString","instance","Server","styleObject","strictEqual","getCss","fontFallback","fontFace","declaredFontFaceFallback","end"],"mappings":"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"}