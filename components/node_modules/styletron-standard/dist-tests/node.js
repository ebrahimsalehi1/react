'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var test = _interopDefault(require('tape'));
var styletronEngineAtomic = require('styletron-engine-atomic');

var cov_zh7pauqul = function () {
  var path = "/Users/rtsao/rtsaoforks/styletron/packages/styletron-standard/src/index.js",
      hash = "97b0f02258553ff25c73ccc5d09b49e53b0f9ade",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = {
    path: "/Users/rtsao/rtsaoforks/styletron/packages/styletron-standard/src/index.js",
    statementMap: {
      "0": {
        start: {
          line: 32,
          column: 13
        },
        end: {
          line: 32,
          column: 53
        }
      },
      "1": {
        start: {
          line: 33,
          column: 2
        },
        end: {
          line: 33,
          column: 35
        }
      },
      "2": {
        start: {
          line: 37,
          column: 2
        },
        end: {
          line: 37,
          column: 12
        }
      },
      "3": {
        start: {
          line: 44,
          column: 2
        },
        end: {
          line: 70,
          column: 3
        }
      },
      "4": {
        start: {
          line: 45,
          column: 16
        },
        end: {
          line: 45,
          column: 26
        }
      },
      "5": {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 49,
          column: 5
        }
      },
      "6": {
        start: {
          line: 47,
          column: 6
        },
        end: {
          line: 47,
          column: 66
        }
      },
      "7": {
        start: {
          line: 48,
          column: 6
        },
        end: {
          line: 48,
          column: 15
        }
      },
      "8": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 66,
          column: 5
        }
      },
      "9": {
        start: {
          line: 51,
          column: 6
        },
        end: {
          line: 65,
          column: 7
        }
      },
      "10": {
        start: {
          line: 52,
          column: 21
        },
        end: {
          line: 52,
          column: 23
        }
      },
      "11": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "12": {
        start: {
          line: 54,
          column: 10
        },
        end: {
          line: 58,
          column: 11
        }
      },
      "13": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 66
        }
      },
      "14": {
        start: {
          line: 56,
          column: 17
        },
        end: {
          line: 58,
          column: 11
        }
      },
      "15": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 33
        }
      },
      "16": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 47
        }
      },
      "17": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 17
        }
      },
      "18": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 64
        }
      },
      "19": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 17
        }
      },
      "20": {
        start: {
          line: 67,
          column: 4
        },
        end: {
          line: 69,
          column: 5
        }
      },
      "21": {
        start: {
          line: 68,
          column: 6
        },
        end: {
          line: 68,
          column: 45
        }
      },
      "22": {
        start: {
          line: 71,
          column: 2
        },
        end: {
          line: 71,
          column: 15
        }
      }
    },
    fnMap: {
      "0": {
        name: "driver",
        decl: {
          start: {
            line: 31,
            column: 16
          },
          end: {
            line: 31,
            column: 22
          }
        },
        loc: {
          start: {
            line: 31,
            column: 78
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 31
      },
      "1": {
        name: "getInitialStyle",
        decl: {
          start: {
            line: 36,
            column: 16
          },
          end: {
            line: 36,
            column: 31
          }
        },
        loc: {
          start: {
            line: 36,
            column: 47
          },
          end: {
            line: 38,
            column: 1
          }
        },
        line: 36
      },
      "2": {
        name: "renderDeclarativeRules",
        decl: {
          start: {
            line: 40,
            column: 16
          },
          end: {
            line: 40,
            column: 38
          }
        },
        loc: {
          start: {
            line: 43,
            column: 2
          },
          end: {
            line: 72,
            column: 1
          }
        },
        line: 43
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        }, {
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        }],
        line: 46
      },
      "1": {
        loc: {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 46,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 46,
            column: 31
          }
        }, {
          start: {
            line: 46,
            column: 35
          },
          end: {
            line: 46,
            column: 58
          }
        }],
        line: 46
      },
      "2": {
        loc: {
          start: {
            line: 50,
            column: 4
          },
          end: {
            line: 66,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 4
          },
          end: {
            line: 66,
            column: 5
          }
        }, {
          start: {
            line: 50,
            column: 4
          },
          end: {
            line: 66,
            column: 5
          }
        }],
        line: 50
      },
      "3": {
        loc: {
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 50,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 50,
            column: 28
          }
        }, {
          start: {
            line: 50,
            column: 32
          },
          end: {
            line: 50,
            column: 55
          }
        }],
        line: 50
      },
      "4": {
        loc: {
          start: {
            line: 51,
            column: 6
          },
          end: {
            line: 65,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 6
          },
          end: {
            line: 65,
            column: 7
          }
        }, {
          start: {
            line: 51,
            column: 6
          },
          end: {
            line: 65,
            column: 7
          }
        }],
        line: 51
      },
      "5": {
        loc: {
          start: {
            line: 54,
            column: 10
          },
          end: {
            line: 58,
            column: 11
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 10
          },
          end: {
            line: 58,
            column: 11
          }
        }, {
          start: {
            line: 54,
            column: 10
          },
          end: {
            line: 58,
            column: 11
          }
        }],
        line: 54
      },
      "6": {
        loc: {
          start: {
            line: 56,
            column: 17
          },
          end: {
            line: 58,
            column: 11
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 17
          },
          end: {
            line: 58,
            column: 11
          }
        }, {
          start: {
            line: 56,
            column: 17
          },
          end: {
            line: 58,
            column: 11
          }
        }],
        line: 56
      },
      "7": {
        loc: {
          start: {
            line: 67,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        }, {
          start: {
            line: 67,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        }],
        line: 67
      },
      "8": {
        loc: {
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 67,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 67,
            column: 31
          }
        }, {
          start: {
            line: 67,
            column: 35
          },
          end: {
            line: 67,
            column: 47
          }
        }],
        line: 67
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0]
    },
    _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

// Note: $Shape is needed to make polymorphic withStyle refinements work correctly
// It seems functions satisfy this type without $Shape
// See: https://github.com/facebook/flow/issues/6784
//
//
//
//
//
//
function driver(style, styletron) {
  cov_zh7pauqul.f[0]++;
  const tx = (cov_zh7pauqul.s[0]++, renderDeclarativeRules(style, styletron));
  cov_zh7pauqul.s[1]++;
  return styletron.renderStyle(tx);
}

function renderDeclarativeRules(style, styletron) {
  cov_zh7pauqul.f[2]++;
  cov_zh7pauqul.s[3]++;

  for (const key in style) {
    const val = (cov_zh7pauqul.s[4]++, style[key]);
    cov_zh7pauqul.s[5]++;

    if ((cov_zh7pauqul.b[1][0]++, key === "animationName") && (cov_zh7pauqul.b[1][1]++, typeof val !== "string")) {
      cov_zh7pauqul.b[0][0]++;
      cov_zh7pauqul.s[6]++;
      style.animationName = styletron.renderKeyframes(val);
      cov_zh7pauqul.s[7]++;
      continue;
    } else {
      cov_zh7pauqul.b[0][1]++;
    }

    cov_zh7pauqul.s[8]++;

    if ((cov_zh7pauqul.b[3][0]++, key === "fontFamily") && (cov_zh7pauqul.b[3][1]++, typeof val !== "string")) {
      cov_zh7pauqul.b[2][0]++;
      cov_zh7pauqul.s[9]++;

      if (Array.isArray(val)) {
        cov_zh7pauqul.b[4][0]++;
        let result = (cov_zh7pauqul.s[10]++, "");
        cov_zh7pauqul.s[11]++;

        for (const font of val) {
          cov_zh7pauqul.s[12]++;

          if (typeof font === "object") {
            cov_zh7pauqul.b[5][0]++;
            cov_zh7pauqul.s[13]++;
            result += `${styletron.renderFontFace(font)},`;
          } else {
            cov_zh7pauqul.b[5][1]++;
            cov_zh7pauqul.s[14]++;

            if (typeof font === "string") {
              cov_zh7pauqul.b[6][0]++;
              cov_zh7pauqul.s[15]++;
              result += `${font},`;
            } else {
              cov_zh7pauqul.b[6][1]++;
            }
          }
        }

        cov_zh7pauqul.s[16]++;
        style.fontFamily = result.slice(0, -1);
        cov_zh7pauqul.s[17]++;
        continue;
      } else {
        cov_zh7pauqul.b[4][1]++;
        cov_zh7pauqul.s[18]++;
        style.fontFamily = styletron.renderFontFace(val);
        cov_zh7pauqul.s[19]++;
        continue;
      }
    } else {
      cov_zh7pauqul.b[2][1]++;
    }

    cov_zh7pauqul.s[20]++;

    if ((cov_zh7pauqul.b[8][0]++, typeof val === "object") && (cov_zh7pauqul.b[8][1]++, val !== null)) {
      cov_zh7pauqul.b[7][0]++;
      cov_zh7pauqul.s[21]++;
      renderDeclarativeRules(val, styletron);
    } else {
      cov_zh7pauqul.b[7][1]++;
    }
  }

  cov_zh7pauqul.s[22]++;
  return style;
}

test("driver", t => {
  let cssString;
  const instance = new styletronEngineAtomic.Server();
  const styleObject = {
    color: "red"
  };
  driver(styleObject, instance);
  cssString = ".ae{color:red}";
  t.strictEqual(instance.getCss(), cssString, "injects basic style");
  const fontFallback = {
    fontFamily: ["Arial", "sans-serif"]
  };
  driver(fontFallback, instance);
  cssString = `${cssString}.af{font-family:Arial,sans-serif}`;
  t.strictEqual(instance.getCss(), cssString, "injects font fallbacks - basic");
  const fontFace = {
    src: "url(some-awesome-font.ttf)"
  };
  const declaredFontFaceFallback = {
    fontFamily: [fontFace, "cursive"]
  };
  driver(declaredFontFaceFallback, instance);
  cssString = `@font-face{font-family:ae;src:url(some-awesome-font.ttf)}${cssString}.ag{font-family:ae,cursive}`;
  t.strictEqual(instance.getCss(), cssString, "injects font fallbacks - declared");
  t.end();
});
//# sourceMappingURL=node.js.map
