'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var test = _interopDefault(require('tape'));
var inlineStylePrefixer = require('inline-style-prefixer');

var cov_1gn4s4goqz = function () {
  var path = "/Users/rtsao/rtsaoforks/styletron/packages/styletron-engine-atomic/src/hyphenate-style-name.js",
      hash = "8e1dfe536468299187c10129e8f29dcb8e7f2ad4",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = {
    path: "/Users/rtsao/rtsaoforks/styletron/packages/styletron-engine-atomic/src/hyphenate-style-name.js",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 25
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "1": {
        start: {
          line: 4,
          column: 18
        },
        end: {
          line: 4,
          column: 24
        }
      },
      "2": {
        start: {
          line: 5,
          column: 14
        },
        end: {
          line: 5,
          column: 16
        }
      },
      "3": {
        start: {
          line: 8,
          column: 2
        },
        end: {
          line: 13,
          column: 37
        }
      }
    },
    fnMap: {
      "0": {
        name: "hyphenateStyleName",
        decl: {
          start: {
            line: 7,
            column: 24
          },
          end: {
            line: 7,
            column: 42
          }
        },
        loc: {
          start: {
            line: 7,
            column: 65
          },
          end: {
            line: 14,
            column: 1
          }
        },
        line: 7
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 13,
            column: 36
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 9,
            column: 17
          }
        }, {
          start: {
            line: 10,
            column: 7
          },
          end: {
            line: 13,
            column: 35
          }
        }],
        line: 8
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0]
    },
    _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

const uppercasePattern = (cov_1gn4s4goqz.s[0]++, /[A-Z]/g);
const msPattern = (cov_1gn4s4goqz.s[1]++, /^ms-/);
const cache = (cov_1gn4s4goqz.s[2]++, {});
function hyphenateStyleName(prop) {
  cov_1gn4s4goqz.f[0]++;
  cov_1gn4s4goqz.s[3]++;
  return prop in cache ? (cov_1gn4s4goqz.b[0][0]++, cache[prop]) : (cov_1gn4s4goqz.b[0][1]++, cache[prop] = prop.replace(uppercasePattern, "-$&").toLowerCase().replace(msPattern, "-ms-"));
}

var cov_17ukpf0reb = function () {
  var path = "/Users/rtsao/rtsaoforks/styletron/packages/styletron-engine-atomic/src/validate-no-mixed-hand.js",
      hash = "dcca11ba9f0fa29831f0c45902b719ffdb328e65",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = {
    path: "/Users/rtsao/rtsaoforks/styletron/packages/styletron-engine-atomic/src/validate-no-mixed-hand.js",
    statementMap: {
      "0": {
        start: {
          line: 9,
          column: 21
        },
        end: {
          line: 232,
          column: 1
        }
      },
      "1": {
        start: {
          line: 235,
          column: 31
        },
        end: {
          line: 238,
          column: 8
        }
      },
      "2": {
        start: {
          line: 236,
          column: 4
        },
        end: {
          line: 236,
          column: 40
        }
      },
      "3": {
        start: {
          line: 237,
          column: 4
        },
        end: {
          line: 237,
          column: 15
        }
      },
      "4": {
        start: {
          line: 240,
          column: 16
        },
        end: {
          line: 240,
          column: 18
        }
      },
      "5": {
        start: {
          line: 241,
          column: 2
        },
        end: {
          line: 254,
          column: 3
        }
      },
      "6": {
        start: {
          line: 242,
          column: 4
        },
        end: {
          line: 253,
          column: 5
        }
      },
      "7": {
        start: {
          line: 243,
          column: 6
        },
        end: {
          line: 252,
          column: 7
        }
      },
      "8": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 251,
          column: 9
        }
      },
      "9": {
        start: {
          line: 245,
          column: 23
        },
        end: {
          line: 245,
          column: 53
        }
      },
      "10": {
        start: {
          line: 246,
          column: 24
        },
        end: {
          line: 246,
          column: 54
        }
      },
      "11": {
        start: {
          line: 247,
          column: 10
        },
        end: {
          line: 250,
          column: 13
        }
      },
      "12": {
        start: {
          line: 255,
          column: 2
        },
        end: {
          line: 255,
          column: 15
        }
      }
    },
    fnMap: {
      "0": {
        name: "validateNoMixedHand",
        decl: {
          start: {
            line: 234,
            column: 16
          },
          end: {
            line: 234,
            column: 35
          }
        },
        loc: {
          start: {
            line: 234,
            column: 51
          },
          end: {
            line: 256,
            column: 1
          }
        },
        line: 234
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 235,
            column: 57
          },
          end: {
            line: 235,
            column: 58
          }
        },
        loc: {
          start: {
            line: 235,
            column: 76
          },
          end: {
            line: 238,
            column: 3
          }
        },
        line: 235
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 242,
            column: 4
          },
          end: {
            line: 253,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 242,
            column: 4
          },
          end: {
            line: 253,
            column: 5
          }
        }, {
          start: {
            line: 242,
            column: 4
          },
          end: {
            line: 253,
            column: 5
          }
        }],
        line: 242
      },
      "1": {
        loc: {
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 251,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 251,
            column: 9
          }
        }, {
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 251,
            column: 9
          }
        }],
        line: 244
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

/**
 * Adapted from https://github.com/gilmoreorless/css-shorthand-properties
 */
const shorthandMap = (cov_17ukpf0reb.s[0]++, {
  // CSS 2.1: https://www.w3.org/TR/CSS2/propidx.html
  "list-style": ["list-style-type", "list-style-position", "list-style-image"],
  margin: ["margin-top", "margin-right", "margin-bottom", "margin-left"],
  outline: ["outline-width", "outline-style", "outline-color"],
  padding: ["padding-top", "padding-right", "padding-bottom", "padding-left"],
  // CSS Backgrounds and Borders Module Level 3: https://www.w3.org/TR/css3-background/
  background: ["background-image", "background-position", "background-size", "background-repeat", "background-origin", "background-clip", "background-attachment", "background-color"],
  border: ["border-top-width", "border-right-width", "border-bottom-width", "border-left-width", "border-width", "border-top-style", "border-right-style", "border-bottom-style", "border-left-style", "border-style", "border-top-color", "border-right-color", "border-bottom-color", "border-left-color", "border-color"],
  "border-color": ["border-top-color", "border-right-color", "border-bottom-color", "border-left-color"],
  "border-style": ["border-top-style", "border-right-style", "border-bottom-style", "border-left-style"],
  "border-width": ["border-top-width", "border-right-width", "border-bottom-width", "border-left-width"],
  "border-top": ["border-top-width", "border-top-style", "border-top-color"],
  "border-right": ["border-right-width", "border-right-style", "border-right-color"],
  "border-bottom": ["border-bottom-width", "border-bottom-style", "border-bottom-color"],
  "border-left": ["border-left-width", "border-left-style", "border-left-color"],
  "border-radius": ["border-top-left-radius", "border-top-right-radius", "border-bottom-right-radius", "border-bottom-left-radius"],
  "border-image": ["border-image-source", "border-image-slice", "border-image-width", "border-image-outset", "border-image-repeat"],
  // CSS Fonts Module Level 3: https://www.w3.org/TR/css3-fonts/
  font: ["font-style", "font-variant-ligatures", "font-variant-alternates", "font-variant-caps", "font-variant-numeric", "font-variant-east-asian", "font-variant", "font-weight", "font-stretch", "font-size", "line-height", "font-family"],
  "font-variant": ["font-variant-ligatures", "font-variant-alternates", "font-variant-caps", "font-variant-numeric", "font-variant-east-asian"],
  // CSS Flexible Box Layout Module Level 1: https://www.w3.org/TR/css3-flexbox-1/
  flex: ["flex-grow", "flex-shrink", "flex-basis"],
  "flex-flow": ["flex-direction", "flex-wrap"],
  // CSS Grid Layout Module Level 1: https://www.w3.org/TR/css-grid-1/
  grid: ["grid-template-rows", "grid-template-columns", "grid-template-areas", "grid-auto-rows", "grid-auto-columns", "grid-auto-flow"],
  "grid-template": ["grid-template-rows", "grid-template-columns", "grid-template-areas"],
  "grid-row": ["grid-row-start", "grid-row-end"],
  "grid-column": ["grid-column-start", "grid-column-end"],
  "grid-area": ["grid-row-start", "grid-column-start", "grid-row-end", "grid-column-end"],
  "grid-gap": ["grid-row-gap", "grid-column-gap"],
  // CSS Masking Module Level 1: https://www.w3.org/TR/css-masking/
  mask: ["mask-image", "mask-mode", "mask-position", "mask-size", "mask-repeat", "mask-origin", "mask-clip"],
  "mask-border": ["mask-border-source", "mask-border-slice", "mask-border-width", "mask-border-outset", "mask-border-repeat", "mask-border-mode"],
  // CSS Multi-column Layout Module: https://www.w3.org/TR/css3-multicol/
  columns: ["column-width", "column-count"],
  "column-rule": ["column-rule-width", "column-rule-style", "column-rule-color"],
  // CSS Scroll Snap Module Level 1: https://www.w3.org/TR/css-scroll-snap-1/
  "scroll-padding": ["scroll-padding-top", "scroll-padding-right", "scroll-padding-bottom", "scroll-padding-left"],
  "scroll-padding-block": ["scroll-padding-block-start", "scroll-padding-block-end"],
  "scroll-padding-inline": ["scroll-padding-inline-start", "scroll-padding-inline-end"],
  "scroll-snap-margin": ["scroll-snap-margin-top", "scroll-snap-margin-right", "scroll-snap-margin-bottom", "scroll-snap-margin-left"],
  "scroll-snap-margin-block": ["scroll-snap-margin-block-start", "scroll-snap-margin-block-end"],
  "scroll-snap-margin-inline": ["scroll-snap-margin-inline-start", "scroll-snap-margin-inline-end"],
  // CSS Speech Module: https://www.w3.org/TR/css3-speech/
  cue: ["cue-before", "cue-after"],
  pause: ["pause-before", "pause-after"],
  rest: ["rest-before", "rest-after"],
  // CSS Text Decoration Module Level 3: https://www.w3.org/TR/css-text-decor-3/
  "text-decoration": ["text-decoration-line", "text-decoration-style", "text-decoration-color"],
  "text-emphasis": ["text-emphasis-style", "text-emphasis-color"],
  // CSS Animations (WD): https://www.w3.org/TR/css3-animations
  animation: ["animation-name", "animation-duration", "animation-timing-function", "animation-delay", "animation-iteration-count", "animation-direction", "animation-fill-mode", "animation-play-state"],
  // CSS Transitions (WD): https://www.w3.org/TR/css3-transitions/
  transition: ["transition-property", "transition-duration", "transition-timing-function", "transition-delay"]
});
function validateNoMixedHand(style) {
  cov_17ukpf0reb.f[0]++;
  const hyphenatedProperties = (cov_17ukpf0reb.s[1]++, Object.keys(style).reduce((acc, property) => {
    cov_17ukpf0reb.f[1]++;
    cov_17ukpf0reb.s[2]++;
    acc[hyphenateStyleName(property)] = property;
    cov_17ukpf0reb.s[3]++;
    return acc;
  }, {}));
  const mixed = (cov_17ukpf0reb.s[4]++, []);
  cov_17ukpf0reb.s[5]++;

  for (const property in hyphenatedProperties) {
    cov_17ukpf0reb.s[6]++;

    if (property in shorthandMap) {
      cov_17ukpf0reb.b[0][0]++;
      cov_17ukpf0reb.s[7]++;

      for (const longhand of shorthandMap[property]) {
        cov_17ukpf0reb.s[8]++;

        if (longhand in hyphenatedProperties) {
          cov_17ukpf0reb.b[1][0]++;
          const long = (cov_17ukpf0reb.s[9]++, hyphenatedProperties[longhand]);
          const short = (cov_17ukpf0reb.s[10]++, hyphenatedProperties[property]);
          cov_17ukpf0reb.s[11]++;
          mixed.push({
            shorthand: {
              property: short,
              value: style[short]
            },
            longhand: {
              property: long,
              value: style[long]
            }
          });
        } else {
          cov_17ukpf0reb.b[1][1]++;
        }
      }
    } else {
      cov_17ukpf0reb.b[0][1]++;
    }
  }

  cov_17ukpf0reb.s[12]++;
  return mixed;
}

var cov_1ufuhsihwc = function () {
  var path = "/Users/rtsao/rtsaoforks/styletron/packages/styletron-engine-atomic/src/sort-css-media-queries.js",
      hash = "84234d0d365a53a38da27547d6fd6b22dea3847f",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = {
    path: "/Users/rtsao/rtsaoforks/styletron/packages/styletron-engine-atomic/src/sort-css-media-queries.js",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 20
        },
        end: {
          line: 5,
          column: 78
        }
      },
      "1": {
        start: {
          line: 6,
          column: 17
        },
        end: {
          line: 6,
          column: 44
        }
      },
      "2": {
        start: {
          line: 7,
          column: 20
        },
        end: {
          line: 7,
          column: 77
        }
      },
      "3": {
        start: {
          line: 8,
          column: 17
        },
        end: {
          line: 8,
          column: 44
        }
      },
      "4": {
        start: {
          line: 10,
          column: 19
        },
        end: {
          line: 10,
          column: 65
        }
      },
      "5": {
        start: {
          line: 11,
          column: 19
        },
        end: {
          line: 11,
          column: 65
        }
      },
      "6": {
        start: {
          line: 13,
          column: 21
        },
        end: {
          line: 13,
          column: 80
        }
      },
      "7": {
        start: {
          line: 14,
          column: 18
        },
        end: {
          line: 14,
          column: 46
        }
      },
      "8": {
        start: {
          line: 15,
          column: 21
        },
        end: {
          line: 15,
          column: 80
        }
      },
      "9": {
        start: {
          line: 16,
          column: 18
        },
        end: {
          line: 16,
          column: 46
        }
      },
      "10": {
        start: {
          line: 18,
          column: 20
        },
        end: {
          line: 18,
          column: 69
        }
      },
      "11": {
        start: {
          line: 19,
          column: 20
        },
        end: {
          line: 19,
          column: 69
        }
      },
      "12": {
        start: {
          line: 21,
          column: 16
        },
        end: {
          line: 21,
          column: 24
        }
      },
      "13": {
        start: {
          line: 22,
          column: 20
        },
        end: {
          line: 22,
          column: 30
        }
      },
      "14": {
        start: {
          line: 23,
          column: 17
        },
        end: {
          line: 23,
          column: 33
        }
      },
      "15": {
        start: {
          line: 26,
          column: 18
        },
        end: {
          line: 26,
          column: 63
        }
      },
      "16": {
        start: {
          line: 27,
          column: 2
        },
        end: {
          line: 29,
          column: 3
        }
      },
      "17": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 28,
          column: 20
        }
      },
      "18": {
        start: {
          line: 30,
          column: 15
        },
        end: {
          line: 30,
          column: 25
        }
      },
      "19": {
        start: {
          line: 31,
          column: 15
        },
        end: {
          line: 31,
          column: 25
        }
      },
      "20": {
        start: {
          line: 32,
          column: 2
        },
        end: {
          line: 46,
          column: 3
        }
      },
      "21": {
        start: {
          line: 34,
          column: 6
        },
        end: {
          line: 34,
          column: 46
        }
      },
      "22": {
        start: {
          line: 35,
          column: 6
        },
        end: {
          line: 35,
          column: 12
        }
      },
      "23": {
        start: {
          line: 38,
          column: 6
        },
        end: {
          line: 38,
          column: 39
        }
      },
      "24": {
        start: {
          line: 39,
          column: 6
        },
        end: {
          line: 39,
          column: 12
        }
      },
      "25": {
        start: {
          line: 41,
          column: 6
        },
        end: {
          line: 41,
          column: 45
        }
      },
      "26": {
        start: {
          line: 42,
          column: 6
        },
        end: {
          line: 42,
          column: 12
        }
      },
      "27": {
        start: {
          line: 44,
          column: 6
        },
        end: {
          line: 44,
          column: 34
        }
      },
      "28": {
        start: {
          line: 45,
          column: 6
        },
        end: {
          line: 45,
          column: 12
        }
      },
      "29": {
        start: {
          line: 47,
          column: 2
        },
        end: {
          line: 47,
          column: 17
        }
      },
      "30": {
        start: {
          line: 55,
          column: 2
        },
        end: {
          line: 62,
          column: 4
        }
      },
      "31": {
        start: {
          line: 56,
          column: 4
        },
        end: {
          line: 60,
          column: 5
        }
      },
      "32": {
        start: {
          line: 57,
          column: 6
        },
        end: {
          line: 57,
          column: 18
        }
      },
      "33": {
        start: {
          line: 58,
          column: 11
        },
        end: {
          line: 60,
          column: 5
        }
      },
      "34": {
        start: {
          line: 59,
          column: 6
        },
        end: {
          line: 59,
          column: 19
        }
      },
      "35": {
        start: {
          line: 61,
          column: 4
        },
        end: {
          line: 61,
          column: 34
        }
      },
      "36": {
        start: {
          line: 66,
          column: 19
        },
        end: {
          line: 66,
          column: 34
        }
      },
      "37": {
        start: {
          line: 67,
          column: 23
        },
        end: {
          line: 67,
          column: 42
        }
      },
      "38": {
        start: {
          line: 68,
          column: 19
        },
        end: {
          line: 68,
          column: 34
        }
      },
      "39": {
        start: {
          line: 69,
          column: 23
        },
        end: {
          line: 69,
          column: 42
        }
      },
      "40": {
        start: {
          line: 71,
          column: 2
        },
        end: {
          line: 79,
          column: 3
        }
      },
      "41": {
        start: {
          line: 72,
          column: 4
        },
        end: {
          line: 74,
          column: 5
        }
      },
      "42": {
        start: {
          line: 73,
          column: 6
        },
        end: {
          line: 73,
          column: 15
        }
      },
      "43": {
        start: {
          line: 75,
          column: 4
        },
        end: {
          line: 77,
          column: 5
        }
      },
      "44": {
        start: {
          line: 76,
          column: 6
        },
        end: {
          line: 76,
          column: 16
        }
      },
      "45": {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 78,
          column: 30
        }
      },
      "46": {
        start: {
          line: 80,
          column: 2
        },
        end: {
          line: 82,
          column: 3
        }
      },
      "47": {
        start: {
          line: 81,
          column: 4
        },
        end: {
          line: 81,
          column: 13
        }
      },
      "48": {
        start: {
          line: 83,
          column: 2
        },
        end: {
          line: 85,
          column: 3
        }
      },
      "49": {
        start: {
          line: 84,
          column: 4
        },
        end: {
          line: 84,
          column: 14
        }
      },
      "50": {
        start: {
          line: 86,
          column: 2
        },
        end: {
          line: 86,
          column: 14
        }
      },
      "51": {
        start: {
          line: 90,
          column: 2
        },
        end: {
          line: 92,
          column: 3
        }
      },
      "52": {
        start: {
          line: 91,
          column: 4
        },
        end: {
          line: 91,
          column: 14
        }
      },
      "53": {
        start: {
          line: 93,
          column: 2
        },
        end: {
          line: 95,
          column: 3
        }
      },
      "54": {
        start: {
          line: 94,
          column: 4
        },
        end: {
          line: 94,
          column: 13
        }
      },
      "55": {
        start: {
          line: 96,
          column: 22
        },
        end: {
          line: 96,
          column: 40
        }
      },
      "56": {
        start: {
          line: 97,
          column: 2
        },
        end: {
          line: 99,
          column: 3
        }
      },
      "57": {
        start: {
          line: 98,
          column: 4
        },
        end: {
          line: 98,
          column: 23
        }
      },
      "58": {
        start: {
          line: 101,
          column: 15
        },
        end: {
          line: 101,
          column: 46
        }
      },
      "59": {
        start: {
          line: 102,
          column: 15
        },
        end: {
          line: 102,
          column: 46
        }
      },
      "60": {
        start: {
          line: 103,
          column: 15
        },
        end: {
          line: 103,
          column: 46
        }
      },
      "61": {
        start: {
          line: 104,
          column: 15
        },
        end: {
          line: 104,
          column: 46
        }
      },
      "62": {
        start: {
          line: 106,
          column: 2
        },
        end: {
          line: 108,
          column: 3
        }
      },
      "63": {
        start: {
          line: 107,
          column: 4
        },
        end: {
          line: 107,
          column: 14
        }
      },
      "64": {
        start: {
          line: 109,
          column: 2
        },
        end: {
          line: 111,
          column: 3
        }
      },
      "65": {
        start: {
          line: 110,
          column: 4
        },
        end: {
          line: 110,
          column: 13
        }
      },
      "66": {
        start: {
          line: 113,
          column: 18
        },
        end: {
          line: 113,
          column: 36
        }
      },
      "67": {
        start: {
          line: 114,
          column: 18
        },
        end: {
          line: 114,
          column: 36
        }
      },
      "68": {
        start: {
          line: 116,
          column: 2
        },
        end: {
          line: 122,
          column: 3
        }
      },
      "69": {
        start: {
          line: 117,
          column: 4
        },
        end: {
          line: 117,
          column: 30
        }
      },
      "70": {
        start: {
          line: 118,
          column: 9
        },
        end: {
          line: 122,
          column: 3
        }
      },
      "71": {
        start: {
          line: 119,
          column: 4
        },
        end: {
          line: 119,
          column: 13
        }
      },
      "72": {
        start: {
          line: 120,
          column: 9
        },
        end: {
          line: 122,
          column: 3
        }
      },
      "73": {
        start: {
          line: 121,
          column: 4
        },
        end: {
          line: 121,
          column: 14
        }
      },
      "74": {
        start: {
          line: 124,
          column: 2
        },
        end: {
          line: 129,
          column: 3
        }
      },
      "75": {
        start: {
          line: 125,
          column: 4
        },
        end: {
          line: 127,
          column: 5
        }
      },
      "76": {
        start: {
          line: 126,
          column: 6
        },
        end: {
          line: 126,
          column: 16
        }
      },
      "77": {
        start: {
          line: 128,
          column: 4
        },
        end: {
          line: 128,
          column: 13
        }
      },
      "78": {
        start: {
          line: 131,
          column: 2
        },
        end: {
          line: 136,
          column: 3
        }
      },
      "79": {
        start: {
          line: 132,
          column: 4
        },
        end: {
          line: 134,
          column: 5
        }
      },
      "80": {
        start: {
          line: 133,
          column: 6
        },
        end: {
          line: 133,
          column: 15
        }
      },
      "81": {
        start: {
          line: 135,
          column: 4
        },
        end: {
          line: 135,
          column: 14
        }
      },
      "82": {
        start: {
          line: 138,
          column: 2
        },
        end: {
          line: 138,
          column: 28
        }
      }
    },
    fnMap: {
      "0": {
        name: "_getQueryLength",
        decl: {
          start: {
            line: 25,
            column: 9
          },
          end: {
            line: 25,
            column: 24
          }
        },
        loc: {
          start: {
            line: 25,
            column: 41
          },
          end: {
            line: 48,
            column: 1
          }
        },
        line: 25
      },
      "1": {
        name: "_testQuery",
        decl: {
          start: {
            line: 50,
            column: 9
          },
          end: {
            line: 50,
            column: 19
          }
        },
        loc: {
          start: {
            line: 54,
            column: 2
          },
          end: {
            line: 63,
            column: 1
          }
        },
        line: 54
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 55,
            column: 9
          },
          end: {
            line: 55,
            column: 10
          }
        },
        loc: {
          start: {
            line: 55,
            column: 33
          },
          end: {
            line: 62,
            column: 3
          }
        },
        line: 55
      },
      "3": {
        name: "_testIsPrint",
        decl: {
          start: {
            line: 65,
            column: 9
          },
          end: {
            line: 65,
            column: 21
          }
        },
        loc: {
          start: {
            line: 65,
            column: 44
          },
          end: {
            line: 87,
            column: 1
          }
        },
        line: 65
      },
      "4": {
        name: "sortCSSmq",
        decl: {
          start: {
            line: 89,
            column: 24
          },
          end: {
            line: 89,
            column: 33
          }
        },
        loc: {
          start: {
            line: 89,
            column: 56
          },
          end: {
            line: 139,
            column: 1
          }
        },
        line: 89
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 27,
            column: 2
          },
          end: {
            line: 29,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 2
          },
          end: {
            line: 29,
            column: 3
          }
        }, {
          start: {
            line: 27,
            column: 2
          },
          end: {
            line: 29,
            column: 3
          }
        }],
        line: 27
      },
      "1": {
        loc: {
          start: {
            line: 32,
            column: 2
          },
          end: {
            line: 46,
            column: 3
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 35,
            column: 12
          }
        }, {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 14
          }
        }, {
          start: {
            line: 37,
            column: 4
          },
          end: {
            line: 39,
            column: 12
          }
        }, {
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 42,
            column: 12
          }
        }, {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 45,
            column: 12
          }
        }],
        line: 32
      },
      "2": {
        loc: {
          start: {
            line: 56,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        }, {
          start: {
            line: 56,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        }],
        line: 56
      },
      "3": {
        loc: {
          start: {
            line: 58,
            column: 11
          },
          end: {
            line: 60,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 11
          },
          end: {
            line: 60,
            column: 5
          }
        }, {
          start: {
            line: 58,
            column: 11
          },
          end: {
            line: 60,
            column: 5
          }
        }],
        line: 58
      },
      "4": {
        loc: {
          start: {
            line: 71,
            column: 2
          },
          end: {
            line: 79,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 2
          },
          end: {
            line: 79,
            column: 3
          }
        }, {
          start: {
            line: 71,
            column: 2
          },
          end: {
            line: 79,
            column: 3
          }
        }],
        line: 71
      },
      "5": {
        loc: {
          start: {
            line: 71,
            column: 6
          },
          end: {
            line: 71,
            column: 26
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 71,
            column: 6
          },
          end: {
            line: 71,
            column: 14
          }
        }, {
          start: {
            line: 71,
            column: 18
          },
          end: {
            line: 71,
            column: 26
          }
        }],
        line: 71
      },
      "6": {
        loc: {
          start: {
            line: 72,
            column: 4
          },
          end: {
            line: 74,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 4
          },
          end: {
            line: 74,
            column: 5
          }
        }, {
          start: {
            line: 72,
            column: 4
          },
          end: {
            line: 74,
            column: 5
          }
        }],
        line: 72
      },
      "7": {
        loc: {
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 72,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 72,
            column: 21
          }
        }, {
          start: {
            line: 72,
            column: 25
          },
          end: {
            line: 72,
            column: 37
          }
        }],
        line: 72
      },
      "8": {
        loc: {
          start: {
            line: 75,
            column: 4
          },
          end: {
            line: 77,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 4
          },
          end: {
            line: 77,
            column: 5
          }
        }, {
          start: {
            line: 75,
            column: 4
          },
          end: {
            line: 77,
            column: 5
          }
        }],
        line: 75
      },
      "9": {
        loc: {
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 75,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 75,
            column: 20
          }
        }, {
          start: {
            line: 75,
            column: 24
          },
          end: {
            line: 75,
            column: 37
          }
        }],
        line: 75
      },
      "10": {
        loc: {
          start: {
            line: 80,
            column: 2
          },
          end: {
            line: 82,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 2
          },
          end: {
            line: 82,
            column: 3
          }
        }, {
          start: {
            line: 80,
            column: 2
          },
          end: {
            line: 82,
            column: 3
          }
        }],
        line: 80
      },
      "11": {
        loc: {
          start: {
            line: 83,
            column: 2
          },
          end: {
            line: 85,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 2
          },
          end: {
            line: 85,
            column: 3
          }
        }, {
          start: {
            line: 83,
            column: 2
          },
          end: {
            line: 85,
            column: 3
          }
        }],
        line: 83
      },
      "12": {
        loc: {
          start: {
            line: 90,
            column: 2
          },
          end: {
            line: 92,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 2
          },
          end: {
            line: 92,
            column: 3
          }
        }, {
          start: {
            line: 90,
            column: 2
          },
          end: {
            line: 92,
            column: 3
          }
        }],
        line: 90
      },
      "13": {
        loc: {
          start: {
            line: 93,
            column: 2
          },
          end: {
            line: 95,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 2
          },
          end: {
            line: 95,
            column: 3
          }
        }, {
          start: {
            line: 93,
            column: 2
          },
          end: {
            line: 95,
            column: 3
          }
        }],
        line: 93
      },
      "14": {
        loc: {
          start: {
            line: 97,
            column: 2
          },
          end: {
            line: 99,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 97,
            column: 2
          },
          end: {
            line: 99,
            column: 3
          }
        }, {
          start: {
            line: 97,
            column: 2
          },
          end: {
            line: 99,
            column: 3
          }
        }],
        line: 97
      },
      "15": {
        loc: {
          start: {
            line: 101,
            column: 15
          },
          end: {
            line: 101,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 101,
            column: 15
          },
          end: {
            line: 101,
            column: 28
          }
        }, {
          start: {
            line: 101,
            column: 32
          },
          end: {
            line: 101,
            column: 46
          }
        }],
        line: 101
      },
      "16": {
        loc: {
          start: {
            line: 102,
            column: 15
          },
          end: {
            line: 102,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 102,
            column: 15
          },
          end: {
            line: 102,
            column: 28
          }
        }, {
          start: {
            line: 102,
            column: 32
          },
          end: {
            line: 102,
            column: 46
          }
        }],
        line: 102
      },
      "17": {
        loc: {
          start: {
            line: 103,
            column: 15
          },
          end: {
            line: 103,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 103,
            column: 15
          },
          end: {
            line: 103,
            column: 28
          }
        }, {
          start: {
            line: 103,
            column: 32
          },
          end: {
            line: 103,
            column: 46
          }
        }],
        line: 103
      },
      "18": {
        loc: {
          start: {
            line: 104,
            column: 15
          },
          end: {
            line: 104,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 104,
            column: 15
          },
          end: {
            line: 104,
            column: 28
          }
        }, {
          start: {
            line: 104,
            column: 32
          },
          end: {
            line: 104,
            column: 46
          }
        }],
        line: 104
      },
      "19": {
        loc: {
          start: {
            line: 106,
            column: 2
          },
          end: {
            line: 108,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 2
          },
          end: {
            line: 108,
            column: 3
          }
        }, {
          start: {
            line: 106,
            column: 2
          },
          end: {
            line: 108,
            column: 3
          }
        }],
        line: 106
      },
      "20": {
        loc: {
          start: {
            line: 106,
            column: 6
          },
          end: {
            line: 106,
            column: 18
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 106,
            column: 6
          },
          end: {
            line: 106,
            column: 10
          }
        }, {
          start: {
            line: 106,
            column: 14
          },
          end: {
            line: 106,
            column: 18
          }
        }],
        line: 106
      },
      "21": {
        loc: {
          start: {
            line: 109,
            column: 2
          },
          end: {
            line: 111,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 109,
            column: 2
          },
          end: {
            line: 111,
            column: 3
          }
        }, {
          start: {
            line: 109,
            column: 2
          },
          end: {
            line: 111,
            column: 3
          }
        }],
        line: 109
      },
      "22": {
        loc: {
          start: {
            line: 109,
            column: 6
          },
          end: {
            line: 109,
            column: 18
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 109,
            column: 6
          },
          end: {
            line: 109,
            column: 10
          }
        }, {
          start: {
            line: 109,
            column: 14
          },
          end: {
            line: 109,
            column: 18
          }
        }],
        line: 109
      },
      "23": {
        loc: {
          start: {
            line: 116,
            column: 2
          },
          end: {
            line: 122,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 2
          },
          end: {
            line: 122,
            column: 3
          }
        }, {
          start: {
            line: 116,
            column: 2
          },
          end: {
            line: 122,
            column: 3
          }
        }],
        line: 116
      },
      "24": {
        loc: {
          start: {
            line: 116,
            column: 6
          },
          end: {
            line: 116,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 116,
            column: 6
          },
          end: {
            line: 116,
            column: 26
          }
        }, {
          start: {
            line: 116,
            column: 30
          },
          end: {
            line: 116,
            column: 50
          }
        }],
        line: 116
      },
      "25": {
        loc: {
          start: {
            line: 118,
            column: 9
          },
          end: {
            line: 122,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 9
          },
          end: {
            line: 122,
            column: 3
          }
        }, {
          start: {
            line: 118,
            column: 9
          },
          end: {
            line: 122,
            column: 3
          }
        }],
        line: 118
      },
      "26": {
        loc: {
          start: {
            line: 120,
            column: 9
          },
          end: {
            line: 122,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 9
          },
          end: {
            line: 122,
            column: 3
          }
        }, {
          start: {
            line: 120,
            column: 9
          },
          end: {
            line: 122,
            column: 3
          }
        }],
        line: 120
      },
      "27": {
        loc: {
          start: {
            line: 124,
            column: 2
          },
          end: {
            line: 129,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 2
          },
          end: {
            line: 129,
            column: 3
          }
        }, {
          start: {
            line: 124,
            column: 2
          },
          end: {
            line: 129,
            column: 3
          }
        }],
        line: 124
      },
      "28": {
        loc: {
          start: {
            line: 125,
            column: 4
          },
          end: {
            line: 127,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 4
          },
          end: {
            line: 127,
            column: 5
          }
        }, {
          start: {
            line: 125,
            column: 4
          },
          end: {
            line: 127,
            column: 5
          }
        }],
        line: 125
      },
      "29": {
        loc: {
          start: {
            line: 131,
            column: 2
          },
          end: {
            line: 136,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 2
          },
          end: {
            line: 136,
            column: 3
          }
        }, {
          start: {
            line: 131,
            column: 2
          },
          end: {
            line: 136,
            column: 3
          }
        }],
        line: 131
      },
      "30": {
        loc: {
          start: {
            line: 132,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 132,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        }, {
          start: {
            line: 132,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        }],
        line: 132
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0, 0, 0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0]
    },
    _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

// adapted from https://github.com/dutchenkoOleg/sort-css-media-queries
const minMaxWidth = (cov_1ufuhsihwc.s[0]++, /(!?\(\s*min(-device-)?-width).+\(\s*max(-device)?-width/i);
const minWidth = (cov_1ufuhsihwc.s[1]++, /\(\s*min(-device)?-width/i);
const maxMinWidth = (cov_1ufuhsihwc.s[2]++, /(!?\(\s*max(-device)?-width).+\(\s*min(-device)?-width/i);
const maxWidth = (cov_1ufuhsihwc.s[3]++, /\(\s*max(-device)?-width/i);
const isMinWidth = (cov_1ufuhsihwc.s[4]++, _testQuery(minMaxWidth, maxMinWidth, minWidth));
const isMaxWidth = (cov_1ufuhsihwc.s[5]++, _testQuery(maxMinWidth, minMaxWidth, maxWidth));
const minMaxHeight = (cov_1ufuhsihwc.s[6]++, /(!?\(\s*min(-device)?-height).+\(\s*max(-device)?-height/i);
const minHeight = (cov_1ufuhsihwc.s[7]++, /\(\s*min(-device)?-height/i);
const maxMinHeight = (cov_1ufuhsihwc.s[8]++, /(!?\(\s*max(-device)?-height).+\(\s*min(-device)?-height/i);
const maxHeight = (cov_1ufuhsihwc.s[9]++, /\(\s*max(-device)?-height/i);
const isMinHeight = (cov_1ufuhsihwc.s[10]++, _testQuery(minMaxHeight, maxMinHeight, minHeight));
const isMaxHeight = (cov_1ufuhsihwc.s[11]++, _testQuery(maxMinHeight, minMaxHeight, maxHeight));
const isPrint = (cov_1ufuhsihwc.s[12]++, /print/i);
const isPrintOnly = (cov_1ufuhsihwc.s[13]++, /^print$/i);
const maxValue = (cov_1ufuhsihwc.s[14]++, Number.MAX_VALUE);

function _getQueryLength(length) {
  cov_1ufuhsihwc.f[0]++;
  const matches = (cov_1ufuhsihwc.s[15]++, /(-?\d*\.?\d+)(ch|em|ex|px|rem)/.exec(length));
  cov_1ufuhsihwc.s[16]++;

  if (matches === null) {
    cov_1ufuhsihwc.b[0][0]++;
    cov_1ufuhsihwc.s[17]++;
    return maxValue;
  } else {
    cov_1ufuhsihwc.b[0][1]++;
  }

  let number = (cov_1ufuhsihwc.s[18]++, matches[1]);
  const unit = (cov_1ufuhsihwc.s[19]++, matches[2]);
  cov_1ufuhsihwc.s[20]++;

  switch (unit) {
    case "ch":
      cov_1ufuhsihwc.b[1][0]++;
      cov_1ufuhsihwc.s[21]++;
      number = parseFloat(number) * 8.8984375;
      cov_1ufuhsihwc.s[22]++;
      break;

    case "em":
      cov_1ufuhsihwc.b[1][1]++;

    case "rem":
      cov_1ufuhsihwc.b[1][2]++;
      cov_1ufuhsihwc.s[23]++;
      number = parseFloat(number) * 16;
      cov_1ufuhsihwc.s[24]++;
      break;

    case "ex":
      cov_1ufuhsihwc.b[1][3]++;
      cov_1ufuhsihwc.s[25]++;
      number = parseFloat(number) * 8.296875;
      cov_1ufuhsihwc.s[26]++;
      break;

    case "px":
      cov_1ufuhsihwc.b[1][4]++;
      cov_1ufuhsihwc.s[27]++;
      number = parseFloat(number);
      cov_1ufuhsihwc.s[28]++;
      break;
  }

  cov_1ufuhsihwc.s[29]++;
  return +number;
}

function _testQuery(doubleTestTrue, doubleTestFalse, singleTest) {
  cov_1ufuhsihwc.f[1]++;
  cov_1ufuhsihwc.s[30]++;
  return function (query) {
    cov_1ufuhsihwc.f[2]++;
    cov_1ufuhsihwc.s[31]++;

    if (doubleTestTrue.test(query)) {
      cov_1ufuhsihwc.b[2][0]++;
      cov_1ufuhsihwc.s[32]++;
      return true;
    } else {
      cov_1ufuhsihwc.b[2][1]++;
      cov_1ufuhsihwc.s[33]++;

      if (doubleTestFalse.test(query)) {
        cov_1ufuhsihwc.b[3][0]++;
        cov_1ufuhsihwc.s[34]++;
        return false;
      } else {
        cov_1ufuhsihwc.b[3][1]++;
      }
    }

    cov_1ufuhsihwc.s[35]++;
    return singleTest.test(query);
  };
}

function _testIsPrint(a, b) {
  cov_1ufuhsihwc.f[3]++;
  const isPrintA = (cov_1ufuhsihwc.s[36]++, isPrint.test(a));
  const isPrintOnlyA = (cov_1ufuhsihwc.s[37]++, isPrintOnly.test(a));
  const isPrintB = (cov_1ufuhsihwc.s[38]++, isPrint.test(b));
  const isPrintOnlyB = (cov_1ufuhsihwc.s[39]++, isPrintOnly.test(b));
  cov_1ufuhsihwc.s[40]++;

  if ((cov_1ufuhsihwc.b[5][0]++, isPrintA) && (cov_1ufuhsihwc.b[5][1]++, isPrintB)) {
    cov_1ufuhsihwc.b[4][0]++;
    cov_1ufuhsihwc.s[41]++;

    if ((cov_1ufuhsihwc.b[7][0]++, !isPrintOnlyA) && (cov_1ufuhsihwc.b[7][1]++, isPrintOnlyB)) {
      cov_1ufuhsihwc.b[6][0]++;
      cov_1ufuhsihwc.s[42]++;
      return 1;
    } else {
      cov_1ufuhsihwc.b[6][1]++;
    }

    cov_1ufuhsihwc.s[43]++;

    if ((cov_1ufuhsihwc.b[9][0]++, isPrintOnlyA) && (cov_1ufuhsihwc.b[9][1]++, !isPrintOnlyB)) {
      cov_1ufuhsihwc.b[8][0]++;
      cov_1ufuhsihwc.s[44]++;
      return -1;
    } else {
      cov_1ufuhsihwc.b[8][1]++;
    }

    cov_1ufuhsihwc.s[45]++;
    return a.localeCompare(b);
  } else {
    cov_1ufuhsihwc.b[4][1]++;
  }

  cov_1ufuhsihwc.s[46]++;

  if (isPrintA) {
    cov_1ufuhsihwc.b[10][0]++;
    cov_1ufuhsihwc.s[47]++;
    return 1;
  } else {
    cov_1ufuhsihwc.b[10][1]++;
  }

  cov_1ufuhsihwc.s[48]++;

  if (isPrintB) {
    cov_1ufuhsihwc.b[11][0]++;
    cov_1ufuhsihwc.s[49]++;
    return -1;
  } else {
    cov_1ufuhsihwc.b[11][1]++;
  }

  cov_1ufuhsihwc.s[50]++;
  return null;
}

function sortCSSmq(a, b) {
  cov_1ufuhsihwc.f[4]++;
  cov_1ufuhsihwc.s[51]++;

  if (a === "") {
    cov_1ufuhsihwc.b[12][0]++;
    cov_1ufuhsihwc.s[52]++;
    return -1;
  } else {
    cov_1ufuhsihwc.b[12][1]++;
  }

  cov_1ufuhsihwc.s[53]++;

  if (b === "") {
    cov_1ufuhsihwc.b[13][0]++;
    cov_1ufuhsihwc.s[54]++;
    return 1;
  } else {
    cov_1ufuhsihwc.b[13][1]++;
  }

  const testIsPrint = (cov_1ufuhsihwc.s[55]++, _testIsPrint(a, b));
  cov_1ufuhsihwc.s[56]++;

  if (testIsPrint !== null) {
    cov_1ufuhsihwc.b[14][0]++;
    cov_1ufuhsihwc.s[57]++;
    return testIsPrint;
  } else {
    cov_1ufuhsihwc.b[14][1]++;
  }

  const minA = (cov_1ufuhsihwc.s[58]++, (cov_1ufuhsihwc.b[15][0]++, isMinWidth(a)) || (cov_1ufuhsihwc.b[15][1]++, isMinHeight(a)));
  const maxA = (cov_1ufuhsihwc.s[59]++, (cov_1ufuhsihwc.b[16][0]++, isMaxWidth(a)) || (cov_1ufuhsihwc.b[16][1]++, isMaxHeight(a)));
  const minB = (cov_1ufuhsihwc.s[60]++, (cov_1ufuhsihwc.b[17][0]++, isMinWidth(b)) || (cov_1ufuhsihwc.b[17][1]++, isMinHeight(b)));
  const maxB = (cov_1ufuhsihwc.s[61]++, (cov_1ufuhsihwc.b[18][0]++, isMaxWidth(b)) || (cov_1ufuhsihwc.b[18][1]++, isMaxHeight(b)));
  cov_1ufuhsihwc.s[62]++;

  if ((cov_1ufuhsihwc.b[20][0]++, minA) && (cov_1ufuhsihwc.b[20][1]++, maxB)) {
    cov_1ufuhsihwc.b[19][0]++;
    cov_1ufuhsihwc.s[63]++;
    return -1;
  } else {
    cov_1ufuhsihwc.b[19][1]++;
  }

  cov_1ufuhsihwc.s[64]++;

  if ((cov_1ufuhsihwc.b[22][0]++, maxA) && (cov_1ufuhsihwc.b[22][1]++, minB)) {
    cov_1ufuhsihwc.b[21][0]++;
    cov_1ufuhsihwc.s[65]++;
    return 1;
  } else {
    cov_1ufuhsihwc.b[21][1]++;
  }

  const lengthA = (cov_1ufuhsihwc.s[66]++, _getQueryLength(a));
  const lengthB = (cov_1ufuhsihwc.s[67]++, _getQueryLength(b));
  cov_1ufuhsihwc.s[68]++;

  if ((cov_1ufuhsihwc.b[24][0]++, lengthA === maxValue) && (cov_1ufuhsihwc.b[24][1]++, lengthB === maxValue)) {
    cov_1ufuhsihwc.b[23][0]++;
    cov_1ufuhsihwc.s[69]++;
    return a.localeCompare(b);
  } else {
    cov_1ufuhsihwc.b[23][1]++;
    cov_1ufuhsihwc.s[70]++;

    if (lengthA === maxValue) {
      cov_1ufuhsihwc.b[25][0]++;
      cov_1ufuhsihwc.s[71]++;
      return 1;
    } else {
      cov_1ufuhsihwc.b[25][1]++;
      cov_1ufuhsihwc.s[72]++;

      if (lengthB === maxValue) {
        cov_1ufuhsihwc.b[26][0]++;
        cov_1ufuhsihwc.s[73]++;
        return -1;
      } else {
        cov_1ufuhsihwc.b[26][1]++;
      }
    }
  }

  cov_1ufuhsihwc.s[74]++;

  if (lengthA > lengthB) {
    cov_1ufuhsihwc.b[27][0]++;
    cov_1ufuhsihwc.s[75]++;

    if (maxA) {
      cov_1ufuhsihwc.b[28][0]++;
      cov_1ufuhsihwc.s[76]++;
      return -1;
    } else {
      cov_1ufuhsihwc.b[28][1]++;
    }

    cov_1ufuhsihwc.s[77]++;
    return 1;
  } else {
    cov_1ufuhsihwc.b[27][1]++;
  }

  cov_1ufuhsihwc.s[78]++;

  if (lengthA < lengthB) {
    cov_1ufuhsihwc.b[29][0]++;
    cov_1ufuhsihwc.s[79]++;

    if (maxA) {
      cov_1ufuhsihwc.b[30][0]++;
      cov_1ufuhsihwc.s[80]++;
      return 1;
    } else {
      cov_1ufuhsihwc.b[30][1]++;
    }

    cov_1ufuhsihwc.s[81]++;
    return -1;
  } else {
    cov_1ufuhsihwc.b[29][1]++;
  }

  cov_1ufuhsihwc.s[82]++;
  return a.localeCompare(b);
}

test("validateNoMixedHand", t => {
  t.deepEqual(validateNoMixedHand({
    border: "red",
    borderColor: "blue",
    borderTopColor: "green"
  }), [{
    shorthand: {
      property: "border",
      value: "red"
    },
    longhand: {
      property: "borderTopColor",
      value: "green"
    }
  }, {
    shorthand: {
      property: "border",
      value: "red"
    },
    longhand: {
      property: "borderColor",
      value: "blue"
    }
  }, {
    shorthand: {
      property: "borderColor",
      value: "blue"
    },
    longhand: {
      property: "borderTopColor",
      value: "green"
    }
  }]);
  t.end();
});
test("sortMq simple", t => {
  const receivedOrder = ["screen and (max-width: 640px)", "screen and (min-width: 980px)", "screen and (max-width: 980px)", "screen and (max-width: 768px)", "screen and (min-width: 640px)", "screen and (min-width: 1280px)", "screen and (min-width: 768px)", "screen and (max-width: 1280px)"];
  const expectedOrder = ["screen and (min-width: 640px)", "screen and (min-width: 768px)", "screen and (min-width: 980px)", "screen and (min-width: 1280px)", "screen and (max-width: 1280px)", "screen and (max-width: 980px)", "screen and (max-width: 768px)", "screen and (max-width: 640px)"];
  t.deepEqual(receivedOrder.sort(sortCSSmq), expectedOrder);
  t.end();
});
test("sortMq simple 2", t => {
  const receivedOrder = ["screen and (max-width: 640px)", "screen and (max-width: 640px)", "screen and (min-width: 1280px)", "screen and (max-width: 640px)"];
  const expectedOrder = ["screen and (min-width: 1280px)", "screen and (max-width: 640px)", "screen and (max-width: 640px)", "screen and (max-width: 640px)"];
  t.deepEqual(receivedOrder.sort(sortCSSmq), expectedOrder);
  t.end();
});
test("sortMq no media type", t => {
  const receivedOrder = ["(min-width: 980px)", "(min-width: 640px)", "(min-width: 768px)"];
  const expectedOrder = ["(min-width: 640px)", "(min-width: 768px)", "(min-width: 980px)"];
  t.deepEqual(receivedOrder.sort(sortCSSmq), expectedOrder);
  t.end();
});
test("sortMq without dimension", t => {
  const receivedOrder = ["tv", "print and (orientation: landscape)", "print and (orientation: portrait)", "print and (orientation: portrait)", "screen and (orientation: landscape)", "print", "screen and (orientation: portrait)", "print and (orientation: landscape)", "print and (orientation: portrait)"];
  const expectedOrder = ["screen and (orientation: landscape)", "screen and (orientation: portrait)", "tv", "print", "print and (orientation: landscape)", "print and (orientation: landscape)", "print and (orientation: portrait)", "print and (orientation: portrait)", "print and (orientation: portrait)"];
  t.deepEqual(receivedOrder.sort(sortCSSmq), expectedOrder);
  t.end();
});
test("mixed", t => {
  const receivedOrder = ["tv", "print and (orientation: landscape)", "screen and (min-width: 1280px)", "screen and (max-width: 640px)", "screen and (orientation: landscape)", "print", "screen and (orientation: portrait)", "screen and (min-width: 768px)", "screen and (max-width: 1280px)", "print and (orientation: portrait)"];
  const expectedOrder = ["screen and (min-width: 768px)", "screen and (min-width: 1280px)", "screen and (max-width: 1280px)", "screen and (max-width: 640px)", "screen and (orientation: landscape)", "screen and (orientation: portrait)", "tv", "print", "print and (orientation: landscape)", "print and (orientation: portrait)"];
  t.deepEqual(receivedOrder.sort(sortCSSmq), expectedOrder);
  t.end();
});

var cov_1taxq8nrvn = function () {
  var path = "/Users/rtsao/rtsaoforks/styletron/packages/styletron-engine-atomic/src/sequential-id-generator.js",
      hash = "a5f31682a037cfde0d89a08942df51d199407116",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = {
    path: "/Users/rtsao/rtsaoforks/styletron/packages/styletron-engine-atomic/src/sequential-id-generator.js",
    statementMap: {
      "0": {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 12,
          column: 25
        }
      },
      "1": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "2": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 22
        }
      },
      "3": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 15,
          column: 20
        }
      },
      "4": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "5": {
        start: {
          line: 20,
          column: 15
        },
        end: {
          line: 20,
          column: 44
        }
      },
      "6": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 21,
          column: 52
        }
      },
      "7": {
        start: {
          line: 25,
          column: 15
        },
        end: {
          line: 25,
          column: 39
        }
      },
      "8": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 29,
          column: 5
        }
      },
      "9": {
        start: {
          line: 27,
          column: 6
        },
        end: {
          line: 27,
          column: 40
        }
      },
      "10": {
        start: {
          line: 28,
          column: 6
        },
        end: {
          line: 28,
          column: 48
        }
      },
      "11": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 30,
          column: 17
        }
      },
      "12": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 31,
          column: 14
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 2
          },
          end: {
            line: 10,
            column: 3
          }
        },
        loc: {
          start: {
            line: 10,
            column: 35
          },
          end: {
            line: 17,
            column: 3
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 19,
            column: 2
          },
          end: {
            line: 19,
            column: 3
          }
        },
        loc: {
          start: {
            line: 19,
            column: 9
          },
          end: {
            line: 22,
            column: 3
          }
        },
        line: 19
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 24,
            column: 2
          },
          end: {
            line: 24,
            column: 3
          }
        },
        loc: {
          start: {
            line: 24,
            column: 14
          },
          end: {
            line: 32,
            column: 3
          }
        },
        line: 24
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 10,
            column: 14
          },
          end: {
            line: 10,
            column: 33
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 10,
            column: 31
          },
          end: {
            line: 10,
            column: 33
          }
        }],
        line: 10
      },
      "1": {
        loc: {
          start: {
            line: 21,
            column: 11
          },
          end: {
            line: 21,
            column: 51
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 21,
            column: 25
          },
          end: {
            line: 21,
            column: 46
          }
        }, {
          start: {
            line: 21,
            column: 49
          },
          end: {
            line: 21,
            column: 51
          }
        }],
        line: 21
      },
      "2": {
        loc: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        }, {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        }],
        line: 26
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0]
    },
    _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

class SequentialIDGenerator {
  constructor(prefix$$1 = (cov_1taxq8nrvn.b[0][0]++, "")) {
    cov_1taxq8nrvn.f[0]++;
    cov_1taxq8nrvn.s[0]++;
    // ensure start with "ae" so "ad" is never produced
    this.prefix = prefix$$1;
    cov_1taxq8nrvn.s[1]++;
    this.count = 0;
    cov_1taxq8nrvn.s[2]++;
    this.offset = 374;
    cov_1taxq8nrvn.s[3]++;
    this.msb = 1295;
    cov_1taxq8nrvn.s[4]++;
    this.power = 2;
  }

  next() {
    cov_1taxq8nrvn.f[1]++;
    const id = (cov_1taxq8nrvn.s[5]++, this.increment().toString(36));
    cov_1taxq8nrvn.s[6]++;
    return this.prefix ? (cov_1taxq8nrvn.b[1][0]++, `${this.prefix}${id}`) : (cov_1taxq8nrvn.b[1][1]++, id);
  }

  increment() {
    cov_1taxq8nrvn.f[2]++;
    const id = (cov_1taxq8nrvn.s[7]++, this.count + this.offset);
    cov_1taxq8nrvn.s[8]++;

    if (id === this.msb) {
      cov_1taxq8nrvn.b[2][0]++;
      cov_1taxq8nrvn.s[9]++;
      this.offset += (this.msb + 1) * 9;
      cov_1taxq8nrvn.s[10]++;
      this.msb = Math.pow(36, ++this.power) - 1;
    } else {
      cov_1taxq8nrvn.b[2][1]++;
    }

    cov_1taxq8nrvn.s[11]++;
    this.count++;
    cov_1taxq8nrvn.s[12]++;
    return id;
  }

}

var cov_28x0dx09ft = function () {
  var path = "/Users/rtsao/rtsaoforks/styletron/packages/styletron-engine-atomic/src/cache.js",
      hash = "004af7401192ce94600882fb73a536694e40dda4",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = {
    path: "/Users/rtsao/rtsaoforks/styletron/packages/styletron-engine-atomic/src/cache.js",
    statementMap: {
      "0": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 18,
          column: 35
        }
      },
      "1": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 19,
          column: 33
        }
      },
      "2": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 20,
          column: 33
        }
      },
      "3": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 21,
          column: 30
        }
      },
      "4": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 22,
          column: 21
        }
      },
      "5": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 34,
          column: 5
        }
      },
      "6": {
        start: {
          line: 27,
          column: 20
        },
        end: {
          line: 27,
          column: 64
        }
      },
      "7": {
        start: {
          line: 28,
          column: 6
        },
        end: {
          line: 28,
          column: 22
        }
      },
      "8": {
        start: {
          line: 29,
          column: 6
        },
        end: {
          line: 29,
          column: 37
        }
      },
      "9": {
        start: {
          line: 30,
          column: 6
        },
        end: {
          line: 30,
          column: 40
        }
      },
      "10": {
        start: {
          line: 31,
          column: 28
        },
        end: {
          line: 31,
          column: 61
        }
      },
      "11": {
        start: {
          line: 32,
          column: 6
        },
        end: {
          line: 32,
          column: 31
        }
      },
      "12": {
        start: {
          line: 33,
          column: 6
        },
        end: {
          line: 33,
          column: 49
        }
      },
      "13": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 35,
          column: 28
        }
      },
      "14": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 39,
          column: 32
        }
      },
      "15": {
        start: {
          line: 53,
          column: 4
        },
        end: {
          line: 53,
          column: 20
        }
      },
      "16": {
        start: {
          line: 54,
          column: 4
        },
        end: {
          line: 54,
          column: 35
        }
      },
      "17": {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 55,
          column: 33
        }
      },
      "18": {
        start: {
          line: 59,
          column: 19
        },
        end: {
          line: 59,
          column: 34
        }
      },
      "19": {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 62,
          column: 5
        }
      },
      "20": {
        start: {
          line: 61,
          column: 6
        },
        end: {
          line: 61,
          column: 20
        }
      },
      "21": {
        start: {
          line: 63,
          column: 15
        },
        end: {
          line: 63,
          column: 38
        }
      },
      "22": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 64,
          column: 25
        }
      },
      "23": {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 65,
          column: 37
        }
      },
      "24": {
        start: {
          line: 66,
          column: 4
        },
        end: {
          line: 66,
          column: 14
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 13,
            column: 2
          },
          end: {
            line: 13,
            column: 3
          }
        },
        loc: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 23,
            column: 3
          }
        },
        line: 17
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 25,
            column: 2
          },
          end: {
            line: 25,
            column: 3
          }
        },
        loc: {
          start: {
            line: 25,
            column: 34
          },
          end: {
            line: 36,
            column: 3
          }
        },
        line: 25
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 38,
            column: 2
          },
          end: {
            line: 38,
            column: 3
          }
        },
        loc: {
          start: {
            line: 38,
            column: 23
          },
          end: {
            line: 40,
            column: 3
          }
        },
        line: 38
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 49,
            column: 2
          },
          end: {
            line: 49,
            column: 3
          }
        },
        loc: {
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 56,
            column: 3
          }
        },
        line: 52
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 58,
            column: 2
          },
          end: {
            line: 58,
            column: 3
          }
        },
        loc: {
          start: {
            line: 58,
            column: 34
          },
          end: {
            line: 67,
            column: 3
          }
        },
        line: 58
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        }, {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        }],
        line: 26
      },
      "1": {
        loc: {
          start: {
            line: 60,
            column: 4
          },
          end: {
            line: 62,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 4
          },
          end: {
            line: 62,
            column: 5
          }
        }, {
          start: {
            line: 60,
            column: 4
          },
          end: {
            line: 62,
            column: 5
          }
        }],
        line: 60
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

class MultiCache {
  constructor(idGenerator, onNewCache, onNewValue) {
    cov_28x0dx09ft.f[0]++;
    cov_28x0dx09ft.s[0]++;
    this.idGenerator = idGenerator;
    cov_28x0dx09ft.s[1]++;
    this.onNewCache = onNewCache;
    cov_28x0dx09ft.s[2]++;
    this.onNewValue = onNewValue;
    cov_28x0dx09ft.s[3]++;
    this.sortedCacheKeys = [];
    cov_28x0dx09ft.s[4]++;
    this.caches = {};
  }

  getCache(key) {
    cov_28x0dx09ft.f[1]++;
    cov_28x0dx09ft.s[5]++;

    if (!this.caches[key]) {
      cov_28x0dx09ft.b[0][0]++;
      const cache = (cov_28x0dx09ft.s[6]++, new Cache(this.idGenerator, this.onNewValue));
      cov_28x0dx09ft.s[7]++;
      cache.key = key;
      cov_28x0dx09ft.s[8]++;
      this.sortedCacheKeys.push(key);
      cov_28x0dx09ft.s[9]++;
      this.sortedCacheKeys.sort(sortCSSmq);
      const insertAtIndex = (cov_28x0dx09ft.s[10]++, this.sortedCacheKeys.indexOf(key));
      cov_28x0dx09ft.s[11]++;
      this.caches[key] = cache;
      cov_28x0dx09ft.s[12]++;
      this.onNewCache(key, cache, insertAtIndex);
    } else {
      cov_28x0dx09ft.b[0][1]++;
    }

    cov_28x0dx09ft.s[13]++;
    return this.caches[key];
  }

  getSortedCacheKeys() {
    cov_28x0dx09ft.f[2]++;
    cov_28x0dx09ft.s[14]++;
    return this.sortedCacheKeys;
  }

}
class Cache {
  constructor(idGenerator, onNewValue) {
    cov_28x0dx09ft.f[3]++;
    cov_28x0dx09ft.s[15]++;
    this.cache = {};
    cov_28x0dx09ft.s[16]++;
    this.idGenerator = idGenerator;
    cov_28x0dx09ft.s[17]++;
    this.onNewValue = onNewValue;
  }

  addValue(key, value) {
    cov_28x0dx09ft.f[4]++;
    const cached = (cov_28x0dx09ft.s[18]++, this.cache[key]);
    cov_28x0dx09ft.s[19]++;

    if (cached) {
      cov_28x0dx09ft.b[1][0]++;
      cov_28x0dx09ft.s[20]++;
      return cached;
    } else {
      cov_28x0dx09ft.b[1][1]++;
    }

    const id = (cov_28x0dx09ft.s[21]++, this.idGenerator.next());
    cov_28x0dx09ft.s[22]++;
    this.cache[key] = id;
    cov_28x0dx09ft.s[23]++;
    this.onNewValue(this, id, value);
    cov_28x0dx09ft.s[24]++;
    return id;
  }

}

var cov_1iywlf7mw1 = function () {
  var path = "/Users/rtsao/rtsaoforks/styletron/packages/styletron-engine-atomic/src/inject-style-prefixed.js",
      hash = "c1692b54b1cc1fae25cd4398bf1d03c8dd7a688d",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = {
    path: "/Users/rtsao/rtsaoforks/styletron/packages/styletron-engine-atomic/src/inject-style-prefixed.js",
    statementMap: {
      "0": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 42
        }
      },
      "1": {
        start: {
          line: 20,
          column: 20
        },
        end: {
          line: 20,
          column: 22
        }
      },
      "2": {
        start: {
          line: 21,
          column: 2
        },
        end: {
          line: 87,
          column: 3
        }
      },
      "3": {
        start: {
          line: 22,
          column: 24
        },
        end: {
          line: 22,
          column: 43
        }
      },
      "4": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 86,
          column: 5
        }
      },
      "5": {
        start: {
          line: 26,
          column: 6
        },
        end: {
          line: 28,
          column: 7
        }
      },
      "6": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 39
        }
      },
      "7": {
        start: {
          line: 30,
          column: 26
        },
        end: {
          line: 32,
          column: 41
        }
      },
      "8": {
        start: {
          line: 33,
          column: 18
        },
        end: {
          line: 33,
          column: 43
        }
      },
      "9": {
        start: {
          line: 34,
          column: 23
        },
        end: {
          line: 34,
          column: 39
        }
      },
      "10": {
        start: {
          line: 35,
          column: 6
        },
        end: {
          line: 64,
          column: 7
        }
      },
      "11": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 38
        }
      },
      "12": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 17
        }
      },
      "13": {
        start: {
          line: 41,
          column: 20
        },
        end: {
          line: 41,
          column: 22
        }
      },
      "14": {
        start: {
          line: 42,
          column: 25
        },
        end: {
          line: 42,
          column: 61
        }
      },
      "15": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 60,
          column: 9
        }
      },
      "16": {
        start: {
          line: 44,
          column: 30
        },
        end: {
          line: 44,
          column: 51
        }
      },
      "17": {
        start: {
          line: 45,
          column: 34
        },
        end: {
          line: 45,
          column: 52
        }
      },
      "18": {
        start: {
          line: 46,
          column: 10
        },
        end: {
          line: 59,
          column: 11
        }
      },
      "19": {
        start: {
          line: 47,
          column: 33
        },
        end: {
          line: 47,
          column: 75
        }
      },
      "20": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 50,
          column: 13
        }
      },
      "21": {
        start: {
          line: 49,
          column: 14
        },
        end: {
          line: 49,
          column: 42
        }
      },
      "22": {
        start: {
          line: 51,
          column: 17
        },
        end: {
          line: 59,
          column: 11
        }
      },
      "23": {
        start: {
          line: 52,
          column: 31
        },
        end: {
          line: 52,
          column: 53
        }
      },
      "24": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 58,
          column: 13
        }
      },
      "25": {
        start: {
          line: 54,
          column: 35
        },
        end: {
          line: 54,
          column: 68
        }
      },
      "26": {
        start: {
          line: 55,
          column: 14
        },
        end: {
          line: 57,
          column: 15
        }
      },
      "27": {
        start: {
          line: 56,
          column: 16
        },
        end: {
          line: 56,
          column: 44
        }
      },
      "28": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 29
        }
      },
      "29": {
        start: {
          line: 62,
          column: 19
        },
        end: {
          line: 62,
          column: 55
        }
      },
      "30": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 32
        }
      },
      "31": {
        start: {
          line: 67,
          column: 6
        },
        end: {
          line: 85,
          column: 7
        }
      },
      "32": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 75,
          column: 12
        }
      },
      "33": {
        start: {
          line: 76,
          column: 13
        },
        end: {
          line: 85,
          column: 7
        }
      },
      "34": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 84,
          column: 12
        }
      },
      "35": {
        start: {
          line: 89,
          column: 2
        },
        end: {
          line: 103,
          column: 3
        }
      },
      "36": {
        start: {
          line: 90,
          column: 22
        },
        end: {
          line: 90,
          column: 49
        }
      },
      "37": {
        start: {
          line: 91,
          column: 4
        },
        end: {
          line: 102,
          column: 5
        }
      },
      "38": {
        start: {
          line: 92,
          column: 6
        },
        end: {
          line: 101,
          column: 9
        }
      },
      "39": {
        start: {
          line: 93,
          column: 22
        },
        end: {
          line: 93,
          column: 77
        }
      },
      "40": {
        start: {
          line: 94,
          column: 21
        },
        end: {
          line: 94,
          column: 74
        }
      },
      "41": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 100,
          column: 10
        }
      },
      "42": {
        start: {
          line: 106,
          column: 2
        },
        end: {
          line: 106,
          column: 30
        }
      },
      "43": {
        start: {
          line: 110,
          column: 2
        },
        end: {
          line: 116,
          column: 3
        }
      },
      "44": {
        start: {
          line: 115,
          column: 4
        },
        end: {
          line: 115,
          column: 73
        }
      }
    },
    fnMap: {
      "0": {
        name: "injectStylePrefixed",
        decl: {
          start: {
            line: 13,
            column: 24
          },
          end: {
            line: 13,
            column: 43
          }
        },
        loc: {
          start: {
            line: 18,
            column: 2
          },
          end: {
            line: 107,
            column: 1
          }
        },
        line: 18
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 92,
            column: 24
          },
          end: {
            line: 92,
            column: 25
          }
        },
        loc: {
          start: {
            line: 92,
            column: 51
          },
          end: {
            line: 101,
            column: 7
          }
        },
        line: 92
      },
      "2": {
        name: "validateValueType",
        decl: {
          start: {
            line: 109,
            column: 9
          },
          end: {
            line: 109,
            column: 26
          }
        },
        loc: {
          start: {
            line: 109,
            column: 34
          },
          end: {
            line: 117,
            column: 1
          }
        },
        line: 109
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 86,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 86,
            column: 5
          }
        }, {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 86,
            column: 5
          }
        }],
        line: 24
      },
      "1": {
        loc: {
          start: {
            line: 26,
            column: 6
          },
          end: {
            line: 28,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 6
          },
          end: {
            line: 28,
            column: 7
          }
        }, {
          start: {
            line: 26,
            column: 6
          },
          end: {
            line: 28,
            column: 7
          }
        }],
        line: 26
      },
      "2": {
        loc: {
          start: {
            line: 35,
            column: 6
          },
          end: {
            line: 64,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 6
          },
          end: {
            line: 64,
            column: 7
          }
        }, {
          start: {
            line: 35,
            column: 6
          },
          end: {
            line: 64,
            column: 7
          }
        }],
        line: 35
      },
      "3": {
        loc: {
          start: {
            line: 46,
            column: 10
          },
          end: {
            line: 59,
            column: 11
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 10
          },
          end: {
            line: 59,
            column: 11
          }
        }, {
          start: {
            line: 46,
            column: 10
          },
          end: {
            line: 59,
            column: 11
          }
        }],
        line: 46
      },
      "4": {
        loc: {
          start: {
            line: 46,
            column: 14
          },
          end: {
            line: 46,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 46,
            column: 14
          },
          end: {
            line: 46,
            column: 42
          }
        }, {
          start: {
            line: 46,
            column: 46
          },
          end: {
            line: 46,
            column: 74
          }
        }],
        line: 46
      },
      "5": {
        loc: {
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 50,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 50,
            column: 13
          }
        }, {
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 50,
            column: 13
          }
        }],
        line: 48
      },
      "6": {
        loc: {
          start: {
            line: 51,
            column: 17
          },
          end: {
            line: 59,
            column: 11
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 17
          },
          end: {
            line: 59,
            column: 11
          }
        }, {
          start: {
            line: 51,
            column: 17
          },
          end: {
            line: 59,
            column: 11
          }
        }],
        line: 51
      },
      "7": {
        loc: {
          start: {
            line: 55,
            column: 14
          },
          end: {
            line: 57,
            column: 15
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 14
          },
          end: {
            line: 57,
            column: 15
          }
        }, {
          start: {
            line: 55,
            column: 14
          },
          end: {
            line: 57,
            column: 15
          }
        }],
        line: 55
      },
      "8": {
        loc: {
          start: {
            line: 67,
            column: 6
          },
          end: {
            line: 85,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 6
          },
          end: {
            line: 85,
            column: 7
          }
        }, {
          start: {
            line: 67,
            column: 6
          },
          end: {
            line: 85,
            column: 7
          }
        }],
        line: 67
      },
      "9": {
        loc: {
          start: {
            line: 76,
            column: 13
          },
          end: {
            line: 85,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 13
          },
          end: {
            line: 85,
            column: 7
          }
        }, {
          start: {
            line: 76,
            column: 13
          },
          end: {
            line: 85,
            column: 7
          }
        }],
        line: 76
      },
      "10": {
        loc: {
          start: {
            line: 89,
            column: 2
          },
          end: {
            line: 103,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 2
          },
          end: {
            line: 103,
            column: 3
          }
        }, {
          start: {
            line: 89,
            column: 2
          },
          end: {
            line: 103,
            column: 3
          }
        }],
        line: 89
      },
      "11": {
        loc: {
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 102,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 102,
            column: 5
          }
        }, {
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 102,
            column: 5
          }
        }],
        line: 91
      },
      "12": {
        loc: {
          start: {
            line: 110,
            column: 2
          },
          end: {
            line: 116,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 2
          },
          end: {
            line: 116,
            column: 3
          }
        }, {
          start: {
            line: 110,
            column: 2
          },
          end: {
            line: 116,
            column: 3
          }
        }],
        line: 110
      },
      "13": {
        loc: {
          start: {
            line: 111,
            column: 4
          },
          end: {
            line: 113,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 111,
            column: 4
          },
          end: {
            line: 111,
            column: 18
          }
        }, {
          start: {
            line: 112,
            column: 4
          },
          end: {
            line: 112,
            column: 24
          }
        }, {
          start: {
            line: 113,
            column: 5
          },
          end: {
            line: 113,
            column: 30
          }
        }, {
          start: {
            line: 113,
            column: 34
          },
          end: {
            line: 113,
            column: 59
          }
        }],
        line: 111
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0, 0]
    },
    _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

function injectStylePrefixed(styleCache, styles, media, pseudo) {
  cov_1iywlf7mw1.f[0]++;
  const cache = (cov_1iywlf7mw1.s[0]++, styleCache.getCache(media));
  let classString = (cov_1iywlf7mw1.s[1]++, "");
  cov_1iywlf7mw1.s[2]++;

  for (const originalKey in styles) {
    const originalVal = (cov_1iywlf7mw1.s[3]++, styles[originalKey]);
    cov_1iywlf7mw1.s[4]++;

    if (typeof originalVal !== "object") {
      cov_1iywlf7mw1.b[0][0]++;
      cov_1iywlf7mw1.s[5]++;

      // Primitive value
      if (process.env.NODE_ENV !== "production") {
        cov_1iywlf7mw1.b[1][0]++;
        cov_1iywlf7mw1.s[6]++;
        validateValueType(originalVal);
      } else {
        cov_1iywlf7mw1.b[1][1]++;
      }

      const propValPair = (cov_1iywlf7mw1.s[7]++, `${hyphenateStyleName(originalKey)}:${originalVal}`);
      const key = (cov_1iywlf7mw1.s[8]++, `${pseudo}${propValPair}`);
      const cachedId = (cov_1iywlf7mw1.s[9]++, cache.cache[key]);
      cov_1iywlf7mw1.s[10]++;

      if (cachedId !== void 0) {
        cov_1iywlf7mw1.b[2][0]++;
        cov_1iywlf7mw1.s[11]++;
        // cache hit
        classString += " " + cachedId;
        cov_1iywlf7mw1.s[12]++;
        continue;
      } else {
        cov_1iywlf7mw1.b[2][1]++;
        // cache miss
        let block = (cov_1iywlf7mw1.s[13]++, "");
        const prefixed = (cov_1iywlf7mw1.s[14]++, inlineStylePrefixer.prefix({
          [originalKey]: originalVal
        }));
        cov_1iywlf7mw1.s[15]++;

        for (const prefixedKey in prefixed) {
          const prefixedVal = (cov_1iywlf7mw1.s[16]++, prefixed[prefixedKey]);
          const prefixedValType = (cov_1iywlf7mw1.s[17]++, typeof prefixedVal);
          cov_1iywlf7mw1.s[18]++;

          if ((cov_1iywlf7mw1.b[4][0]++, prefixedValType === "string") || (cov_1iywlf7mw1.b[4][1]++, prefixedValType === "number")) {
            cov_1iywlf7mw1.b[3][0]++;
            const prefixedPair = (cov_1iywlf7mw1.s[19]++, `${hyphenateStyleName(prefixedKey)}:${prefixedVal}`);
            cov_1iywlf7mw1.s[20]++;

            if (prefixedPair !== propValPair) {
              cov_1iywlf7mw1.b[5][0]++;
              cov_1iywlf7mw1.s[21]++;
              block += `${prefixedPair};`;
            } else {
              cov_1iywlf7mw1.b[5][1]++;
            }
          } else {
            cov_1iywlf7mw1.b[3][1]++;
            cov_1iywlf7mw1.s[22]++;

            if (Array.isArray(prefixedVal)) {
              cov_1iywlf7mw1.b[6][0]++;
              const hyphenated = (cov_1iywlf7mw1.s[23]++, hyphenateStyleName(prefixedKey));
              cov_1iywlf7mw1.s[24]++;

              for (let i = 0; i < prefixedVal.length; i++) {
                const prefixedPair = (cov_1iywlf7mw1.s[25]++, `${hyphenated}:${prefixedVal[i]}`);
                cov_1iywlf7mw1.s[26]++;

                if (prefixedPair !== propValPair) {
                  cov_1iywlf7mw1.b[7][0]++;
                  cov_1iywlf7mw1.s[27]++;
                  block += `${prefixedPair};`;
                } else {
                  cov_1iywlf7mw1.b[7][1]++;
                }
              }
            } else {
              cov_1iywlf7mw1.b[6][1]++;
            }
          }
        }

        cov_1iywlf7mw1.s[28]++;
        block += propValPair; // ensure original prop/val is last (for hydration)

        const id = (cov_1iywlf7mw1.s[29]++, cache.addValue(key, {
          pseudo,
          block
        }));
        cov_1iywlf7mw1.s[30]++;
        classString += " " + id;
      }
    } else {
      cov_1iywlf7mw1.b[0][1]++;
      cov_1iywlf7mw1.s[31]++;

      // Object value
      if (originalKey[0] === ":") {
        cov_1iywlf7mw1.b[8][0]++;
        cov_1iywlf7mw1.s[32]++;
        classString += " " + injectStylePrefixed(styleCache, originalVal, media, pseudo + originalKey);
      } else {
        cov_1iywlf7mw1.b[8][1]++;
        cov_1iywlf7mw1.s[33]++;

        if (originalKey.substring(0, 6) === "@media") {
          cov_1iywlf7mw1.b[9][0]++;
          cov_1iywlf7mw1.s[34]++;
          classString += " " + injectStylePrefixed(styleCache, originalVal, originalKey.substr(7), pseudo);
        } else {
          cov_1iywlf7mw1.b[9][1]++;
        }
      }
    }
  }

  cov_1iywlf7mw1.s[35]++;

  if (process.env.NODE_ENV !== "production") {
    cov_1iywlf7mw1.b[10][0]++;
    const conflicts = (cov_1iywlf7mw1.s[36]++, validateNoMixedHand(styles));
    cov_1iywlf7mw1.s[37]++;

    if (conflicts.length) {
      cov_1iywlf7mw1.b[11][0]++;
      cov_1iywlf7mw1.s[38]++;
      conflicts.forEach(({
        shorthand,
        longhand
      }) => {
        cov_1iywlf7mw1.f[1]++;
        const short = (cov_1iywlf7mw1.s[39]++, JSON.stringify({
          [shorthand.property]: shorthand.value
        }));
        const long = (cov_1iywlf7mw1.s[40]++, JSON.stringify({
          [longhand.property]: longhand.value
        })); // eslint-disable-next-line no-console

        cov_1iywlf7mw1.s[41]++;
        console.warn(`Styles \`${short}\` and \`${long}\` in object yielding class "${classString.slice(1)}" may result in unexpected behavior. Mixing shorthand and longhand properties within the same style object is unsupported with atomic rendering.`);
      });
    } else {
      cov_1iywlf7mw1.b[11][1]++;
    }
  } else {
    cov_1iywlf7mw1.b[10][1]++;
  } // remove leading space


  cov_1iywlf7mw1.s[42]++;
  return classString.slice(1);
}

function validateValueType(value) {
  cov_1iywlf7mw1.f[2]++;
  cov_1iywlf7mw1.s[43]++;

  if ((cov_1iywlf7mw1.b[13][0]++, value === null) || (cov_1iywlf7mw1.b[13][1]++, Array.isArray(value)) || (cov_1iywlf7mw1.b[13][2]++, typeof value !== "number") && (cov_1iywlf7mw1.b[13][3]++, typeof value !== "string")) {
    cov_1iywlf7mw1.b[12][0]++;
    cov_1iywlf7mw1.s[44]++;
    throw new Error(`Unsupported style value: ${JSON.stringify(value)}`);
  } else {
    cov_1iywlf7mw1.b[12][1]++;
  }
}

var cov_20p0vyd48y = function () {
  var path = "/Users/rtsao/rtsaoforks/styletron/packages/styletron-engine-atomic/src/validate-keyframes-object.js",
      hash = "981f873c5c92bcfa4debe573b7584e3425d9cf7e",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = {
    path: "/Users/rtsao/rtsaoforks/styletron/packages/styletron-engine-atomic/src/validate-keyframes-object.js",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 28
        },
        end: {
          line: 5,
          column: 92
        }
      },
      "1": {
        start: {
          line: 8,
          column: 14
        },
        end: {
          line: 8,
          column: 18
        }
      },
      "2": {
        start: {
          line: 9,
          column: 2
        },
        end: {
          line: 33,
          column: 3
        }
      },
      "3": {
        start: {
          line: 10,
          column: 18
        },
        end: {
          line: 10,
          column: 43
        }
      },
      "4": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 18,
          column: 5
        }
      },
      "5": {
        start: {
          line: 12,
          column: 6
        },
        end: {
          line: 12,
          column: 20
        }
      },
      "6": {
        start: {
          line: 13,
          column: 6
        },
        end: {
          line: 17,
          column: 8
        }
      },
      "7": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "8": {
        start: {
          line: 20,
          column: 6
        },
        end: {
          line: 20,
          column: 20
        }
      },
      "9": {
        start: {
          line: 21,
          column: 6
        },
        end: {
          line: 25,
          column: 8
        }
      },
      "10": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 32,
          column: 5
        }
      },
      "11": {
        start: {
          line: 28,
          column: 6
        },
        end: {
          line: 31,
          column: 8
        }
      }
    },
    fnMap: {
      "0": {
        name: "validateKeyframesObject",
        decl: {
          start: {
            line: 7,
            column: 24
          },
          end: {
            line: 7,
            column: 47
          }
        },
        loc: {
          start: {
            line: 7,
            column: 67
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 7
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        }, {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        }],
        line: 11
      },
      "1": {
        loc: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        }, {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        }],
        line: 19
      },
      "2": {
        loc: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        }, {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        }],
        line: 27
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

/* eslint-disable no-console */
const validAnimationState = (cov_20p0vyd48y.s[0]++, /^(from|to|\+?(\d*\.)?\d+%)(\s*,\s*(from|to|\+?(\d*\.)?\d+%))*$/);
function validateKeyframesObject(keyframes) {
  cov_20p0vyd48y.f[0]++;
  let valid = (cov_20p0vyd48y.s[1]++, true);
  cov_20p0vyd48y.s[2]++;

  for (const animationState in keyframes) {
    const value = (cov_20p0vyd48y.s[3]++, keyframes[animationState]);
    cov_20p0vyd48y.s[4]++;

    if (!validAnimationState.test(animationState)) {
      cov_20p0vyd48y.b[0][0]++;
      cov_20p0vyd48y.s[5]++;
      valid = false;
      cov_20p0vyd48y.s[6]++;
      console.warn(`Warning: property "${animationState}" in keyframes object ${JSON.stringify(keyframes)} is not a valid. Must be "from", "to", or a percentage.`);
    } else {
      cov_20p0vyd48y.b[0][1]++;
    }

    cov_20p0vyd48y.s[7]++;

    if (typeof value !== "object") {
      cov_20p0vyd48y.b[1][0]++;
      cov_20p0vyd48y.s[8]++;
      valid = false;
      cov_20p0vyd48y.s[9]++;
      console.warn(`Warning: value for "${animationState}" property in keyframes object ${JSON.stringify(keyframes)} must be an object. Instead it was a ${typeof value}.`);
    } else {
      cov_20p0vyd48y.b[1][1]++;
    }

    cov_20p0vyd48y.s[10]++;

    if (!valid) {
      cov_20p0vyd48y.b[2][0]++;
      cov_20p0vyd48y.s[11]++;
      console.warn(`Warning: object used as value for "animationName" style is invalid:`, keyframes);
    } else {
      cov_20p0vyd48y.b[2][1]++;
    }
  }
}

var cov_11uhq49em3 = function () {
  var path = "/Users/rtsao/rtsaoforks/styletron/packages/styletron-engine-atomic/src/css.js",
      hash = "10addb2306a7337285f705c283489f4dd208de02",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = {
    path: "/Users/rtsao/rtsaoforks/styletron/packages/styletron-engine-atomic/src/css.js",
    statementMap: {
      "0": {
        start: {
          line: 9,
          column: 17
        },
        end: {
          line: 9,
          column: 25
        }
      },
      "1": {
        start: {
          line: 10,
          column: 2
        },
        end: {
          line: 12,
          column: 3
        }
      },
      "2": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 23
        }
      },
      "3": {
        start: {
          line: 13,
          column: 2
        },
        end: {
          line: 13,
          column: 18
        }
      },
      "4": {
        start: {
          line: 17,
          column: 2
        },
        end: {
          line: 19,
          column: 3
        }
      },
      "5": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 18,
          column: 39
        }
      },
      "6": {
        start: {
          line: 20,
          column: 2
        },
        end: {
          line: 28,
          column: 3
        }
      },
      "7": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 27,
          column: 5
        }
      },
      "8": {
        start: {
          line: 23,
          column: 6
        },
        end: {
          line: 26,
          column: 8
        }
      },
      "9": {
        start: {
          line: 29,
          column: 15
        },
        end: {
          line: 29,
          column: 17
        }
      },
      "10": {
        start: {
          line: 30,
          column: 2
        },
        end: {
          line: 34,
          column: 3
        }
      },
      "11": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "12": {
        start: {
          line: 35,
          column: 2
        },
        end: {
          line: 35,
          column: 16
        }
      },
      "13": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 14
        }
      },
      "14": {
        start: {
          line: 40,
          column: 2
        },
        end: {
          line: 45,
          column: 3
        }
      },
      "15": {
        start: {
          line: 41,
          column: 16
        },
        end: {
          line: 41,
          column: 27
        }
      },
      "16": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 44,
          column: 5
        }
      },
      "17": {
        start: {
          line: 43,
          column: 6
        },
        end: {
          line: 43,
          column: 42
        }
      },
      "18": {
        start: {
          line: 47,
          column: 2
        },
        end: {
          line: 47,
          column: 26
        }
      },
      "19": {
        start: {
          line: 51,
          column: 2
        },
        end: {
          line: 51,
          column: 38
        }
      },
      "20": {
        start: {
          line: 55,
          column: 2
        },
        end: {
          line: 55,
          column: 50
        }
      },
      "21": {
        start: {
          line: 59,
          column: 2
        },
        end: {
          line: 59,
          column: 33
        }
      }
    },
    fnMap: {
      "0": {
        name: "atomicSelector",
        decl: {
          start: {
            line: 8,
            column: 16
          },
          end: {
            line: 8,
            column: 30
          }
        },
        loc: {
          start: {
            line: 8,
            column: 67
          },
          end: {
            line: 14,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "keyframesToBlock",
        decl: {
          start: {
            line: 16,
            column: 16
          },
          end: {
            line: 16,
            column: 32
          }
        },
        loc: {
          start: {
            line: 16,
            column: 72
          },
          end: {
            line: 36,
            column: 1
          }
        },
        line: 16
      },
      "2": {
        name: "declarationsToBlock",
        decl: {
          start: {
            line: 38,
            column: 16
          },
          end: {
            line: 38,
            column: 35
          }
        },
        loc: {
          start: {
            line: 38,
            column: 59
          },
          end: {
            line: 48,
            column: 1
          }
        },
        line: 38
      },
      "3": {
        name: "keyframesBlockToRule",
        decl: {
          start: {
            line: 50,
            column: 16
          },
          end: {
            line: 50,
            column: 36
          }
        },
        loc: {
          start: {
            line: 50,
            column: 72
          },
          end: {
            line: 52,
            column: 1
          }
        },
        line: 50
      },
      "4": {
        name: "fontFaceBlockToRule",
        decl: {
          start: {
            line: 54,
            column: 16
          },
          end: {
            line: 54,
            column: 35
          }
        },
        loc: {
          start: {
            line: 54,
            column: 71
          },
          end: {
            line: 56,
            column: 1
          }
        },
        line: 54
      },
      "5": {
        name: "styleBlockToRule",
        decl: {
          start: {
            line: 58,
            column: 16
          },
          end: {
            line: 58,
            column: 32
          }
        },
        loc: {
          start: {
            line: 58,
            column: 74
          },
          end: {
            line: 60,
            column: 1
          }
        },
        line: 58
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 10,
            column: 2
          },
          end: {
            line: 12,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 2
          },
          end: {
            line: 12,
            column: 3
          }
        }, {
          start: {
            line: 10,
            column: 2
          },
          end: {
            line: 12,
            column: 3
          }
        }],
        line: 10
      },
      "1": {
        loc: {
          start: {
            line: 17,
            column: 2
          },
          end: {
            line: 19,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 2
          },
          end: {
            line: 19,
            column: 3
          }
        }, {
          start: {
            line: 17,
            column: 2
          },
          end: {
            line: 19,
            column: 3
          }
        }],
        line: 17
      },
      "2": {
        loc: {
          start: {
            line: 20,
            column: 2
          },
          end: {
            line: 28,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 2
          },
          end: {
            line: 28,
            column: 3
          }
        }, {
          start: {
            line: 20,
            column: 2
          },
          end: {
            line: 28,
            column: 3
          }
        }],
        line: 20
      },
      "3": {
        loc: {
          start: {
            line: 20,
            column: 6
          },
          end: {
            line: 20,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 6
          },
          end: {
            line: 20,
            column: 13
          }
        }, {
          start: {
            line: 20,
            column: 17
          },
          end: {
            line: 20,
            column: 72
          }
        }],
        line: 20
      },
      "4": {
        loc: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        }, {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        }],
        line: 21
      },
      "5": {
        loc: {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 44,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 44,
            column: 5
          }
        }, {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 44,
            column: 5
          }
        }],
        line: 42
      },
      "6": {
        loc: {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 42,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 42,
            column: 31
          }
        }, {
          start: {
            line: 42,
            column: 35
          },
          end: {
            line: 42,
            column: 58
          }
        }],
        line: 42
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0]
    },
    _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

function atomicSelector(id, pseudo) {
  cov_11uhq49em3.f[0]++;
  let selector = (cov_11uhq49em3.s[0]++, `.${id}`);
  cov_11uhq49em3.s[1]++;

  if (pseudo) {
    cov_11uhq49em3.b[0][0]++;
    cov_11uhq49em3.s[2]++;
    selector += pseudo;
  } else {
    cov_11uhq49em3.b[0][1]++;
  }

  cov_11uhq49em3.s[3]++;
  return selector;
}
function keyframesToBlock(keyframes) {
  cov_11uhq49em3.f[1]++;
  cov_11uhq49em3.s[4]++;

  if (process.env.NODE_ENV !== "production") {
    cov_11uhq49em3.b[1][0]++;
    cov_11uhq49em3.s[5]++;
    validateKeyframesObject(keyframes);
  } else {
    cov_11uhq49em3.b[1][1]++;
  }

  cov_11uhq49em3.s[6]++;

  if ((cov_11uhq49em3.b[3][0]++, process.env.NODE_ENV !== "production") && (cov_11uhq49em3.b[3][1]++, typeof Object.getPrototypeOf(keyframes) !== "undefined")) {
    cov_11uhq49em3.b[2][0]++;
    cov_11uhq49em3.s[7]++;

    if (Object.getPrototypeOf(keyframes) !== Object.getPrototypeOf({})) {
      cov_11uhq49em3.b[4][0]++;
      cov_11uhq49em3.s[8]++;
      // eslint-disable-next-line no-console
      console.warn("Only plain objects should be used as animation values. Unexpectedly recieved:", keyframes);
    } else {
      cov_11uhq49em3.b[4][1]++;
    }
  } else {
    cov_11uhq49em3.b[2][1]++;
  }

  let result = (cov_11uhq49em3.s[9]++, "");
  cov_11uhq49em3.s[10]++;

  for (const animationState in keyframes) {
    cov_11uhq49em3.s[11]++;
    result += `${animationState}{${declarationsToBlock(keyframes[animationState])}}`;
  }

  cov_11uhq49em3.s[12]++;
  return result;
}
function declarationsToBlock(style) {
  cov_11uhq49em3.f[2]++;
  let css = (cov_11uhq49em3.s[13]++, "");
  cov_11uhq49em3.s[14]++;

  for (const prop in style) {
    const val = (cov_11uhq49em3.s[15]++, style[prop]);
    cov_11uhq49em3.s[16]++;

    if ((cov_11uhq49em3.b[6][0]++, typeof val === "string") || (cov_11uhq49em3.b[6][1]++, typeof val === "number")) {
      cov_11uhq49em3.b[5][0]++;
      cov_11uhq49em3.s[17]++;
      css += `${hyphenateStyleName(prop)}:${val};`;
    } else {
      cov_11uhq49em3.b[5][1]++;
    }
  } // trim trailing semicolon


  cov_11uhq49em3.s[18]++;
  return css.slice(0, -1);
}
function keyframesBlockToRule(id, block) {
  cov_11uhq49em3.f[3]++;
  cov_11uhq49em3.s[19]++;
  return `@keyframes ${id}{${block}}`;
}
function fontFaceBlockToRule(id, block) {
  cov_11uhq49em3.f[4]++;
  cov_11uhq49em3.s[20]++;
  return `@font-face{font-family:${id};${block}}`;
}
function styleBlockToRule(selector, block) {
  cov_11uhq49em3.f[5]++;
  cov_11uhq49em3.s[21]++;
  return `${selector}{${block}}`;
}

var cov_2eam3ttp2q = function () {
  var path = "/Users/rtsao/rtsaoforks/styletron/packages/styletron-engine-atomic/src/server/server.js",
      hash = "8058890f4674aefcfbffe587b51a7cfb8070d586",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = {
    path: "/Users/rtsao/rtsaoforks/styletron/packages/styletron-engine-atomic/src/server/server.js",
    statementMap: {
      "0": {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 44,
          column: 31
        }
      },
      "1": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 57,
          column: 6
        }
      },
      "2": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 36
        }
      },
      "3": {
        start: {
          line: 51,
          column: 32
        },
        end: {
          line: 51,
          column: 37
        }
      },
      "4": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 55,
          column: 10
        }
      },
      "5": {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 59,
          column: 28
        }
      },
      "6": {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 68,
          column: 6
        }
      },
      "7": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 66,
          column: 10
        }
      },
      "8": {
        start: {
          line: 70,
          column: 4
        },
        end: {
          line: 70,
          column: 29
        }
      },
      "9": {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 79,
          column: 6
        }
      },
      "10": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 77,
          column: 10
        }
      },
      "11": {
        start: {
          line: 83,
          column: 4
        },
        end: {
          line: 83,
          column: 63
        }
      },
      "12": {
        start: {
          line: 87,
          column: 16
        },
        end: {
          line: 87,
          column: 40
        }
      },
      "13": {
        start: {
          line: 88,
          column: 4
        },
        end: {
          line: 88,
          column: 54
        }
      },
      "14": {
        start: {
          line: 92,
          column: 16
        },
        end: {
          line: 92,
          column: 41
        }
      },
      "15": {
        start: {
          line: 93,
          column: 4
        },
        end: {
          line: 93,
          column: 56
        }
      },
      "16": {
        start: {
          line: 97,
          column: 4
        },
        end: {
          line: 115,
          column: 6
        }
      },
      "17": {
        start: {
          line: 119,
          column: 4
        },
        end: {
          line: 119,
          column: 64
        }
      },
      "18": {
        start: {
          line: 123,
          column: 4
        },
        end: {
          line: 127,
          column: 6
        }
      },
      "19": {
        start: {
          line: 132,
          column: 13
        },
        end: {
          line: 132,
          column: 15
        }
      },
      "20": {
        start: {
          line: 133,
          column: 2
        },
        end: {
          line: 143,
          column: 3
        }
      },
      "21": {
        start: {
          line: 134,
          column: 18
        },
        end: {
          line: 134,
          column: 27
        }
      },
      "22": {
        start: {
          line: 135,
          column: 48
        },
        end: {
          line: 135,
          column: 59
        }
      },
      "23": {
        start: {
          line: 136,
          column: 18
        },
        end: {
          line: 141,
          column: 5
        }
      },
      "24": {
        start: {
          line: 142,
          column: 4
        },
        end: {
          line: 142,
          column: 65
        }
      },
      "25": {
        start: {
          line: 144,
          column: 2
        },
        end: {
          line: 144,
          column: 14
        }
      },
      "26": {
        start: {
          line: 148,
          column: 15
        },
        end: {
          line: 148,
          column: 17
        }
      },
      "27": {
        start: {
          line: 149,
          column: 2
        },
        end: {
          line: 156,
          column: 3
        }
      },
      "28": {
        start: {
          line: 150,
          column: 18
        },
        end: {
          line: 150,
          column: 29
        }
      },
      "29": {
        start: {
          line: 151,
          column: 4
        },
        end: {
          line: 155,
          column: 5
        }
      },
      "30": {
        start: {
          line: 152,
          column: 6
        },
        end: {
          line: 152,
          column: 27
        }
      },
      "31": {
        start: {
          line: 153,
          column: 11
        },
        end: {
          line: 155,
          column: 5
        }
      },
      "32": {
        start: {
          line: 154,
          column: 6
        },
        end: {
          line: 154,
          column: 38
        }
      },
      "33": {
        start: {
          line: 157,
          column: 2
        },
        end: {
          line: 157,
          column: 16
        }
      },
      "34": {
        start: {
          line: 161,
          column: 15
        },
        end: {
          line: 161,
          column: 17
        }
      },
      "35": {
        start: {
          line: 162,
          column: 2
        },
        end: {
          line: 169,
          column: 5
        }
      },
      "36": {
        start: {
          line: 163,
          column: 18
        },
        end: {
          line: 163,
          column: 38
        }
      },
      "37": {
        start: {
          line: 164,
          column: 4
        },
        end: {
          line: 168,
          column: 5
        }
      },
      "38": {
        start: {
          line: 165,
          column: 6
        },
        end: {
          line: 165,
          column: 47
        }
      },
      "39": {
        start: {
          line: 167,
          column: 6
        },
        end: {
          line: 167,
          column: 22
        }
      },
      "40": {
        start: {
          line: 170,
          column: 2
        },
        end: {
          line: 170,
          column: 16
        }
      },
      "41": {
        start: {
          line: 174,
          column: 2
        },
        end: {
          line: 176,
          column: 3
        }
      },
      "42": {
        start: {
          line: 175,
          column: 4
        },
        end: {
          line: 175,
          column: 34
        }
      },
      "43": {
        start: {
          line: 177,
          column: 17
        },
        end: {
          line: 177,
          column: 19
        }
      },
      "44": {
        start: {
          line: 178,
          column: 2
        },
        end: {
          line: 182,
          column: 5
        }
      },
      "45": {
        start: {
          line: 180,
          column: 18
        },
        end: {
          line: 180,
          column: 58
        }
      },
      "46": {
        start: {
          line: 181,
          column: 4
        },
        end: {
          line: 181,
          column: 52
        }
      },
      "47": {
        start: {
          line: 183,
          column: 2
        },
        end: {
          line: 183,
          column: 16
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 43,
            column: 2
          },
          end: {
            line: 43,
            column: 3
          }
        },
        loc: {
          start: {
            line: 43,
            column: 36
          },
          end: {
            line: 80,
            column: 3
          }
        },
        line: 43
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 47,
            column: 6
          },
          end: {
            line: 47,
            column: 7
          }
        },
        loc: {
          start: {
            line: 47,
            column: 15
          },
          end: {
            line: 49,
            column: 7
          }
        },
        line: 47
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 50,
            column: 6
          },
          end: {
            line: 50,
            column: 7
          }
        },
        loc: {
          start: {
            line: 50,
            column: 28
          },
          end: {
            line: 56,
            column: 7
          }
        },
        line: 50
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 62,
            column: 6
          },
          end: {
            line: 62,
            column: 7
          }
        },
        loc: {
          start: {
            line: 62,
            column: 28
          },
          end: {
            line: 67,
            column: 7
          }
        },
        line: 62
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 73,
            column: 6
          },
          end: {
            line: 73,
            column: 7
          }
        },
        loc: {
          start: {
            line: 73,
            column: 28
          },
          end: {
            line: 78,
            column: 7
          }
        },
        line: 73
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 82,
            column: 2
          },
          end: {
            line: 82,
            column: 3
          }
        },
        loc: {
          start: {
            line: 82,
            column: 42
          },
          end: {
            line: 84,
            column: 3
          }
        },
        line: 82
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 86,
            column: 2
          },
          end: {
            line: 86,
            column: 3
          }
        },
        loc: {
          start: {
            line: 86,
            column: 51
          },
          end: {
            line: 89,
            column: 3
          }
        },
        line: 86
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 91,
            column: 2
          },
          end: {
            line: 91,
            column: 3
          }
        },
        loc: {
          start: {
            line: 91,
            column: 54
          },
          end: {
            line: 94,
            column: 3
          }
        },
        line: 91
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 96,
            column: 2
          },
          end: {
            line: 96,
            column: 3
          }
        },
        loc: {
          start: {
            line: 96,
            column: 34
          },
          end: {
            line: 116,
            column: 3
          }
        },
        line: 96
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 118,
            column: 2
          },
          end: {
            line: 118,
            column: 3
          }
        },
        loc: {
          start: {
            line: 118,
            column: 65
          },
          end: {
            line: 120,
            column: 3
          }
        },
        line: 118
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 122,
            column: 2
          },
          end: {
            line: 122,
            column: 3
          }
        },
        loc: {
          start: {
            line: 122,
            column: 11
          },
          end: {
            line: 128,
            column: 3
          }
        },
        line: 122
      },
      "11": {
        name: "generateHtmlString",
        decl: {
          start: {
            line: 131,
            column: 16
          },
          end: {
            line: 131,
            column: 34
          }
        },
        loc: {
          start: {
            line: 131,
            column: 77
          },
          end: {
            line: 145,
            column: 1
          }
        },
        line: 131
      },
      "12": {
        name: "attrsToString",
        decl: {
          start: {
            line: 147,
            column: 9
          },
          end: {
            line: 147,
            column: 22
          }
        },
        loc: {
          start: {
            line: 147,
            column: 30
          },
          end: {
            line: 158,
            column: 1
          }
        },
        line: 147
      },
      "13": {
        name: "stringify",
        decl: {
          start: {
            line: 160,
            column: 9
          },
          end: {
            line: 160,
            column: 18
          }
        },
        loc: {
          start: {
            line: 160,
            column: 48
          },
          end: {
            line: 171,
            column: 1
          }
        },
        line: 160
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 162,
            column: 26
          },
          end: {
            line: 162,
            column: 27
          }
        },
        loc: {
          start: {
            line: 162,
            column: 38
          },
          end: {
            line: 169,
            column: 3
          }
        },
        line: 162
      },
      "15": {
        name: "sheetify",
        decl: {
          start: {
            line: 173,
            column: 9
          },
          end: {
            line: 173,
            column: 17
          }
        },
        loc: {
          start: {
            line: 173,
            column: 47
          },
          end: {
            line: 184,
            column: 1
          }
        },
        line: 173
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 178,
            column: 26
          },
          end: {
            line: 178,
            column: 27
          }
        },
        loc: {
          start: {
            line: 178,
            column: 38
          },
          end: {
            line: 182,
            column: 3
          }
        },
        line: 178
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 43,
            column: 14
          },
          end: {
            line: 43,
            column: 34
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 43,
            column: 32
          },
          end: {
            line: 43,
            column: 34
          }
        }],
        line: 43
      },
      "1": {
        loc: {
          start: {
            line: 98,
            column: 10
          },
          end: {
            line: 105,
            column: 12
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 99,
            column: 10
          },
          end: {
            line: 104,
            column: 11
          }
        }, {
          start: {
            line: 105,
            column: 10
          },
          end: {
            line: 105,
            column: 12
          }
        }],
        line: 98
      },
      "2": {
        loc: {
          start: {
            line: 107,
            column: 10
          },
          end: {
            line: 114,
            column: 12
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 108,
            column: 10
          },
          end: {
            line: 113,
            column: 11
          }
        }, {
          start: {
            line: 114,
            column: 10
          },
          end: {
            line: 114,
            column: 12
          }
        }],
        line: 107
      },
      "3": {
        loc: {
          start: {
            line: 118,
            column: 21
          },
          end: {
            line: 118,
            column: 63
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 118,
            column: 42
          },
          end: {
            line: 118,
            column: 63
          }
        }],
        line: 118
      },
      "4": {
        loc: {
          start: {
            line: 137,
            column: 13
          },
          end: {
            line: 139,
            column: 19
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 138,
            column: 10
          },
          end: {
            line: 138,
            column: 45
          }
        }, {
          start: {
            line: 139,
            column: 10
          },
          end: {
            line: 139,
            column: 19
          }
        }],
        line: 137
      },
      "5": {
        loc: {
          start: {
            line: 151,
            column: 4
          },
          end: {
            line: 155,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 4
          },
          end: {
            line: 155,
            column: 5
          }
        }, {
          start: {
            line: 151,
            column: 4
          },
          end: {
            line: 155,
            column: 5
          }
        }],
        line: 151
      },
      "6": {
        loc: {
          start: {
            line: 153,
            column: 11
          },
          end: {
            line: 155,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 153,
            column: 11
          },
          end: {
            line: 155,
            column: 5
          }
        }, {
          start: {
            line: 153,
            column: 11
          },
          end: {
            line: 155,
            column: 5
          }
        }],
        line: 153
      },
      "7": {
        loc: {
          start: {
            line: 164,
            column: 4
          },
          end: {
            line: 168,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 164,
            column: 4
          },
          end: {
            line: 168,
            column: 5
          }
        }, {
          start: {
            line: 164,
            column: 4
          },
          end: {
            line: 168,
            column: 5
          }
        }],
        line: 164
      },
      "8": {
        loc: {
          start: {
            line: 174,
            column: 2
          },
          end: {
            line: 176,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 174,
            column: 2
          },
          end: {
            line: 176,
            column: 3
          }
        }, {
          start: {
            line: 174,
            column: 2
          },
          end: {
            line: 176,
            column: 3
          }
        }],
        line: 174
      },
      "9": {
        loc: {
          start: {
            line: 180,
            column: 18
          },
          end: {
            line: 180,
            column: 58
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 180,
            column: 36
          },
          end: {
            line: 180,
            column: 38
          }
        }, {
          start: {
            line: 180,
            column: 41
          },
          end: {
            line: 180,
            column: 58
          }
        }],
        line: 180
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0]
    },
    _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

class StyletronServer {
  constructor(opts = (cov_2eam3ttp2q.b[0][0]++, {})) {
    cov_2eam3ttp2q.f[0]++;
    cov_2eam3ttp2q.s[0]++;
    this.styleRules = {
      "": ""
    };
    cov_2eam3ttp2q.s[1]++;
    this.styleCache = new MultiCache(new SequentialIDGenerator(opts.prefix), media => {
      cov_2eam3ttp2q.f[1]++;
      cov_2eam3ttp2q.s[2]++;
      this.styleRules[media] = "";
    }, (cache, id, value) => {
      cov_2eam3ttp2q.f[2]++;
      const {
        pseudo,
        block
      } = (cov_2eam3ttp2q.s[3]++, value);
      cov_2eam3ttp2q.s[4]++;
      this.styleRules[cache.key] += styleBlockToRule(atomicSelector(id, pseudo), block);
    });
    cov_2eam3ttp2q.s[5]++;
    this.fontFaceRules = "";
    cov_2eam3ttp2q.s[6]++;
    this.fontFaceCache = new Cache(new SequentialIDGenerator(opts.prefix), (cache, id, value) => {
      cov_2eam3ttp2q.f[3]++;
      cov_2eam3ttp2q.s[7]++;
      this.fontFaceRules += fontFaceBlockToRule(id, declarationsToBlock(value));
    });
    cov_2eam3ttp2q.s[8]++;
    this.keyframesRules = "";
    cov_2eam3ttp2q.s[9]++;
    this.keyframesCache = new Cache(new SequentialIDGenerator(opts.prefix), (cache, id, value) => {
      cov_2eam3ttp2q.f[4]++;
      cov_2eam3ttp2q.s[10]++;
      this.keyframesRules += keyframesBlockToRule(id, keyframesToBlock(value));
    });
  }

  renderStyle(style) {
    cov_2eam3ttp2q.f[5]++;
    cov_2eam3ttp2q.s[11]++;
    return injectStylePrefixed(this.styleCache, style, "", "");
  }

  renderFontFace(fontFace) {
    cov_2eam3ttp2q.f[6]++;
    const key = (cov_2eam3ttp2q.s[12]++, JSON.stringify(fontFace));
    cov_2eam3ttp2q.s[13]++;
    return this.fontFaceCache.addValue(key, fontFace);
  }

  renderKeyframes(keyframes) {
    cov_2eam3ttp2q.f[7]++;
    const key = (cov_2eam3ttp2q.s[14]++, JSON.stringify(keyframes));
    cov_2eam3ttp2q.s[15]++;
    return this.keyframesCache.addValue(key, keyframes);
  }

  getStylesheets() {
    cov_2eam3ttp2q.f[8]++;
    cov_2eam3ttp2q.s[16]++;
    return [...(this.fontFaceRules.length ? (cov_2eam3ttp2q.b[1][0]++, [{
      css: this.fontFaceRules,
      attrs: {
        "data-hydrate": "font-face"
      }
    }]) : (cov_2eam3ttp2q.b[1][1]++, [])), ...sheetify(this.styleRules, this.styleCache.getSortedCacheKeys()), ...(this.keyframesRules.length ? (cov_2eam3ttp2q.b[2][0]++, [{
      css: this.keyframesRules,
      attrs: {
        "data-hydrate": "keyframes"
      }
    }]) : (cov_2eam3ttp2q.b[2][1]++, []))];
  }

  getStylesheetsHtml(className = (cov_2eam3ttp2q.b[3][0]++, "_styletron_hydrate_")) {
    cov_2eam3ttp2q.f[9]++;
    cov_2eam3ttp2q.s[17]++;
    return generateHtmlString(this.getStylesheets(), className);
  }

  getCss() {
    cov_2eam3ttp2q.f[10]++;
    cov_2eam3ttp2q.s[18]++;
    return this.fontFaceRules + stringify(this.styleRules, this.styleCache.getSortedCacheKeys()) + this.keyframesRules;
  }

}

function generateHtmlString(sheets, className) {
  cov_2eam3ttp2q.f[11]++;
  let html = (cov_2eam3ttp2q.s[19]++, "");
  cov_2eam3ttp2q.s[20]++;

  for (let i = 0; i < sheets.length; i++) {
    const sheet = (cov_2eam3ttp2q.s[21]++, sheets[i]);

    const _ref = (cov_2eam3ttp2q.s[22]++, sheet.attrs),
          {
      class: originalClassName
    } = _ref,
          rest = _objectWithoutPropertiesLoose(_ref, ["class"]);

    const attrs = (cov_2eam3ttp2q.s[23]++, Object.assign({
      class: originalClassName ? (cov_2eam3ttp2q.b[4][0]++, `${className} ${originalClassName}`) : (cov_2eam3ttp2q.b[4][1]++, className)
    }, rest));
    cov_2eam3ttp2q.s[24]++;
    html += `<style${attrsToString(attrs)}>${sheet.css}</style>`;
  }

  cov_2eam3ttp2q.s[25]++;
  return html;
}

function attrsToString(attrs) {
  cov_2eam3ttp2q.f[12]++;
  let result = (cov_2eam3ttp2q.s[26]++, "");
  cov_2eam3ttp2q.s[27]++;

  for (const attr in attrs) {
    const value = (cov_2eam3ttp2q.s[28]++, attrs[attr]);
    cov_2eam3ttp2q.s[29]++;

    if (value === true) {
      cov_2eam3ttp2q.b[5][0]++;
      cov_2eam3ttp2q.s[30]++;
      result += " " + attr;
    } else {
      cov_2eam3ttp2q.b[5][1]++;
      cov_2eam3ttp2q.s[31]++;

      if (value !== false) {
        cov_2eam3ttp2q.b[6][0]++;
        cov_2eam3ttp2q.s[32]++;
        result += ` ${attr}="${value}"`;
      } else {
        cov_2eam3ttp2q.b[6][1]++;
      }
    }
  }

  cov_2eam3ttp2q.s[33]++;
  return result;
}

function stringify(styleRules, sortedCacheKeys) {
  cov_2eam3ttp2q.f[13]++;
  let result = (cov_2eam3ttp2q.s[34]++, "");
  cov_2eam3ttp2q.s[35]++;
  sortedCacheKeys.forEach(cacheKey => {
    cov_2eam3ttp2q.f[14]++;
    const rules = (cov_2eam3ttp2q.s[36]++, styleRules[cacheKey]);
    cov_2eam3ttp2q.s[37]++;

    if (cacheKey !== "") {
      cov_2eam3ttp2q.b[7][0]++;
      cov_2eam3ttp2q.s[38]++;
      result += `@media ${cacheKey}{${rules}}`;
    } else {
      cov_2eam3ttp2q.b[7][1]++;
      cov_2eam3ttp2q.s[39]++;
      result += rules;
    }
  });
  cov_2eam3ttp2q.s[40]++;
  return result;
}

function sheetify(styleRules, sortedCacheKeys) {
  cov_2eam3ttp2q.f[15]++;
  cov_2eam3ttp2q.s[41]++;

  if (sortedCacheKeys.length === 0) {
    cov_2eam3ttp2q.b[8][0]++;
    cov_2eam3ttp2q.s[42]++;
    return [{
      css: "",
      attrs: {}
    }];
  } else {
    cov_2eam3ttp2q.b[8][1]++;
  }

  const sheets = (cov_2eam3ttp2q.s[43]++, []);
  cov_2eam3ttp2q.s[44]++;
  sortedCacheKeys.forEach(cacheKey => {
    cov_2eam3ttp2q.f[16]++;
    // omit media (cacheKey) attribute if empty
    const attrs = (cov_2eam3ttp2q.s[45]++, cacheKey === "" ? (cov_2eam3ttp2q.b[9][0]++, {}) : (cov_2eam3ttp2q.b[9][1]++, {
      media: cacheKey
    }));
    cov_2eam3ttp2q.s[46]++;
    sheets.push({
      css: styleRules[cacheKey],
      attrs
    });
  });
  cov_2eam3ttp2q.s[47]++;
  return sheets;
}

test("StyletronServer toCss", t => {
  const styletron = new StyletronServer();
  t.equal(styletron.getCss(), "", "returns empty string when no styles");
  injectFixtureStyles(styletron);
  t.equal(styletron.getCss(), ".ae{color:red}.af{color:green}.aj:hover{display:none}.ak{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.al{display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex}@media (min-width: 600px){.ah{color:red}}@media (min-width: 800px){.ag{color:green}.ai:hover{color:green}}");
  injectFixtureStyles(styletron);
  t.equal(styletron.getCss(), ".ae{color:red}.af{color:green}.aj:hover{display:none}.ak{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.al{display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex}@media (min-width: 600px){.ah{color:red}}@media (min-width: 800px){.ag{color:green}.ai:hover{color:green}}");
  injectFixtureKeyframes(styletron);
  t.equal(styletron.getCss(), ".ae{color:red}.af{color:green}.aj:hover{display:none}.ak{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.al{display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex}@media (min-width: 600px){.ah{color:red}}@media (min-width: 800px){.ag{color:green}.ai:hover{color:green}}@keyframes ae{from{color:purple}50%{color:yellow}to{color:orange}}");
  t.end();
});
test("StyletronServer getStylesheets", t => {
  const styletron = new StyletronServer();
  t.deepEqual(styletron.getStylesheets(), [{
    css: "",
    attrs: {}
  }], "no styles yields array with single empty stylesheet");
  injectFixtureStyles(styletron);
  t.deepEqual(styletron.getStylesheets(), [{
    css: ".ae{color:red}.af{color:green}.aj:hover{display:none}.ak{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.al{display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex}",
    attrs: {}
  }, {
    css: ".ah{color:red}",
    attrs: {
      media: "(min-width: 600px)"
    }
  }, {
    css: ".ag{color:green}.ai:hover{color:green}",
    attrs: {
      media: "(min-width: 800px)"
    }
  }]);
  injectFixtureKeyframes(styletron);
  t.deepEqual(styletron.getStylesheets(), [{
    css: ".ae{color:red}.af{color:green}.aj:hover{display:none}.ak{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.al{display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex}",
    attrs: {}
  }, {
    css: ".ah{color:red}",
    attrs: {
      media: "(min-width: 600px)"
    }
  }, {
    css: ".ag{color:green}.ai:hover{color:green}",
    attrs: {
      media: "(min-width: 800px)"
    }
  }, {
    css: "@keyframes ae{from{color:purple}50%{color:yellow}to{color:orange}}",
    attrs: {
      "data-hydrate": "keyframes"
    }
  }]);
  injectFixtureFontFace(styletron);
  t.deepEqual(styletron.getStylesheets(), [{
    css: "@font-face{font-family:ae;src:local('Roboto')}",
    attrs: {
      "data-hydrate": "font-face"
    }
  }, {
    css: ".ae{color:red}.af{color:green}.aj:hover{display:none}.ak{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.al{display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex}",
    attrs: {}
  }, {
    css: ".ah{color:red}",
    attrs: {
      media: "(min-width: 600px)"
    }
  }, {
    css: ".ag{color:green}.ai:hover{color:green}",
    attrs: {
      media: "(min-width: 800px)"
    }
  }, {
    css: "@keyframes ae{from{color:purple}50%{color:yellow}to{color:orange}}",
    attrs: {
      "data-hydrate": "keyframes"
    }
  }]);
  t.end();
});
test("StyletronServer getStylesheetsHtml ", t => {
  const styletron = new StyletronServer();
  t.equal(styletron.getStylesheetsHtml(), '<style class="_styletron_hydrate_"></style>', "returns single empty stylesheet when no styles");
  injectFixtureStyles(styletron);
  t.equal(styletron.getStylesheetsHtml(), '<style class="_styletron_hydrate_">.ae{color:red}.af{color:green}.aj:hover{display:none}.ak{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.al{display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex}</style><style class="_styletron_hydrate_" media="(min-width: 600px)">.ah{color:red}</style><style class="_styletron_hydrate_" media="(min-width: 800px)">.ag{color:green}.ai:hover{color:green}</style>');
  injectFixtureKeyframes(styletron);
  t.equal(styletron.getStylesheetsHtml(), '<style class="_styletron_hydrate_">.ae{color:red}.af{color:green}.aj:hover{display:none}.ak{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.al{display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex}</style><style class="_styletron_hydrate_" media="(min-width: 600px)">.ah{color:red}</style><style class="_styletron_hydrate_" media="(min-width: 800px)">.ag{color:green}.ai:hover{color:green}</style><style class="_styletron_hydrate_" data-hydrate="keyframes">@keyframes ae{from{color:purple}50%{color:yellow}to{color:orange}}</style>');
  injectFixtureFontFace(styletron);
  t.equal(styletron.getStylesheetsHtml(), '<style class="_styletron_hydrate_" data-hydrate="font-face">@font-face{font-family:ae;src:local(\'Roboto\')}</style><style class="_styletron_hydrate_">.ae{color:red}.af{color:green}.aj:hover{display:none}.ak{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.al{display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex}</style><style class="_styletron_hydrate_" media="(min-width: 600px)">.ah{color:red}</style><style class="_styletron_hydrate_" media="(min-width: 800px)">.ag{color:green}.ai:hover{color:green}</style><style class="_styletron_hydrate_" data-hydrate="keyframes">@keyframes ae{from{color:purple}50%{color:yellow}to{color:orange}}</style>');
  t.end();
});
test("StyletronServer prefix option", t => {
  const styletron = new StyletronServer({
    prefix: "foo_"
  });
  t.equal(styletron.renderStyle({
    color: "red"
  }), "foo_ae");
  t.equal(injectFixtureFontFace(styletron), "foo_ae");
  t.equal(injectFixtureKeyframes(styletron), "foo_ae");
  t.deepEqual(styletron.getStylesheets(), [{
    css: "@font-face{font-family:foo_ae;src:local('Roboto')}",
    attrs: {
      "data-hydrate": "font-face"
    }
  }, {
    css: ".foo_ae{color:red}",
    attrs: {}
  }, {
    css: "@keyframes foo_ae{from{color:purple}50%{color:yellow}to{color:orange}}",
    attrs: {
      "data-hydrate": "keyframes"
    }
  }]);
  t.end();
});

function injectFixtureStyles(styletron) {
  styletron.renderStyle({
    color: "red"
  });
  styletron.renderStyle({
    color: "green"
  });
  styletron.renderStyle({
    "@media (min-width: 800px)": {
      color: "green"
    }
  }); // should be added before "min-width: 800px" query
  // test that Styletron properly sort media queries

  styletron.renderStyle({
    "@media (min-width: 600px)": {
      color: "red"
    }
  });
  styletron.renderStyle({
    "@media (min-width: 800px)": {
      ":hover": {
        color: "green"
      }
    }
  });
  styletron.renderStyle({
    ":hover": {
      display: "none"
    }
  });
  styletron.renderStyle({
    userSelect: "none"
  });
  styletron.renderStyle({
    display: "flex"
  });
}

function injectFixtureKeyframes(styletron) {
  return styletron.renderKeyframes({
    from: {
      color: "purple"
    },
    "50%": {
      color: "yellow"
    },
    to: {
      color: "orange"
    }
  });
}

function injectFixtureFontFace(styletron) {
  return styletron.renderFontFace({
    src: "local('Roboto')"
  });
}
//# sourceMappingURL=node.js.map
