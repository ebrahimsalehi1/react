{"ast":null,"code":"import _regeneratorRuntime from \"/home/alireza/project/irisa/components/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/alireza/project/irisa/components/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/alireza/project/irisa/components/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/alireza/project/irisa/components/src/itcomponents/NewComp/IrisaNewDateDialog.js\";\nimport React, { Fragment, useState } from \"react\";\nimport { Badge } from \"@material-ui/core\";\nimport { DatePicker } from \"@material-ui/pickers\"; //import { makeJSDateObject } from \"../../../utils/helpers\";\n\nimport dayjs from 'dayjs';\nimport moment from 'moment';\nimport { DateTime } from 'luxon';\n\nfunction makeJSDateObject(date) {\n  if (date instanceof dayjs) {\n    return date.clone().toDate();\n  }\n\n  if (moment.isMoment(date)) {\n    return date.clone().toDate();\n  }\n\n  if (date instanceof DateTime) {\n    return date.toJSDate();\n  }\n\n  if (date instanceof Date) {\n    return new Date(date.getTime());\n  }\n\n  throw new Error('Cannot properly parse argument passed to cloneCrossUtils');\n}\n\nfunction getRandomNumber(min, max) {\n  return Math.round(Math.random() * (max - min) + min);\n}\n\nfunction IrisaNewDateDialog() {\n  var _useState = useState([1, 2, 15]),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedDays = _useState2[0],\n      setSelectedDays = _useState2[1];\n\n  var _useState3 = useState(new Date()),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedDate = _useState4[0],\n      handleDateChange = _useState4[1];\n\n  var handleMonthChange =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", new Promise(function (resolve) {\n                setTimeout(function () {\n                  setSelectedDays([1, 2, 3].map(function () {\n                    return getRandomNumber(1, 28);\n                  }));\n                  resolve();\n                }, 1000);\n              }));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleMonthChange() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(DatePicker, {\n    label: \"With server data\",\n    value: selectedDate,\n    onChange: handleDateChange,\n    onMonthChange: handleMonthChange,\n    renderDay: function renderDay(day, selectedDate, isInCurrentMonth, dayComponent) {\n      var date = makeJSDateObject(day); // skip this step, it is required to support date libs\n\n      var isSelected = isInCurrentMonth && selectedDays.includes(date.getDate()); // You can also use our internal <Day /> component\n\n      return React.createElement(Badge, {\n        badgeContent: isSelected ? \"ðŸŒš\" : undefined,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, dayComponent);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }));\n}\n\nexport default IrisaNewDateDialog;","map":{"version":3,"sources":["/home/alireza/project/irisa/components/src/itcomponents/NewComp/IrisaNewDateDialog.js"],"names":["React","Fragment","useState","Badge","DatePicker","dayjs","moment","DateTime","makeJSDateObject","date","clone","toDate","isMoment","toJSDate","Date","getTime","Error","getRandomNumber","min","max","Math","round","random","IrisaNewDateDialog","selectedDays","setSelectedDays","selectedDate","handleDateChange","handleMonthChange","Promise","resolve","setTimeout","map","day","isInCurrentMonth","dayComponent","isSelected","includes","getDate","undefined"],"mappings":"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","sourcesContent":["import React, { Fragment, useState } from \"react\";\nimport { Badge } from \"@material-ui/core\";\nimport { DatePicker } from \"@material-ui/pickers\";\n//import { makeJSDateObject } from \"../../../utils/helpers\";\nimport dayjs from 'dayjs';\nimport moment from 'moment';\nimport { DateTime } from 'luxon';\n\nfunction makeJSDateObject(date) {\n    if (date instanceof dayjs) {\n        return date.clone().toDate();\n    }\n    if (moment.isMoment(date)) {\n        return date.clone().toDate();\n    }\n    if (date instanceof DateTime) {\n        return date.toJSDate();\n    }\n    if (date instanceof Date) {\n        return new Date(date.getTime());\n    }\n    throw new Error('Cannot properly parse argument passed to cloneCrossUtils');\n}\n\n\nfunction getRandomNumber(min, max) {\n  return Math.round(Math.random() * (max - min) + min);\n}\n\nfunction IrisaNewDateDialog() {\n  const [selectedDays, setSelectedDays] = useState([1, 2, 15]);\n  const [selectedDate, handleDateChange] = useState(new Date());\n\n  const handleMonthChange = async () => {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        setSelectedDays([1, 2, 3].map(() => getRandomNumber(1, 28)));\n        resolve();\n      }, 1000);\n    });\n  };\n\n  return (\n    <Fragment>\n      <DatePicker\n        label=\"With server data\"\n        value={selectedDate}\n        onChange={handleDateChange}\n        onMonthChange={handleMonthChange}\n        renderDay={(day, selectedDate, isInCurrentMonth, dayComponent) => {\n          const date = makeJSDateObject(day); // skip this step, it is required to support date libs\n          const isSelected = isInCurrentMonth && selectedDays.includes(date.getDate());\n\n          // You can also use our internal <Day /> component\n          return <Badge badgeContent={isSelected ? \"ðŸŒš\" : undefined}>{dayComponent}</Badge>;\n        }}\n      />\n    </Fragment>\n  );\n}\n\nexport default IrisaNewDateDialog;\n"]},"metadata":{},"sourceType":"module"}