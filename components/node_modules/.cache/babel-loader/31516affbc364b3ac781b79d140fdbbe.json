{"ast":null,"code":"import _toConsumableArray from \"/home/alireza/project/irisa/components/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport validator from \"validator\";\nimport moment from \"moment\";\n\nfunction validation(text, validationType, validationTypeParam) {\n  //console.log(`${text} - ${validationType} - ${validationTypeParam}`)\n  if (typeof validationType === 'undefined' || validationType === null) return true;\n  var result = {\n    isValid: false,\n    messages: {\n      validationType: [],\n      validationMessage: []\n    }\n  };\n\n  for (var i = 0; i < validationType.length; i++) {\n    result.isValid = true;\n    var msg = \"\";\n\n    switch (validationType[i]) {\n      case \"afterDate\":\n        {\n          var targetDate = validationTypeParam ? parseInt(validationTypeParam[i]) : new Date().getTime();\n          var displayDate = moment(new Date(targetDate)).locale('fa').format('YYYY/MM/DD HH:mm:ss');\n          result.isValid = (!isNaN(text) ? parseInt(text) : text) >= targetDate;\n          msg = \"زمان حداقل: \" + displayDate;\n          result.messages.validationType = [].concat(_toConsumableArray(result.messages.validationType), [validationType[i]]);\n          result.messages.validationMessage = [].concat(_toConsumableArray(result.messages.validationMessage), [msg]);\n          break;\n        }\n\n      case \"alpha\":\n        {\n          result.isValid = validator.isAlpha(text, 'en-US');\n          msg = \"کاراکترهای مجاز: حروف لاتین\";\n          result.messages.validationType = [].concat(_toConsumableArray(result.messages.validationType), [validationType[i]]);\n          result.messages.validationMessage = [].concat(_toConsumableArray(result.messages.validationMessage), [msg]);\n          break;\n        }\n\n      case \"alphaFa\":\n        {\n          var regEx = /^[آابپتثجچحخدذرزژسشصضطظعغفقکگلمنوهیي]+[آابپتثجچحخدذرزژسشصضطظعغفقکگلمنوهیي ]*$/;\n          result.isValid = validator.matches(validator.rtrim(text), regEx);\n          msg = \"کاراکترهای مجاز: حروف فارسی و فاصله\";\n          result.messages.validationType = [].concat(_toConsumableArray(result.messages.validationType), [validationType[i]]);\n          result.messages.validationMessage = [].concat(_toConsumableArray(result.messages.validationMessage), [msg]);\n          break;\n        }\n\n      case \"alphanumeric\":\n        {\n          result.isValid = validator.isAlphanumeric(text, 'en-US');\n          msg = \"کاراکترهای مجاز: حروف لاتین و عدد\";\n          result.messages.validationType = [].concat(_toConsumableArray(result.messages.validationType), [validationType[i]]);\n          result.messages.validationMessage = [].concat(_toConsumableArray(result.messages.validationMessage), [msg]);\n          break;\n        }\n\n      case \"alphanumericFa\":\n        {\n          var _regEx = /^[٠١٢٣٤٥٦٧٨٩0-9آابپتثجچحخدذرزژسشصضطظعغفقکگلمنوهیي]+[٠١٢٣٤٥٦٧٨٩0-9آابپتثجچحخدذرزژسشصضطظعغفقکگلمنوهیي ]*$/;\n          result.isValid = validator.matches(validator.rtrim(text), _regEx);\n          msg = \"کاراکترهای مجاز: حروف فارسی، فاصله و عدد\";\n          result.messages.validationType = [].concat(_toConsumableArray(result.messages.validationType), [validationType[i]]);\n          result.messages.validationMessage = [].concat(_toConsumableArray(result.messages.validationMessage), [msg]);\n          break;\n        }\n\n      case \"equals\":\n        {\n          if (validationTypeParam && validationTypeParam[i]) {\n            result.isValid = validator.equals(text, validationTypeParam[i]);\n            msg = \"مقادیر مساوی نمی باشند\";\n          }\n\n          result.messages.validationType = [].concat(_toConsumableArray(result.messages.validationType), [validationType[i]]);\n          result.messages.validationMessage = [].concat(_toConsumableArray(result.messages.validationMessage), [msg]);\n          break;\n        }\n\n      case \"email\":\n        {\n          result.isValid = validator.isEmail(text);\n          msg = \"ایمیل معتبر نمی باشد\";\n          result.messages.validationType = [].concat(_toConsumableArray(result.messages.validationType), [validationType[i]]);\n          result.messages.validationMessage = [].concat(_toConsumableArray(result.messages.validationMessage), [msg]);\n          break;\n        }\n\n      case \"lowercase\":\n        {\n          result.isValid = validator.isLowercase(text);\n          msg = \"کاراکترهای مجاز: حروف لاتین کوچک\";\n          result.messages.validationType = [].concat(_toConsumableArray(result.messages.validationType), [validationType[i]]);\n          result.messages.validationMessage = [].concat(_toConsumableArray(result.messages.validationMessage), [msg]);\n          break;\n        }\n\n      case \"matches\":\n        {\n          if (validationTypeParam && validationTypeParam[i]) {\n            result.isValid = validator.matches(text, validationTypeParam[i]);\n            msg = \"ورودی با عبارت منطقی مطابقت ندارد\";\n          }\n\n          result.messages.validationType = [].concat(_toConsumableArray(result.messages.validationType), [validationType[i]]);\n          result.messages.validationMessage = [].concat(_toConsumableArray(result.messages.validationMessage), [msg]);\n          break;\n        }\n\n      case \"mobilePhone\":\n        {\n          result.isValid = validator.isMobilePhone(text, 'fa-IR');\n          msg = \"لطفا شماره موبایل وارد نمایید\";\n          result.messages.validationType = [].concat(_toConsumableArray(result.messages.validationType), [validationType[i]]);\n          result.messages.validationMessage = [].concat(_toConsumableArray(result.messages.validationMessage), [msg]);\n          break;\n        }\n\n      case \"number\":\n        {\n          result.isValid = validator.isNumeric(text);\n          msg = \"لطفا عدد وارد نمایید\";\n          result.messages.validationType = [].concat(_toConsumableArray(result.messages.validationType), [validationType[i]]);\n          result.messages.validationMessage = [].concat(_toConsumableArray(result.messages.validationMessage), [msg]);\n          break;\n        }\n\n      case \"numberFloat\":\n        {\n          if (validationTypeParam && validationTypeParam[i]) {\n            result.isValid = validator.isFloat(text, validationTypeParam[i]);\n            msg = \"\\u0644\\u0637\\u0641\\u0627 \\u0639\\u062F\\u062F \\u0627\\u0639\\u0634\\u0627\\u0631\\u06CC \\u0648\\u0627\\u0631\\u062F \\u0646\\u0645\\u0627\\u06CC\\u06CC\\u062F\\n\";\n            msg += validationTypeParam[i].min ? \"\\u0628\\u0632\\u0631\\u06AF \\u062A\\u0631 \\u06CC\\u0627 \\u0645\\u0633\\u0627\\u0648\\u06CC: \".concat(validationTypeParam[i].min, \"\\n\") : \"\";\n            msg += validationTypeParam[i].max ? \"\\u06A9\\u0648\\u0686\\u06A9 \\u062A\\u0631 \\u06CC\\u0627 \\u0645\\u0633\\u0627\\u0648\\u06CC: \".concat(validationTypeParam[i].max, \"\\n\") : \"\";\n            msg += validationTypeParam[i].gt ? \"\\u0628\\u0632\\u0631\\u06AF \\u062A\\u0631 \\u0627\\u0632: \".concat(validationTypeParam[i].gt, \"\\n\") : \"\";\n            msg += validationTypeParam[i].lt ? \"\\u06A9\\u0648\\u0686\\u06A9 \\u062A\\u0631 \\u0627\\u0632: \".concat(validationTypeParam[i].lt, \"\\n\") : \"\";\n          } else {\n            result.isValid = validator.isFloat(text);\n            msg = \"\\u0644\\u0637\\u0641\\u0627 \\u0639\\u062F\\u062F \\u0627\\u0639\\u0634\\u0627\\u0631\\u06CC \\u0648\\u0627\\u0631\\u062F \\u0646\\u0645\\u0627\\u06CC\\u06CC\\u062F\\n\";\n          }\n\n          result.messages.validationType = [].concat(_toConsumableArray(result.messages.validationType), [validationType[i]]);\n          result.messages.validationMessage = [].concat(_toConsumableArray(result.messages.validationMessage), [msg]);\n          break;\n        }\n\n      case \"numberInt\":\n        {\n          if (validationTypeParam && validationTypeParam[i]) {\n            result.isValid = validator.isInt(text, validationTypeParam[i]);\n            msg = \"\\u0644\\u0637\\u0641\\u0627 \\u0639\\u062F\\u062F \\u0635\\u062D\\u06CC\\u062D \\u0648\\u0627\\u0631\\u062F \\u0646\\u0645\\u0627\\u06CC\\u06CC\\u062F\\n\";\n            msg += validationTypeParam[i].min ? \"\\u0628\\u0632\\u0631\\u06AF \\u062A\\u0631 \\u06CC\\u0627 \\u0645\\u0633\\u0627\\u0648\\u06CC: \".concat(validationTypeParam[i].min, \"\\n\") : \"\";\n            msg += validationTypeParam[i].max ? \"\\u06A9\\u0648\\u0686\\u06A9 \\u062A\\u0631 \\u06CC\\u0627 \\u0645\\u0633\\u0627\\u0648\\u06CC: \".concat(validationTypeParam[i].max, \"\\n\") : \"\";\n            msg += validationTypeParam[i].gt ? \"\\u0628\\u0632\\u0631\\u06AF \\u062A\\u0631 \\u0627\\u0632: \".concat(validationTypeParam[i].gt, \"\\n\") : \"\";\n            msg += validationTypeParam[i].lt ? \"\\u06A9\\u0648\\u0686\\u06A9 \\u062A\\u0631 \\u0627\\u0632: \".concat(validationTypeParam[i].lt, \"\\n\") : \"\";\n          } else {\n            result.isValid = validator.isInt(text);\n            msg = \"\\u0644\\u0637\\u0641\\u0627 \\u0639\\u062F\\u062F \\u0635\\u062D\\u06CC\\u062D \\u0648\\u0627\\u0631\\u062F \\u0646\\u0645\\u0627\\u06CC\\u06CC\\u062F\\n\";\n          }\n\n          result.messages.validationType = [].concat(_toConsumableArray(result.messages.validationType), [validationType[i]]);\n          result.messages.validationMessage = [].concat(_toConsumableArray(result.messages.validationMessage), [msg]);\n          break;\n        }\n\n      case \"required\":\n        {\n          result.isValid = !validator.isEmpty(text);\n          msg = \"مقدار فیلد اجباری می باشد\";\n          result.messages.validationType = [].concat(_toConsumableArray(result.messages.validationType), [validationType[i]]);\n          result.messages.validationMessage = [].concat(_toConsumableArray(result.messages.validationMessage), [msg]);\n          break;\n        }\n\n      case \"uppercase\":\n        {\n          result.isValid = validator.isUppercase(text);\n          msg = \"کاراکترهای مجاز: حروف لاتین بزرگ\";\n          result.messages.validationType = [].concat(_toConsumableArray(result.messages.validationType), [validationType[i]]);\n          result.messages.validationMessage = [].concat(_toConsumableArray(result.messages.validationMessage), [msg]);\n          break;\n        }\n\n      default:\n        {\n          result.isValid = true;\n        }\n    } //switch end\n\n  } //for end\n  //{isValid:false,messages:{validationType:[],validationParams:[]}}\n\n\n  return {\n    isValid: result.isValid,\n    messages: result.messages && result.messages.validationMessage ? result.messages.validationMessage.reduce(function (s, item) {\n      return s + item + '\\n';\n    }) : ''\n  };\n}\n\n;\n\nfunction validation1() {}\n\nexport default validation;","map":{"version":3,"sources":["/home/alireza/project/irisa/components/src/itcomponents/NewComp/Validation.js"],"names":["validator","moment","validation","text","validationType","validationTypeParam","result","isValid","messages","validationMessage","i","length","msg","targetDate","parseInt","Date","getTime","displayDate","locale","format","isNaN","isAlpha","regEx","matches","rtrim","isAlphanumeric","equals","isEmail","isLowercase","isMobilePhone","isNumeric","isFloat","min","max","gt","lt","isInt","isEmpty","isUppercase","reduce","s","item","validation1"],"mappings":"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","sourcesContent":["import validator from \"validator\";\nimport moment from \"moment\";\n\n\n   function validation(text, validationType, validationTypeParam) {\n    //console.log(`${text} - ${validationType} - ${validationTypeParam}`)\n\n    if(typeof validationType==='undefined' || validationType===null)\n        return true\n\n    let result = {isValid:false,messages:{validationType:[],validationMessage:[]}}\n\n    for (let i = 0; i < validationType.length; i++) {\n        result.isValid = true;\n        let msg = \"\";\n\n        switch (validationType[i]) {\n            case \"afterDate\": {\n                let targetDate = validationTypeParam ? parseInt(validationTypeParam[i]) : new Date().getTime();\n                let displayDate = moment(new Date(targetDate)).locale('fa').format('YYYY/MM/DD HH:mm:ss');\n\n                result.isValid = (!isNaN(text) ? parseInt(text) : text) >= targetDate;\n                msg = \"زمان حداقل: \" + displayDate;\n\n                result.messages.validationType = [...result.messages.validationType,validationType[i]]\n                result.messages.validationMessage = [...result.messages.validationMessage,msg]\n\n                break;\n            }\n\n            case \"alpha\": {\n                result.isValid =  validator.isAlpha(text, 'en-US');\n                msg = \"کاراکترهای مجاز: حروف لاتین\";\n\n                result.messages.validationType = [...result.messages.validationType,validationType[i]]\n                result.messages.validationMessage = [...result.messages.validationMessage,msg]\n\n                break;\n            }\n\n            case \"alphaFa\": {\n                let regEx = /^[آابپتثجچحخدذرزژسشصضطظعغفقکگلمنوهیي]+[آابپتثجچحخدذرزژسشصضطظعغفقکگلمنوهیي ]*$/;\n                result.isValid =  validator.matches(validator.rtrim(text), regEx);\n                msg = \"کاراکترهای مجاز: حروف فارسی و فاصله\";\n\n                result.messages.validationType = [...result.messages.validationType,validationType[i]]\n                result.messages.validationMessage = [...result.messages.validationMessage,msg]\n\n                break;\n            }\n\n            case \"alphanumeric\": {\n                result.isValid =  validator.isAlphanumeric(text, 'en-US');\n                msg = \"کاراکترهای مجاز: حروف لاتین و عدد\";\n\n                result.messages.validationType = [...result.messages.validationType,validationType[i]]\n                result.messages.validationMessage = [...result.messages.validationMessage,msg]\n\n                break;\n            }\n\n            case \"alphanumericFa\": {\n                let regEx = /^[٠١٢٣٤٥٦٧٨٩0-9آابپتثجچحخدذرزژسشصضطظعغفقکگلمنوهیي]+[٠١٢٣٤٥٦٧٨٩0-9آابپتثجچحخدذرزژسشصضطظعغفقکگلمنوهیي ]*$/;\n                result.isValid =  validator.matches(validator.rtrim(text), regEx);\n                msg = \"کاراکترهای مجاز: حروف فارسی، فاصله و عدد\";\n\n                result.messages.validationType = [...result.messages.validationType,validationType[i]]\n                result.messages.validationMessage = [...result.messages.validationMessage,msg]\n\n                break;\n            }\n\n            case \"equals\": {\n                if (validationTypeParam && validationTypeParam[i]) {\n                    result.isValid =  validator.equals(text, validationTypeParam[i]);\n                    msg = \"مقادیر مساوی نمی باشند\";\n                }\n\n                result.messages.validationType = [...result.messages.validationType,validationType[i]]\n                result.messages.validationMessage = [...result.messages.validationMessage,msg]\n\n                break;\n            }\n\n            case \"email\": {\n                result.isValid =  validator.isEmail(text);\n                msg = \"ایمیل معتبر نمی باشد\";\n \n                result.messages.validationType = [...result.messages.validationType,validationType[i]]\n                result.messages.validationMessage = [...result.messages.validationMessage,msg]\n\n                break;\n            }\n\n            case \"lowercase\": {\n                result.isValid =  validator.isLowercase(text);\n                msg = \"کاراکترهای مجاز: حروف لاتین کوچک\";\n\n                result.messages.validationType = [...result.messages.validationType,validationType[i]]\n                result.messages.validationMessage = [...result.messages.validationMessage,msg]\n                \n                break;\n            }\n\n            case \"matches\": {\n                if (validationTypeParam && validationTypeParam[i]) {\n                    result.isValid =  validator.matches(text, validationTypeParam[i]);\n                    msg = \"ورودی با عبارت منطقی مطابقت ندارد\";\n                }\n\n                result.messages.validationType = [...result.messages.validationType,validationType[i]]\n                result.messages.validationMessage = [...result.messages.validationMessage,msg]\n\n                break;\n            }\n\n            case \"mobilePhone\": {\n                result.isValid =  validator.isMobilePhone(text, 'fa-IR');\n                msg = \"لطفا شماره موبایل وارد نمایید\";\n\n                result.messages.validationType = [...result.messages.validationType,validationType[i]]\n                result.messages.validationMessage = [...result.messages.validationMessage,msg]\n\n                break;\n            }\n\n            case \"number\": {\n                result.isValid =  validator.isNumeric(text);\n                msg = \"لطفا عدد وارد نمایید\";\n\n                result.messages.validationType = [...result.messages.validationType,validationType[i]]\n                result.messages.validationMessage = [...result.messages.validationMessage,msg]\n\n                break;\n            }\n\n            case \"numberFloat\": {\n                if (validationTypeParam && validationTypeParam[i]) {\n                    result.isValid =  validator.isFloat(text, validationTypeParam[i]);\n\n                    msg = `لطفا عدد اعشاری وارد نمایید\\n`;\n                    msg += validationTypeParam[i].min\n                        ? `بزرگ تر یا مساوی: ${validationTypeParam[i].min}\\n` : ``;\n                    msg += validationTypeParam[i].max\n                        ? `کوچک تر یا مساوی: ${validationTypeParam[i].max}\\n` : ``;\n                    msg += validationTypeParam[i].gt\n                        ? `بزرگ تر از: ${validationTypeParam[i].gt}\\n` : ``;\n                    msg += validationTypeParam[i].lt\n                        ? `کوچک تر از: ${validationTypeParam[i].lt}\\n` : ``;\n                } else {\n                    result.isValid = validator.isFloat(text);\n                    msg = `لطفا عدد اعشاری وارد نمایید\\n`;\n                }\n\n                result.messages.validationType = [...result.messages.validationType,validationType[i]]\n                result.messages.validationMessage = [...result.messages.validationMessage,msg]\n\n                break;\n            }\n\n            case \"numberInt\": {\n                if (validationTypeParam && validationTypeParam[i]) {\n                    result.isValid =  validator.isInt(text, validationTypeParam[i]);\n\n                    msg = `لطفا عدد صحیح وارد نمایید\\n`;\n                    msg += validationTypeParam[i].min\n                        ? `بزرگ تر یا مساوی: ${validationTypeParam[i].min}\\n` : ``;\n                    msg += validationTypeParam[i].max\n                        ? `کوچک تر یا مساوی: ${validationTypeParam[i].max}\\n` : ``;\n                    msg += validationTypeParam[i].gt\n                        ? `بزرگ تر از: ${validationTypeParam[i].gt}\\n` : ``;\n                    msg += validationTypeParam[i].lt\n                        ? `کوچک تر از: ${validationTypeParam[i].lt}\\n` : ``;\n                } else {\n                    result.isValid =  validator.isInt(text);\n                    msg = `لطفا عدد صحیح وارد نمایید\\n`;\n                }\n\n                result.messages.validationType = [...result.messages.validationType,validationType[i]]\n                result.messages.validationMessage = [...result.messages.validationMessage,msg]\n\n                break;\n            }\n\n            case \"required\": {\n                result.isValid =  !validator.isEmpty(text);\n                msg = \"مقدار فیلد اجباری می باشد\";\n\n                result.messages.validationType = [...result.messages.validationType,validationType[i]]\n                result.messages.validationMessage = [...result.messages.validationMessage,msg]\n\n                break;\n            }\n\n            case \"uppercase\": {\n                result.isValid =  validator.isUppercase(text);\n                msg = \"کاراکترهای مجاز: حروف لاتین بزرگ\";\n\n                result.messages.validationType = [...result.messages.validationType,validationType[i]]\n                result.messages.validationMessage = [...result.messages.validationMessage,msg]\n\n                break;\n            }\n\n            default: {\n                result.isValid = true;\n            }\n        }//switch end\n\n\n\n    }//for end\n\n    //{isValid:false,messages:{validationType:[],validationParams:[]}}\n\n    return {isValid:result.isValid,\n        messages:result.messages && result.messages.validationMessage ? result.messages.validationMessage.reduce((s,item)=>{return s+item+'\\n'}):''\n    }\n};\n\nfunction validation1(){\n\n}\n\nexport default validation\n"]},"metadata":{},"sourceType":"module"}