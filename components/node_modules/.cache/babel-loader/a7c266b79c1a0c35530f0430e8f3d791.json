{"ast":null,"code":"import _slicedToArray from \"/home/alireza/project/irisa/components/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/alireza/project/irisa/components/src/itcomponents/NewComp/IrisaTextField.js\";\nimport React, { useState, useEffect } from 'react';\nimport { TextField, withStyles } from '@material-ui/core'; //import {styles} from './styles'\n\nimport validation from './Validation';\nimport NumberFormat from 'react-number-format';\nimport PropTypes from 'prop-types';\nimport MaskedInput from 'react-text-mask';\nexport default IrisaTextField;\nIrisaTextField.defaultProps = {\n  mask: null,\n  format: null,\n  type: 'general' //rules: null,\n  //onChange: null,\n  //onBlur: null,\n\n};\n\nfunction IrisaTextField(props) {\n  //const {rules,classes,fullWidth,onCustomValidation,onChange,onBlur} = props\n  var classes = props.classes,\n      useLov = props.useLov,\n      label = props.label,\n      name = props.name,\n      disabled = props.disabled,\n      required = props.required,\n      validationType = props.validationType,\n      validationTypeParam = props.validationTypeParam,\n      adornment = props.adornment,\n      icon = props.icon,\n      select = props.select,\n      InputProps = props.InputProps,\n      SelectProps = props.SelectProps,\n      fullWidth = props.fullWidth,\n      rows = props.rows,\n      value = props.value,\n      multiline = props.multiline;\n  var rules = props.rules,\n      mask = props.mask,\n      inputRef = props.inputRef,\n      placeholderChar = props.placeholderChar,\n      onCustomValidation = props.onCustomValidation,\n      format = props.format,\n      prefix = props.prefix,\n      type = props.type,\n      onChange = props.onChange,\n      onBlur = props.onBlur;\n  var resultValidation = undefined;\n\n  if (rules !== undefined) {\n    resultValidation = validation(props.value, rules.validationType, rules.validationParams);\n  }\n\n  var _useState = useState(rules === undefined ? true : resultValidation.isValid),\n      _useState2 = _slicedToArray(_useState, 2),\n      allValidation = _useState2[0],\n      setAllValidation = _useState2[1];\n\n  function onChangeHandler(event) {\n    if (rules.trigger === 'change' && onChange !== undefined) onChange(event);\n    if (rules.trigger === 'blur' && onBlur !== undefined) onBlur(event);\n    var _event$target = event.target,\n        name = _event$target.name,\n        value = _event$target.value;\n\n    if (rules !== undefined) {\n      resultValidation = validation(value, rules.validationType, rules.validationParams);\n      setAllValidation(resultValidation.isValid && rules.onCustomValidation);\n    } //console.log('on changed',resultValidation)\n\n  }\n\n  useEffect(function () {\n    console.log('refresh occured ....');\n  }, allValidation);\n  return React.createElement(React.Fragment, null, type === 'general' && React.createElement(TextField, {\n    variant: 'outlined',\n    name: name,\n    value: value //className={fullWidth ? classes.marginFullwidth : classes.margin2}\n    ,\n    onChange: rules !== undefined && rules.trigger === 'change' ? onChangeHandler : null,\n    onBlur: rules !== undefined && rules.trigger === 'blur' ? onChangeHandler : null,\n    error: !allValidation,\n    helperText: !allValidation && resultValidation.messages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), type === 'mask' && React.createElement(MaskedInput, {\n    name: name,\n    value: value,\n    ref: inputRef,\n    mask: mask,\n    placeholderChar: placeholderChar,\n    showMask: true,\n    onChange: rules !== undefined && rules.trigger === 'change' ? onChangeHandler : null,\n    onBlur: rules !== undefined && rules.trigger === 'blur' ? onChangeHandler : null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }), type === 'number' && React.createElement(NumberFormat, {\n    name: name,\n    value: value,\n    getInputRef: inputRef,\n    format: format,\n    thousandSeparator: true,\n    prefix: prefix,\n    onValueChange: function onValueChange(values) {\n      console.log(values.target);\n    } //onChange={rules!==undefined && rules.trigger==='change' ?  onChangeHandler:null } \n    //onBlur={rules!==undefined && rules.trigger==='blur' ? onChangeHandler:null}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }));\n}\n\nIrisaTextField.propTypes = {\n  rules: PropTypes.object,\n  onChange: PropTypes.func,\n  onBlur: PropTypes.func,\n  type: PropTypes.oneOf(['general', 'mask', 'number']) //webElement: PropTypes.oneOf(\"\",\"list\",\"popup\",\"multiple\"),\n\n};","map":{"version":3,"sources":["/home/alireza/project/irisa/components/src/itcomponents/NewComp/IrisaTextField.js"],"names":["React","useState","useEffect","TextField","withStyles","validation","NumberFormat","PropTypes","MaskedInput","IrisaTextField","defaultProps","mask","format","type","props","classes","useLov","label","name","disabled","required","validationType","validationTypeParam","adornment","icon","select","InputProps","SelectProps","fullWidth","rows","value","multiline","rules","inputRef","placeholderChar","onCustomValidation","prefix","onChange","onBlur","resultValidation","undefined","validationParams","isValid","allValidation","setAllValidation","onChangeHandler","event","trigger","target","console","log","messages","values","propTypes","object","func","oneOf"],"mappings":"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","sourcesContent":["\nimport React,{useState,useEffect} from 'react'\nimport {TextField,withStyles} from '@material-ui/core'\n//import {styles} from './styles'\nimport validation from './Validation'\nimport NumberFormat from 'react-number-format'\nimport PropTypes from 'prop-types'\nimport MaskedInput from 'react-text-mask'\n\n\nexport default (IrisaTextField)\n\nIrisaTextField.defaultProps = {\n  mask: null,\n  format:null,\n  type:'general'\n  //rules: null,\n  //onChange: null,\n  //onBlur: null,\n}\n\nfunction IrisaTextField(props){\n\n    //const {rules,classes,fullWidth,onCustomValidation,onChange,onBlur} = props\n\n    const {\n      classes, useLov, label, name, disabled, required,\n      validationType, validationTypeParam, adornment, icon, \n      select, InputProps, SelectProps,\n      fullWidth, rows, value, multiline\n    } = props;\n\n    const { rules, mask, inputRef, placeholderChar, onCustomValidation, \n      format,prefix,type,\n      onChange, onBlur } =props\n\n    let resultValidation = undefined\n    if(rules!==undefined){\n      resultValidation = validation(props.value,rules.validationType,rules.validationParams)\n    }\n\n    const [allValidation,setAllValidation] = useState(rules===undefined ? true:resultValidation.isValid)\n\n      function onChangeHandler(event){\n        if(rules.trigger==='change' && onChange!==undefined )\n          onChange(event);\n\n        if(rules.trigger==='blur' && onBlur!==undefined )\n          onBlur(event);\n\n        const {name,value} =event.target\n        if(rules!==undefined){\n          resultValidation = validation(value,rules.validationType,rules.validationParams)\n          setAllValidation(resultValidation.isValid && rules.onCustomValidation)\n        }\n\n        //console.log('on changed',resultValidation)\n        \n    }      \n\n    useEffect(()=>{\n        console.log('refresh occured ....')\n    },allValidation)\n\n    return (<>\n    { type==='general' && \n        <TextField variant={'outlined'} \n        name={name} \n        value={value}\n           //className={fullWidth ? classes.marginFullwidth : classes.margin2}\n        onChange={rules!==undefined && rules.trigger==='change' ?  onChangeHandler:null } \n        onBlur={rules!==undefined && rules.trigger==='blur' ? onChangeHandler:null}\n        error={!allValidation} \n        helperText={!allValidation && resultValidation.messages}\n        />\n    }\n    {\n      type==='mask' &&\n       <MaskedInput\n       name={name} \n       value={value}\n       ref={inputRef}\n       mask={mask}\n       placeholderChar={placeholderChar}\n       showMask\n       onChange={rules!==undefined && rules.trigger==='change' ?  onChangeHandler:null } \n       onBlur={rules!==undefined && rules.trigger==='blur' ? onChangeHandler:null}\n     />   \n    }\n    {\n      type==='number' &&\n      <NumberFormat\n      name={name} \n      value={value}\n      getInputRef={inputRef}\n      format={format}\n      thousandSeparator\n      prefix={prefix}   \n      onValueChange={values => {\n        console.log(values.target)\n      }}         \n      //onChange={rules!==undefined && rules.trigger==='change' ?  onChangeHandler:null } \n      //onBlur={rules!==undefined && rules.trigger==='blur' ? onChangeHandler:null}\n      />\n    }\n        </>\n    )\n}\n\nIrisaTextField.propTypes = {\n  rules: PropTypes.object,\n  onChange: PropTypes.func,\n  onBlur: PropTypes.func,\n  type: PropTypes.oneOf(['general','mask','number']),\n  //webElement: PropTypes.oneOf(\"\",\"list\",\"popup\",\"multiple\"),\n\n}\n"]},"metadata":{},"sourceType":"module"}